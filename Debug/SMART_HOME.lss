
SMART_HOME.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000570e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000208  00800060  0000570e  000057a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800268  00800268  000059aa  2**0
                  ALLOC
  3 .stab         00004710  00000000  00000000  000059ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000216f  00000000  00000000  0000a0bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000c22b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020f  00000000  00000000  0000c3eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002b0a  00000000  00000000  0000c5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014c8  00000000  00000000  0000f104  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001384  00000000  00000000  000105cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00011950  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000375  00000000  00000000  00011b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018f2  00000000  00000000  00011ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00013797  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 71 12 	jmp	0x24e2	; 0x24e2 <__vector_13>
      38:	0c 94 c5 12 	jmp	0x258a	; 0x258a <__vector_14>
      3c:	0c 94 19 13 	jmp	0x2632	; 0x2632 <__vector_15>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	f7 e5       	ldi	r31, 0x57	; 87
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a8 e6       	ldi	r26, 0x68	; 104
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 37       	cpi	r26, 0x75	; 117
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4a 29 	call	0x5294	; 0x5294 <main>
      8a:	0c 94 85 2b 	jmp	0x570a	; 0x570a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__ashldi3>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	60 97       	sbiw	r28, 0x10	; 16
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	a8 2f       	mov	r26, r24
     1ac:	00 23       	and	r16, r16
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <__ashldi3+0x22>
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__ashldi3+0xe4>
     1b2:	7e 01       	movw	r14, r28
     1b4:	08 94       	sec
     1b6:	e1 1c       	adc	r14, r1
     1b8:	f1 1c       	adc	r15, r1
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	f7 01       	movw	r30, r14
     1be:	11 92       	st	Z+, r1
     1c0:	8a 95       	dec	r24
     1c2:	e9 f7       	brne	.-6      	; 0x1be <__ashldi3+0x2e>
     1c4:	29 83       	std	Y+1, r18	; 0x01
     1c6:	3a 83       	std	Y+2, r19	; 0x02
     1c8:	4b 83       	std	Y+3, r20	; 0x03
     1ca:	5c 83       	std	Y+4, r21	; 0x04
     1cc:	6d 83       	std	Y+5, r22	; 0x05
     1ce:	7e 83       	std	Y+6, r23	; 0x06
     1d0:	af 83       	std	Y+7, r26	; 0x07
     1d2:	98 87       	std	Y+8, r25	; 0x08
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	80 1b       	sub	r24, r16
     1d8:	e8 2f       	mov	r30, r24
     1da:	ff 27       	eor	r31, r31
     1dc:	e7 fd       	sbrc	r30, 7
     1de:	f0 95       	com	r31
     1e0:	49 81       	ldd	r20, Y+1	; 0x01
     1e2:	5a 81       	ldd	r21, Y+2	; 0x02
     1e4:	6b 81       	ldd	r22, Y+3	; 0x03
     1e6:	7c 81       	ldd	r23, Y+4	; 0x04
     1e8:	18 16       	cp	r1, r24
     1ea:	84 f0       	brlt	.+32     	; 0x20c <__ashldi3+0x7c>
     1ec:	19 86       	std	Y+9, r1	; 0x09
     1ee:	1a 86       	std	Y+10, r1	; 0x0a
     1f0:	1b 86       	std	Y+11, r1	; 0x0b
     1f2:	1c 86       	std	Y+12, r1	; 0x0c
     1f4:	88 27       	eor	r24, r24
     1f6:	99 27       	eor	r25, r25
     1f8:	8e 1b       	sub	r24, r30
     1fa:	9f 0b       	sbc	r25, r31
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__ashldi3+0x76>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	66 1f       	adc	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	d2 f7       	brpl	.-12     	; 0x1fe <__ashldi3+0x6e>
     20a:	28 c0       	rjmp	.+80     	; 0x25c <__ashldi3+0xcc>
     20c:	20 2f       	mov	r18, r16
     20e:	33 27       	eor	r19, r19
     210:	27 fd       	sbrc	r18, 7
     212:	30 95       	com	r19
     214:	db 01       	movw	r26, r22
     216:	ca 01       	movw	r24, r20
     218:	02 2e       	mov	r0, r18
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__ashldi3+0x94>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	aa 1f       	adc	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	0a 94       	dec	r0
     226:	d2 f7       	brpl	.-12     	; 0x21c <__ashldi3+0x8c>
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	ab 87       	std	Y+11, r26	; 0x0b
     22e:	bc 87       	std	Y+12, r27	; 0x0c
     230:	04 c0       	rjmp	.+8      	; 0x23a <__ashldi3+0xaa>
     232:	76 95       	lsr	r23
     234:	67 95       	ror	r22
     236:	57 95       	ror	r21
     238:	47 95       	ror	r20
     23a:	ea 95       	dec	r30
     23c:	d2 f7       	brpl	.-12     	; 0x232 <__ashldi3+0xa2>
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	af 81       	ldd	r26, Y+7	; 0x07
     244:	b8 85       	ldd	r27, Y+8	; 0x08
     246:	04 c0       	rjmp	.+8      	; 0x250 <__ashldi3+0xc0>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
     250:	2a 95       	dec	r18
     252:	d2 f7       	brpl	.-12     	; 0x248 <__ashldi3+0xb8>
     254:	48 2b       	or	r20, r24
     256:	59 2b       	or	r21, r25
     258:	6a 2b       	or	r22, r26
     25a:	7b 2b       	or	r23, r27
     25c:	4d 87       	std	Y+13, r20	; 0x0d
     25e:	5e 87       	std	Y+14, r21	; 0x0e
     260:	6f 87       	std	Y+15, r22	; 0x0f
     262:	78 8b       	std	Y+16, r23	; 0x10
     264:	29 85       	ldd	r18, Y+9	; 0x09
     266:	3a 85       	ldd	r19, Y+10	; 0x0a
     268:	4b 85       	ldd	r20, Y+11	; 0x0b
     26a:	5c 85       	ldd	r21, Y+12	; 0x0c
     26c:	6d 85       	ldd	r22, Y+13	; 0x0d
     26e:	7e 85       	ldd	r23, Y+14	; 0x0e
     270:	af 85       	ldd	r26, Y+15	; 0x0f
     272:	98 89       	ldd	r25, Y+16	; 0x10
     274:	8a 2f       	mov	r24, r26
     276:	60 96       	adiw	r28, 0x10	; 16
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <__fixunssfsi>:
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	7b 01       	movw	r14, r22
     298:	8c 01       	movw	r16, r24
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e4       	ldi	r21, 0x4F	; 79
     2a2:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <__gesf2>
     2a6:	88 23       	and	r24, r24
     2a8:	8c f0       	brlt	.+34     	; 0x2cc <__fixunssfsi+0x3e>
     2aa:	c8 01       	movw	r24, r16
     2ac:	b7 01       	movw	r22, r14
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	5f e4       	ldi	r21, 0x4F	; 79
     2b6:	0e 94 34 09 	call	0x1268	; 0x1268 <__subsf3>
     2ba:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fixsfsi>
     2be:	9b 01       	movw	r18, r22
     2c0:	ac 01       	movw	r20, r24
     2c2:	20 50       	subi	r18, 0x00	; 0
     2c4:	30 40       	sbci	r19, 0x00	; 0
     2c6:	40 40       	sbci	r20, 0x00	; 0
     2c8:	50 48       	sbci	r21, 0x80	; 128
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__fixunssfsi+0x4a>
     2cc:	c8 01       	movw	r24, r16
     2ce:	b7 01       	movw	r22, r14
     2d0:	0e 94 c8 0b 	call	0x1790	; 0x1790 <__fixsfsi>
     2d4:	9b 01       	movw	r18, r22
     2d6:	ac 01       	movw	r20, r24
     2d8:	b9 01       	movw	r22, r18
     2da:	ca 01       	movw	r24, r20
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <__udivdi3>:
     2e6:	ae e5       	ldi	r26, 0x5E	; 94
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e9 e7       	ldi	r30, 0x79	; 121
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	0c 94 4e 2b 	jmp	0x569c	; 0x569c <__prologue_saves__>
     2f2:	a8 e0       	ldi	r26, 0x08	; 8
     2f4:	4e 01       	movw	r8, r28
     2f6:	08 94       	sec
     2f8:	81 1c       	adc	r8, r1
     2fa:	91 1c       	adc	r9, r1
     2fc:	f4 01       	movw	r30, r8
     2fe:	6a 2e       	mov	r6, r26
     300:	11 92       	st	Z+, r1
     302:	6a 94       	dec	r6
     304:	e9 f7       	brne	.-6      	; 0x300 <__udivdi3+0x1a>
     306:	29 83       	std	Y+1, r18	; 0x01
     308:	3a 83       	std	Y+2, r19	; 0x02
     30a:	4b 83       	std	Y+3, r20	; 0x03
     30c:	5c 83       	std	Y+4, r21	; 0x04
     30e:	6d 83       	std	Y+5, r22	; 0x05
     310:	7e 83       	std	Y+6, r23	; 0x06
     312:	8f 83       	std	Y+7, r24	; 0x07
     314:	98 87       	std	Y+8, r25	; 0x08
     316:	ce 01       	movw	r24, r28
     318:	09 96       	adiw	r24, 0x09	; 9
     31a:	fc 01       	movw	r30, r24
     31c:	11 92       	st	Z+, r1
     31e:	aa 95       	dec	r26
     320:	e9 f7       	brne	.-6      	; 0x31c <__udivdi3+0x36>
     322:	a9 86       	std	Y+9, r10	; 0x09
     324:	ba 86       	std	Y+10, r11	; 0x0a
     326:	cb 86       	std	Y+11, r12	; 0x0b
     328:	dc 86       	std	Y+12, r13	; 0x0c
     32a:	ed 86       	std	Y+13, r14	; 0x0d
     32c:	fe 86       	std	Y+14, r15	; 0x0e
     32e:	0f 87       	std	Y+15, r16	; 0x0f
     330:	18 8b       	std	Y+16, r17	; 0x10
     332:	29 84       	ldd	r2, Y+9	; 0x09
     334:	3a 84       	ldd	r3, Y+10	; 0x0a
     336:	4b 84       	ldd	r4, Y+11	; 0x0b
     338:	5c 84       	ldd	r5, Y+12	; 0x0c
     33a:	ed 84       	ldd	r14, Y+13	; 0x0d
     33c:	fe 84       	ldd	r15, Y+14	; 0x0e
     33e:	0f 85       	ldd	r16, Y+15	; 0x0f
     340:	18 89       	ldd	r17, Y+16	; 0x10
     342:	69 80       	ldd	r6, Y+1	; 0x01
     344:	7a 80       	ldd	r7, Y+2	; 0x02
     346:	8b 80       	ldd	r8, Y+3	; 0x03
     348:	9c 80       	ldd	r9, Y+4	; 0x04
     34a:	6d a6       	std	Y+45, r6	; 0x2d
     34c:	7e a6       	std	Y+46, r7	; 0x2e
     34e:	8f a6       	std	Y+47, r8	; 0x2f
     350:	98 aa       	std	Y+48, r9	; 0x30
     352:	6d 80       	ldd	r6, Y+5	; 0x05
     354:	7e 80       	ldd	r7, Y+6	; 0x06
     356:	8f 80       	ldd	r8, Y+7	; 0x07
     358:	98 84       	ldd	r9, Y+8	; 0x08
     35a:	e1 14       	cp	r14, r1
     35c:	f1 04       	cpc	r15, r1
     35e:	01 05       	cpc	r16, r1
     360:	11 05       	cpc	r17, r1
     362:	09 f0       	breq	.+2      	; 0x366 <__udivdi3+0x80>
     364:	b3 c3       	rjmp	.+1894   	; 0xacc <__stack+0x26d>
     366:	62 14       	cp	r6, r2
     368:	73 04       	cpc	r7, r3
     36a:	84 04       	cpc	r8, r4
     36c:	95 04       	cpc	r9, r5
     36e:	08 f0       	brcs	.+2      	; 0x372 <__udivdi3+0x8c>
     370:	3d c1       	rjmp	.+634    	; 0x5ec <__udivdi3+0x306>
     372:	00 e0       	ldi	r16, 0x00	; 0
     374:	20 16       	cp	r2, r16
     376:	00 e0       	ldi	r16, 0x00	; 0
     378:	30 06       	cpc	r3, r16
     37a:	01 e0       	ldi	r16, 0x01	; 1
     37c:	40 06       	cpc	r4, r16
     37e:	00 e0       	ldi	r16, 0x00	; 0
     380:	50 06       	cpc	r5, r16
     382:	88 f4       	brcc	.+34     	; 0x3a6 <__udivdi3+0xc0>
     384:	1f ef       	ldi	r17, 0xFF	; 255
     386:	21 16       	cp	r2, r17
     388:	31 04       	cpc	r3, r1
     38a:	41 04       	cpc	r4, r1
     38c:	51 04       	cpc	r5, r1
     38e:	39 f0       	breq	.+14     	; 0x39e <__udivdi3+0xb8>
     390:	30 f0       	brcs	.+12     	; 0x39e <__udivdi3+0xb8>
     392:	48 e0       	ldi	r20, 0x08	; 8
     394:	e4 2e       	mov	r14, r20
     396:	f1 2c       	mov	r15, r1
     398:	01 2d       	mov	r16, r1
     39a:	11 2d       	mov	r17, r1
     39c:	18 c0       	rjmp	.+48     	; 0x3ce <__udivdi3+0xe8>
     39e:	ee 24       	eor	r14, r14
     3a0:	ff 24       	eor	r15, r15
     3a2:	87 01       	movw	r16, r14
     3a4:	14 c0       	rjmp	.+40     	; 0x3ce <__udivdi3+0xe8>
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	22 16       	cp	r2, r18
     3aa:	20 e0       	ldi	r18, 0x00	; 0
     3ac:	32 06       	cpc	r3, r18
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	42 06       	cpc	r4, r18
     3b2:	21 e0       	ldi	r18, 0x01	; 1
     3b4:	52 06       	cpc	r5, r18
     3b6:	30 f0       	brcs	.+12     	; 0x3c4 <__udivdi3+0xde>
     3b8:	38 e1       	ldi	r19, 0x18	; 24
     3ba:	e3 2e       	mov	r14, r19
     3bc:	f1 2c       	mov	r15, r1
     3be:	01 2d       	mov	r16, r1
     3c0:	11 2d       	mov	r17, r1
     3c2:	05 c0       	rjmp	.+10     	; 0x3ce <__udivdi3+0xe8>
     3c4:	20 e1       	ldi	r18, 0x10	; 16
     3c6:	e2 2e       	mov	r14, r18
     3c8:	f1 2c       	mov	r15, r1
     3ca:	01 2d       	mov	r16, r1
     3cc:	11 2d       	mov	r17, r1
     3ce:	d2 01       	movw	r26, r4
     3d0:	c1 01       	movw	r24, r2
     3d2:	0e 2c       	mov	r0, r14
     3d4:	04 c0       	rjmp	.+8      	; 0x3de <__udivdi3+0xf8>
     3d6:	b6 95       	lsr	r27
     3d8:	a7 95       	ror	r26
     3da:	97 95       	ror	r25
     3dc:	87 95       	ror	r24
     3de:	0a 94       	dec	r0
     3e0:	d2 f7       	brpl	.-12     	; 0x3d6 <__udivdi3+0xf0>
     3e2:	83 5e       	subi	r24, 0xE3	; 227
     3e4:	9e 4f       	sbci	r25, 0xFE	; 254
     3e6:	dc 01       	movw	r26, r24
     3e8:	2c 91       	ld	r18, X
     3ea:	80 e2       	ldi	r24, 0x20	; 32
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	a0 e0       	ldi	r26, 0x00	; 0
     3f0:	b0 e0       	ldi	r27, 0x00	; 0
     3f2:	8e 19       	sub	r24, r14
     3f4:	9f 09       	sbc	r25, r15
     3f6:	a0 0b       	sbc	r26, r16
     3f8:	b1 0b       	sbc	r27, r17
     3fa:	7c 01       	movw	r14, r24
     3fc:	8d 01       	movw	r16, r26
     3fe:	e2 1a       	sub	r14, r18
     400:	f1 08       	sbc	r15, r1
     402:	01 09       	sbc	r16, r1
     404:	11 09       	sbc	r17, r1
     406:	e1 14       	cp	r14, r1
     408:	f1 04       	cpc	r15, r1
     40a:	01 05       	cpc	r16, r1
     40c:	11 05       	cpc	r17, r1
     40e:	a1 f1       	breq	.+104    	; 0x478 <__udivdi3+0x192>
     410:	0e 2c       	mov	r0, r14
     412:	04 c0       	rjmp	.+8      	; 0x41c <__udivdi3+0x136>
     414:	22 0c       	add	r2, r2
     416:	33 1c       	adc	r3, r3
     418:	44 1c       	adc	r4, r4
     41a:	55 1c       	adc	r5, r5
     41c:	0a 94       	dec	r0
     41e:	d2 f7       	brpl	.-12     	; 0x414 <__udivdi3+0x12e>
     420:	a4 01       	movw	r20, r8
     422:	93 01       	movw	r18, r6
     424:	0e 2c       	mov	r0, r14
     426:	04 c0       	rjmp	.+8      	; 0x430 <__udivdi3+0x14a>
     428:	22 0f       	add	r18, r18
     42a:	33 1f       	adc	r19, r19
     42c:	44 1f       	adc	r20, r20
     42e:	55 1f       	adc	r21, r21
     430:	0a 94       	dec	r0
     432:	d2 f7       	brpl	.-12     	; 0x428 <__udivdi3+0x142>
     434:	80 e2       	ldi	r24, 0x20	; 32
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	8e 19       	sub	r24, r14
     43a:	9f 09       	sbc	r25, r15
     43c:	6d a4       	ldd	r6, Y+45	; 0x2d
     43e:	7e a4       	ldd	r7, Y+46	; 0x2e
     440:	8f a4       	ldd	r8, Y+47	; 0x2f
     442:	98 a8       	ldd	r9, Y+48	; 0x30
     444:	04 c0       	rjmp	.+8      	; 0x44e <__udivdi3+0x168>
     446:	96 94       	lsr	r9
     448:	87 94       	ror	r8
     44a:	77 94       	ror	r7
     44c:	67 94       	ror	r6
     44e:	8a 95       	dec	r24
     450:	d2 f7       	brpl	.-12     	; 0x446 <__udivdi3+0x160>
     452:	62 2a       	or	r6, r18
     454:	73 2a       	or	r7, r19
     456:	84 2a       	or	r8, r20
     458:	95 2a       	or	r9, r21
     45a:	ad a4       	ldd	r10, Y+45	; 0x2d
     45c:	be a4       	ldd	r11, Y+46	; 0x2e
     45e:	cf a4       	ldd	r12, Y+47	; 0x2f
     460:	d8 a8       	ldd	r13, Y+48	; 0x30
     462:	04 c0       	rjmp	.+8      	; 0x46c <__udivdi3+0x186>
     464:	aa 0c       	add	r10, r10
     466:	bb 1c       	adc	r11, r11
     468:	cc 1c       	adc	r12, r12
     46a:	dd 1c       	adc	r13, r13
     46c:	ea 94       	dec	r14
     46e:	d2 f7       	brpl	.-12     	; 0x464 <__udivdi3+0x17e>
     470:	ad a6       	std	Y+45, r10	; 0x2d
     472:	be a6       	std	Y+46, r11	; 0x2e
     474:	cf a6       	std	Y+47, r12	; 0x2f
     476:	d8 aa       	std	Y+48, r13	; 0x30
     478:	62 01       	movw	r12, r4
     47a:	ee 24       	eor	r14, r14
     47c:	ff 24       	eor	r15, r15
     47e:	cd aa       	std	Y+53, r12	; 0x35
     480:	de aa       	std	Y+54, r13	; 0x36
     482:	ef aa       	std	Y+55, r14	; 0x37
     484:	f8 ae       	std	Y+56, r15	; 0x38
     486:	92 01       	movw	r18, r4
     488:	81 01       	movw	r16, r2
     48a:	20 70       	andi	r18, 0x00	; 0
     48c:	30 70       	andi	r19, 0x00	; 0
     48e:	09 af       	std	Y+57, r16	; 0x39
     490:	1a af       	std	Y+58, r17	; 0x3a
     492:	2b af       	std	Y+59, r18	; 0x3b
     494:	3c af       	std	Y+60, r19	; 0x3c
     496:	c4 01       	movw	r24, r8
     498:	b3 01       	movw	r22, r6
     49a:	a7 01       	movw	r20, r14
     49c:	96 01       	movw	r18, r12
     49e:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     4a2:	7b 01       	movw	r14, r22
     4a4:	8c 01       	movw	r16, r24
     4a6:	c4 01       	movw	r24, r8
     4a8:	b3 01       	movw	r22, r6
     4aa:	2d a9       	ldd	r18, Y+53	; 0x35
     4ac:	3e a9       	ldd	r19, Y+54	; 0x36
     4ae:	4f a9       	ldd	r20, Y+55	; 0x37
     4b0:	58 ad       	ldd	r21, Y+56	; 0x38
     4b2:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     4b6:	c9 01       	movw	r24, r18
     4b8:	da 01       	movw	r26, r20
     4ba:	3c 01       	movw	r6, r24
     4bc:	4d 01       	movw	r8, r26
     4be:	c4 01       	movw	r24, r8
     4c0:	b3 01       	movw	r22, r6
     4c2:	29 ad       	ldd	r18, Y+57	; 0x39
     4c4:	3a ad       	ldd	r19, Y+58	; 0x3a
     4c6:	4b ad       	ldd	r20, Y+59	; 0x3b
     4c8:	5c ad       	ldd	r21, Y+60	; 0x3c
     4ca:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     4ce:	9b 01       	movw	r18, r22
     4d0:	ac 01       	movw	r20, r24
     4d2:	87 01       	movw	r16, r14
     4d4:	ff 24       	eor	r15, r15
     4d6:	ee 24       	eor	r14, r14
     4d8:	ad a4       	ldd	r10, Y+45	; 0x2d
     4da:	be a4       	ldd	r11, Y+46	; 0x2e
     4dc:	cf a4       	ldd	r12, Y+47	; 0x2f
     4de:	d8 a8       	ldd	r13, Y+48	; 0x30
     4e0:	c6 01       	movw	r24, r12
     4e2:	aa 27       	eor	r26, r26
     4e4:	bb 27       	eor	r27, r27
     4e6:	57 01       	movw	r10, r14
     4e8:	68 01       	movw	r12, r16
     4ea:	a8 2a       	or	r10, r24
     4ec:	b9 2a       	or	r11, r25
     4ee:	ca 2a       	or	r12, r26
     4f0:	db 2a       	or	r13, r27
     4f2:	a2 16       	cp	r10, r18
     4f4:	b3 06       	cpc	r11, r19
     4f6:	c4 06       	cpc	r12, r20
     4f8:	d5 06       	cpc	r13, r21
     4fa:	e0 f4       	brcc	.+56     	; 0x534 <__udivdi3+0x24e>
     4fc:	08 94       	sec
     4fe:	61 08       	sbc	r6, r1
     500:	71 08       	sbc	r7, r1
     502:	81 08       	sbc	r8, r1
     504:	91 08       	sbc	r9, r1
     506:	a2 0c       	add	r10, r2
     508:	b3 1c       	adc	r11, r3
     50a:	c4 1c       	adc	r12, r4
     50c:	d5 1c       	adc	r13, r5
     50e:	a2 14       	cp	r10, r2
     510:	b3 04       	cpc	r11, r3
     512:	c4 04       	cpc	r12, r4
     514:	d5 04       	cpc	r13, r5
     516:	70 f0       	brcs	.+28     	; 0x534 <__udivdi3+0x24e>
     518:	a2 16       	cp	r10, r18
     51a:	b3 06       	cpc	r11, r19
     51c:	c4 06       	cpc	r12, r20
     51e:	d5 06       	cpc	r13, r21
     520:	48 f4       	brcc	.+18     	; 0x534 <__udivdi3+0x24e>
     522:	08 94       	sec
     524:	61 08       	sbc	r6, r1
     526:	71 08       	sbc	r7, r1
     528:	81 08       	sbc	r8, r1
     52a:	91 08       	sbc	r9, r1
     52c:	a2 0c       	add	r10, r2
     52e:	b3 1c       	adc	r11, r3
     530:	c4 1c       	adc	r12, r4
     532:	d5 1c       	adc	r13, r5
     534:	a2 1a       	sub	r10, r18
     536:	b3 0a       	sbc	r11, r19
     538:	c4 0a       	sbc	r12, r20
     53a:	d5 0a       	sbc	r13, r21
     53c:	c6 01       	movw	r24, r12
     53e:	b5 01       	movw	r22, r10
     540:	2d a9       	ldd	r18, Y+53	; 0x35
     542:	3e a9       	ldd	r19, Y+54	; 0x36
     544:	4f a9       	ldd	r20, Y+55	; 0x37
     546:	58 ad       	ldd	r21, Y+56	; 0x38
     548:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     54c:	7b 01       	movw	r14, r22
     54e:	8c 01       	movw	r16, r24
     550:	c6 01       	movw	r24, r12
     552:	b5 01       	movw	r22, r10
     554:	2d a9       	ldd	r18, Y+53	; 0x35
     556:	3e a9       	ldd	r19, Y+54	; 0x36
     558:	4f a9       	ldd	r20, Y+55	; 0x37
     55a:	58 ad       	ldd	r21, Y+56	; 0x38
     55c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     560:	c9 01       	movw	r24, r18
     562:	da 01       	movw	r26, r20
     564:	5c 01       	movw	r10, r24
     566:	6d 01       	movw	r12, r26
     568:	c6 01       	movw	r24, r12
     56a:	b5 01       	movw	r22, r10
     56c:	29 ad       	ldd	r18, Y+57	; 0x39
     56e:	3a ad       	ldd	r19, Y+58	; 0x3a
     570:	4b ad       	ldd	r20, Y+59	; 0x3b
     572:	5c ad       	ldd	r21, Y+60	; 0x3c
     574:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     578:	9b 01       	movw	r18, r22
     57a:	ac 01       	movw	r20, r24
     57c:	87 01       	movw	r16, r14
     57e:	ff 24       	eor	r15, r15
     580:	ee 24       	eor	r14, r14
     582:	8d a5       	ldd	r24, Y+45	; 0x2d
     584:	9e a5       	ldd	r25, Y+46	; 0x2e
     586:	af a5       	ldd	r26, Y+47	; 0x2f
     588:	b8 a9       	ldd	r27, Y+48	; 0x30
     58a:	a0 70       	andi	r26, 0x00	; 0
     58c:	b0 70       	andi	r27, 0x00	; 0
     58e:	e8 2a       	or	r14, r24
     590:	f9 2a       	or	r15, r25
     592:	0a 2b       	or	r16, r26
     594:	1b 2b       	or	r17, r27
     596:	e2 16       	cp	r14, r18
     598:	f3 06       	cpc	r15, r19
     59a:	04 07       	cpc	r16, r20
     59c:	15 07       	cpc	r17, r21
     59e:	c0 f4       	brcc	.+48     	; 0x5d0 <__udivdi3+0x2ea>
     5a0:	08 94       	sec
     5a2:	a1 08       	sbc	r10, r1
     5a4:	b1 08       	sbc	r11, r1
     5a6:	c1 08       	sbc	r12, r1
     5a8:	d1 08       	sbc	r13, r1
     5aa:	e2 0c       	add	r14, r2
     5ac:	f3 1c       	adc	r15, r3
     5ae:	04 1d       	adc	r16, r4
     5b0:	15 1d       	adc	r17, r5
     5b2:	e2 14       	cp	r14, r2
     5b4:	f3 04       	cpc	r15, r3
     5b6:	04 05       	cpc	r16, r4
     5b8:	15 05       	cpc	r17, r5
     5ba:	50 f0       	brcs	.+20     	; 0x5d0 <__udivdi3+0x2ea>
     5bc:	e2 16       	cp	r14, r18
     5be:	f3 06       	cpc	r15, r19
     5c0:	04 07       	cpc	r16, r20
     5c2:	15 07       	cpc	r17, r21
     5c4:	28 f4       	brcc	.+10     	; 0x5d0 <__udivdi3+0x2ea>
     5c6:	08 94       	sec
     5c8:	a1 08       	sbc	r10, r1
     5ca:	b1 08       	sbc	r11, r1
     5cc:	c1 08       	sbc	r12, r1
     5ce:	d1 08       	sbc	r13, r1
     5d0:	d3 01       	movw	r26, r6
     5d2:	99 27       	eor	r25, r25
     5d4:	88 27       	eor	r24, r24
     5d6:	86 01       	movw	r16, r12
     5d8:	75 01       	movw	r14, r10
     5da:	e8 2a       	or	r14, r24
     5dc:	f9 2a       	or	r15, r25
     5de:	0a 2b       	or	r16, r26
     5e0:	1b 2b       	or	r17, r27
     5e2:	e9 aa       	std	Y+49, r14	; 0x31
     5e4:	fa aa       	std	Y+50, r15	; 0x32
     5e6:	0b ab       	std	Y+51, r16	; 0x33
     5e8:	1c ab       	std	Y+52, r17	; 0x34
     5ea:	cf c4       	rjmp	.+2462   	; 0xf8a <__stack+0x72b>
     5ec:	21 14       	cp	r2, r1
     5ee:	31 04       	cpc	r3, r1
     5f0:	41 04       	cpc	r4, r1
     5f2:	51 04       	cpc	r5, r1
     5f4:	71 f4       	brne	.+28     	; 0x612 <__udivdi3+0x32c>
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	20 e0       	ldi	r18, 0x00	; 0
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	40 e0       	ldi	r20, 0x00	; 0
     604:	50 e0       	ldi	r21, 0x00	; 0
     606:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     60a:	c9 01       	movw	r24, r18
     60c:	da 01       	movw	r26, r20
     60e:	1c 01       	movw	r2, r24
     610:	2d 01       	movw	r4, r26
     612:	00 e0       	ldi	r16, 0x00	; 0
     614:	20 16       	cp	r2, r16
     616:	00 e0       	ldi	r16, 0x00	; 0
     618:	30 06       	cpc	r3, r16
     61a:	01 e0       	ldi	r16, 0x01	; 1
     61c:	40 06       	cpc	r4, r16
     61e:	00 e0       	ldi	r16, 0x00	; 0
     620:	50 06       	cpc	r5, r16
     622:	88 f4       	brcc	.+34     	; 0x646 <__udivdi3+0x360>
     624:	1f ef       	ldi	r17, 0xFF	; 255
     626:	21 16       	cp	r2, r17
     628:	31 04       	cpc	r3, r1
     62a:	41 04       	cpc	r4, r1
     62c:	51 04       	cpc	r5, r1
     62e:	31 f0       	breq	.+12     	; 0x63c <__udivdi3+0x356>
     630:	28 f0       	brcs	.+10     	; 0x63c <__udivdi3+0x356>
     632:	48 e0       	ldi	r20, 0x08	; 8
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	17 c0       	rjmp	.+46     	; 0x66a <__udivdi3+0x384>
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	50 e0       	ldi	r21, 0x00	; 0
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	70 e0       	ldi	r23, 0x00	; 0
     644:	12 c0       	rjmp	.+36     	; 0x66a <__udivdi3+0x384>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	22 16       	cp	r2, r18
     64a:	20 e0       	ldi	r18, 0x00	; 0
     64c:	32 06       	cpc	r3, r18
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	42 06       	cpc	r4, r18
     652:	21 e0       	ldi	r18, 0x01	; 1
     654:	52 06       	cpc	r5, r18
     656:	28 f0       	brcs	.+10     	; 0x662 <__udivdi3+0x37c>
     658:	48 e1       	ldi	r20, 0x18	; 24
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	04 c0       	rjmp	.+8      	; 0x66a <__udivdi3+0x384>
     662:	40 e1       	ldi	r20, 0x10	; 16
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	60 e0       	ldi	r22, 0x00	; 0
     668:	70 e0       	ldi	r23, 0x00	; 0
     66a:	d2 01       	movw	r26, r4
     66c:	c1 01       	movw	r24, r2
     66e:	04 2e       	mov	r0, r20
     670:	04 c0       	rjmp	.+8      	; 0x67a <__udivdi3+0x394>
     672:	b6 95       	lsr	r27
     674:	a7 95       	ror	r26
     676:	97 95       	ror	r25
     678:	87 95       	ror	r24
     67a:	0a 94       	dec	r0
     67c:	d2 f7       	brpl	.-12     	; 0x672 <__udivdi3+0x38c>
     67e:	83 5e       	subi	r24, 0xE3	; 227
     680:	9e 4f       	sbci	r25, 0xFE	; 254
     682:	dc 01       	movw	r26, r24
     684:	2c 91       	ld	r18, X
     686:	e0 e2       	ldi	r30, 0x20	; 32
     688:	ee 2e       	mov	r14, r30
     68a:	f1 2c       	mov	r15, r1
     68c:	01 2d       	mov	r16, r1
     68e:	11 2d       	mov	r17, r1
     690:	d8 01       	movw	r26, r16
     692:	c7 01       	movw	r24, r14
     694:	84 1b       	sub	r24, r20
     696:	95 0b       	sbc	r25, r21
     698:	a6 0b       	sbc	r26, r22
     69a:	b7 0b       	sbc	r27, r23
     69c:	82 1b       	sub	r24, r18
     69e:	91 09       	sbc	r25, r1
     6a0:	a1 09       	sbc	r26, r1
     6a2:	b1 09       	sbc	r27, r1
     6a4:	00 97       	sbiw	r24, 0x00	; 0
     6a6:	a1 05       	cpc	r26, r1
     6a8:	b1 05       	cpc	r27, r1
     6aa:	61 f4       	brne	.+24     	; 0x6c4 <__udivdi3+0x3de>
     6ac:	64 01       	movw	r12, r8
     6ae:	53 01       	movw	r10, r6
     6b0:	a2 18       	sub	r10, r2
     6b2:	b3 08       	sbc	r11, r3
     6b4:	c4 08       	sbc	r12, r4
     6b6:	d5 08       	sbc	r13, r5
     6b8:	31 e0       	ldi	r19, 0x01	; 1
     6ba:	63 2e       	mov	r6, r19
     6bc:	71 2c       	mov	r7, r1
     6be:	81 2c       	mov	r8, r1
     6c0:	91 2c       	mov	r9, r1
     6c2:	1e c1       	rjmp	.+572    	; 0x900 <__stack+0xa1>
     6c4:	6f 96       	adiw	r28, 0x1f	; 31
     6c6:	8f af       	std	Y+63, r24	; 0x3f
     6c8:	6f 97       	sbiw	r28, 0x1f	; 31
     6ca:	08 2e       	mov	r0, r24
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <__udivdi3+0x3f0>
     6ce:	22 0c       	add	r2, r2
     6d0:	33 1c       	adc	r3, r3
     6d2:	44 1c       	adc	r4, r4
     6d4:	55 1c       	adc	r5, r5
     6d6:	0a 94       	dec	r0
     6d8:	d2 f7       	brpl	.-12     	; 0x6ce <__udivdi3+0x3e8>
     6da:	ee 2d       	mov	r30, r14
     6dc:	e8 1b       	sub	r30, r24
     6de:	64 01       	movw	r12, r8
     6e0:	53 01       	movw	r10, r6
     6e2:	0e 2e       	mov	r0, r30
     6e4:	04 c0       	rjmp	.+8      	; 0x6ee <__udivdi3+0x408>
     6e6:	d6 94       	lsr	r13
     6e8:	c7 94       	ror	r12
     6ea:	b7 94       	ror	r11
     6ec:	a7 94       	ror	r10
     6ee:	0a 94       	dec	r0
     6f0:	d2 f7       	brpl	.-12     	; 0x6e6 <__udivdi3+0x400>
     6f2:	a4 01       	movw	r20, r8
     6f4:	93 01       	movw	r18, r6
     6f6:	6f 96       	adiw	r28, 0x1f	; 31
     6f8:	0f ac       	ldd	r0, Y+63	; 0x3f
     6fa:	6f 97       	sbiw	r28, 0x1f	; 31
     6fc:	04 c0       	rjmp	.+8      	; 0x706 <__udivdi3+0x420>
     6fe:	22 0f       	add	r18, r18
     700:	33 1f       	adc	r19, r19
     702:	44 1f       	adc	r20, r20
     704:	55 1f       	adc	r21, r21
     706:	0a 94       	dec	r0
     708:	d2 f7       	brpl	.-12     	; 0x6fe <__udivdi3+0x418>
     70a:	6d a4       	ldd	r6, Y+45	; 0x2d
     70c:	7e a4       	ldd	r7, Y+46	; 0x2e
     70e:	8f a4       	ldd	r8, Y+47	; 0x2f
     710:	98 a8       	ldd	r9, Y+48	; 0x30
     712:	0e 2e       	mov	r0, r30
     714:	04 c0       	rjmp	.+8      	; 0x71e <__udivdi3+0x438>
     716:	96 94       	lsr	r9
     718:	87 94       	ror	r8
     71a:	77 94       	ror	r7
     71c:	67 94       	ror	r6
     71e:	0a 94       	dec	r0
     720:	d2 f7       	brpl	.-12     	; 0x716 <__udivdi3+0x430>
     722:	84 01       	movw	r16, r8
     724:	73 01       	movw	r14, r6
     726:	e2 2a       	or	r14, r18
     728:	f3 2a       	or	r15, r19
     72a:	04 2b       	or	r16, r20
     72c:	15 2b       	or	r17, r21
     72e:	e9 a6       	std	Y+41, r14	; 0x29
     730:	fa a6       	std	Y+42, r15	; 0x2a
     732:	0b a7       	std	Y+43, r16	; 0x2b
     734:	1c a7       	std	Y+44, r17	; 0x2c
     736:	32 01       	movw	r6, r4
     738:	88 24       	eor	r8, r8
     73a:	99 24       	eor	r9, r9
     73c:	92 01       	movw	r18, r4
     73e:	81 01       	movw	r16, r2
     740:	20 70       	andi	r18, 0x00	; 0
     742:	30 70       	andi	r19, 0x00	; 0
     744:	21 96       	adiw	r28, 0x01	; 1
     746:	0c af       	std	Y+60, r16	; 0x3c
     748:	1d af       	std	Y+61, r17	; 0x3d
     74a:	2e af       	std	Y+62, r18	; 0x3e
     74c:	3f af       	std	Y+63, r19	; 0x3f
     74e:	21 97       	sbiw	r28, 0x01	; 1
     750:	c6 01       	movw	r24, r12
     752:	b5 01       	movw	r22, r10
     754:	a4 01       	movw	r20, r8
     756:	93 01       	movw	r18, r6
     758:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     75c:	7b 01       	movw	r14, r22
     75e:	8c 01       	movw	r16, r24
     760:	c6 01       	movw	r24, r12
     762:	b5 01       	movw	r22, r10
     764:	a4 01       	movw	r20, r8
     766:	93 01       	movw	r18, r6
     768:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     76c:	c9 01       	movw	r24, r18
     76e:	da 01       	movw	r26, r20
     770:	25 96       	adiw	r28, 0x05	; 5
     772:	8c af       	std	Y+60, r24	; 0x3c
     774:	9d af       	std	Y+61, r25	; 0x3d
     776:	ae af       	std	Y+62, r26	; 0x3e
     778:	bf af       	std	Y+63, r27	; 0x3f
     77a:	25 97       	sbiw	r28, 0x05	; 5
     77c:	bc 01       	movw	r22, r24
     77e:	cd 01       	movw	r24, r26
     780:	21 96       	adiw	r28, 0x01	; 1
     782:	2c ad       	ldd	r18, Y+60	; 0x3c
     784:	3d ad       	ldd	r19, Y+61	; 0x3d
     786:	4e ad       	ldd	r20, Y+62	; 0x3e
     788:	5f ad       	ldd	r21, Y+63	; 0x3f
     78a:	21 97       	sbiw	r28, 0x01	; 1
     78c:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     790:	9b 01       	movw	r18, r22
     792:	ac 01       	movw	r20, r24
     794:	87 01       	movw	r16, r14
     796:	ff 24       	eor	r15, r15
     798:	ee 24       	eor	r14, r14
     79a:	a9 a4       	ldd	r10, Y+41	; 0x29
     79c:	ba a4       	ldd	r11, Y+42	; 0x2a
     79e:	cb a4       	ldd	r12, Y+43	; 0x2b
     7a0:	dc a4       	ldd	r13, Y+44	; 0x2c
     7a2:	c6 01       	movw	r24, r12
     7a4:	aa 27       	eor	r26, r26
     7a6:	bb 27       	eor	r27, r27
     7a8:	5c 01       	movw	r10, r24
     7aa:	6d 01       	movw	r12, r26
     7ac:	ae 28       	or	r10, r14
     7ae:	bf 28       	or	r11, r15
     7b0:	c0 2a       	or	r12, r16
     7b2:	d1 2a       	or	r13, r17
     7b4:	a2 16       	cp	r10, r18
     7b6:	b3 06       	cpc	r11, r19
     7b8:	c4 06       	cpc	r12, r20
     7ba:	d5 06       	cpc	r13, r21
     7bc:	60 f5       	brcc	.+88     	; 0x816 <__udivdi3+0x530>
     7be:	25 96       	adiw	r28, 0x05	; 5
     7c0:	6c ad       	ldd	r22, Y+60	; 0x3c
     7c2:	7d ad       	ldd	r23, Y+61	; 0x3d
     7c4:	8e ad       	ldd	r24, Y+62	; 0x3e
     7c6:	9f ad       	ldd	r25, Y+63	; 0x3f
     7c8:	25 97       	sbiw	r28, 0x05	; 5
     7ca:	61 50       	subi	r22, 0x01	; 1
     7cc:	70 40       	sbci	r23, 0x00	; 0
     7ce:	80 40       	sbci	r24, 0x00	; 0
     7d0:	90 40       	sbci	r25, 0x00	; 0
     7d2:	25 96       	adiw	r28, 0x05	; 5
     7d4:	6c af       	std	Y+60, r22	; 0x3c
     7d6:	7d af       	std	Y+61, r23	; 0x3d
     7d8:	8e af       	std	Y+62, r24	; 0x3e
     7da:	9f af       	std	Y+63, r25	; 0x3f
     7dc:	25 97       	sbiw	r28, 0x05	; 5
     7de:	a2 0c       	add	r10, r2
     7e0:	b3 1c       	adc	r11, r3
     7e2:	c4 1c       	adc	r12, r4
     7e4:	d5 1c       	adc	r13, r5
     7e6:	a2 14       	cp	r10, r2
     7e8:	b3 04       	cpc	r11, r3
     7ea:	c4 04       	cpc	r12, r4
     7ec:	d5 04       	cpc	r13, r5
     7ee:	98 f0       	brcs	.+38     	; 0x816 <__udivdi3+0x530>
     7f0:	a2 16       	cp	r10, r18
     7f2:	b3 06       	cpc	r11, r19
     7f4:	c4 06       	cpc	r12, r20
     7f6:	d5 06       	cpc	r13, r21
     7f8:	70 f4       	brcc	.+28     	; 0x816 <__udivdi3+0x530>
     7fa:	61 50       	subi	r22, 0x01	; 1
     7fc:	70 40       	sbci	r23, 0x00	; 0
     7fe:	80 40       	sbci	r24, 0x00	; 0
     800:	90 40       	sbci	r25, 0x00	; 0
     802:	25 96       	adiw	r28, 0x05	; 5
     804:	6c af       	std	Y+60, r22	; 0x3c
     806:	7d af       	std	Y+61, r23	; 0x3d
     808:	8e af       	std	Y+62, r24	; 0x3e
     80a:	9f af       	std	Y+63, r25	; 0x3f
     80c:	25 97       	sbiw	r28, 0x05	; 5
     80e:	a2 0c       	add	r10, r2
     810:	b3 1c       	adc	r11, r3
     812:	c4 1c       	adc	r12, r4
     814:	d5 1c       	adc	r13, r5
     816:	a2 1a       	sub	r10, r18
     818:	b3 0a       	sbc	r11, r19
     81a:	c4 0a       	sbc	r12, r20
     81c:	d5 0a       	sbc	r13, r21
     81e:	c6 01       	movw	r24, r12
     820:	b5 01       	movw	r22, r10
     822:	a4 01       	movw	r20, r8
     824:	93 01       	movw	r18, r6
     826:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     82a:	7b 01       	movw	r14, r22
     82c:	8c 01       	movw	r16, r24
     82e:	c6 01       	movw	r24, r12
     830:	b5 01       	movw	r22, r10
     832:	a4 01       	movw	r20, r8
     834:	93 01       	movw	r18, r6
     836:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     83a:	c9 01       	movw	r24, r18
     83c:	da 01       	movw	r26, r20
     83e:	3c 01       	movw	r6, r24
     840:	4d 01       	movw	r8, r26
     842:	c4 01       	movw	r24, r8
     844:	b3 01       	movw	r22, r6
     846:	21 96       	adiw	r28, 0x01	; 1
     848:	2c ad       	ldd	r18, Y+60	; 0x3c
     84a:	3d ad       	ldd	r19, Y+61	; 0x3d
     84c:	4e ad       	ldd	r20, Y+62	; 0x3e
     84e:	5f ad       	ldd	r21, Y+63	; 0x3f
     850:	21 97       	sbiw	r28, 0x01	; 1
     852:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     856:	9b 01       	movw	r18, r22
     858:	ac 01       	movw	r20, r24
     85a:	87 01       	movw	r16, r14
     85c:	ff 24       	eor	r15, r15
     85e:	ee 24       	eor	r14, r14
     860:	89 a5       	ldd	r24, Y+41	; 0x29
     862:	9a a5       	ldd	r25, Y+42	; 0x2a
     864:	ab a5       	ldd	r26, Y+43	; 0x2b
     866:	bc a5       	ldd	r27, Y+44	; 0x2c
     868:	a0 70       	andi	r26, 0x00	; 0
     86a:	b0 70       	andi	r27, 0x00	; 0
     86c:	57 01       	movw	r10, r14
     86e:	68 01       	movw	r12, r16
     870:	a8 2a       	or	r10, r24
     872:	b9 2a       	or	r11, r25
     874:	ca 2a       	or	r12, r26
     876:	db 2a       	or	r13, r27
     878:	a2 16       	cp	r10, r18
     87a:	b3 06       	cpc	r11, r19
     87c:	c4 06       	cpc	r12, r20
     87e:	d5 06       	cpc	r13, r21
     880:	e0 f4       	brcc	.+56     	; 0x8ba <__stack+0x5b>
     882:	08 94       	sec
     884:	61 08       	sbc	r6, r1
     886:	71 08       	sbc	r7, r1
     888:	81 08       	sbc	r8, r1
     88a:	91 08       	sbc	r9, r1
     88c:	a2 0c       	add	r10, r2
     88e:	b3 1c       	adc	r11, r3
     890:	c4 1c       	adc	r12, r4
     892:	d5 1c       	adc	r13, r5
     894:	a2 14       	cp	r10, r2
     896:	b3 04       	cpc	r11, r3
     898:	c4 04       	cpc	r12, r4
     89a:	d5 04       	cpc	r13, r5
     89c:	70 f0       	brcs	.+28     	; 0x8ba <__stack+0x5b>
     89e:	a2 16       	cp	r10, r18
     8a0:	b3 06       	cpc	r11, r19
     8a2:	c4 06       	cpc	r12, r20
     8a4:	d5 06       	cpc	r13, r21
     8a6:	48 f4       	brcc	.+18     	; 0x8ba <__stack+0x5b>
     8a8:	08 94       	sec
     8aa:	61 08       	sbc	r6, r1
     8ac:	71 08       	sbc	r7, r1
     8ae:	81 08       	sbc	r8, r1
     8b0:	91 08       	sbc	r9, r1
     8b2:	a2 0c       	add	r10, r2
     8b4:	b3 1c       	adc	r11, r3
     8b6:	c4 1c       	adc	r12, r4
     8b8:	d5 1c       	adc	r13, r5
     8ba:	8d a5       	ldd	r24, Y+45	; 0x2d
     8bc:	9e a5       	ldd	r25, Y+46	; 0x2e
     8be:	af a5       	ldd	r26, Y+47	; 0x2f
     8c0:	b8 a9       	ldd	r27, Y+48	; 0x30
     8c2:	6f 96       	adiw	r28, 0x1f	; 31
     8c4:	0f ac       	ldd	r0, Y+63	; 0x3f
     8c6:	6f 97       	sbiw	r28, 0x1f	; 31
     8c8:	04 c0       	rjmp	.+8      	; 0x8d2 <__stack+0x73>
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	aa 1f       	adc	r26, r26
     8d0:	bb 1f       	adc	r27, r27
     8d2:	0a 94       	dec	r0
     8d4:	d2 f7       	brpl	.-12     	; 0x8ca <__stack+0x6b>
     8d6:	8d a7       	std	Y+45, r24	; 0x2d
     8d8:	9e a7       	std	Y+46, r25	; 0x2e
     8da:	af a7       	std	Y+47, r26	; 0x2f
     8dc:	b8 ab       	std	Y+48, r27	; 0x30
     8de:	a2 1a       	sub	r10, r18
     8e0:	b3 0a       	sbc	r11, r19
     8e2:	c4 0a       	sbc	r12, r20
     8e4:	d5 0a       	sbc	r13, r21
     8e6:	25 96       	adiw	r28, 0x05	; 5
     8e8:	ec ac       	ldd	r14, Y+60	; 0x3c
     8ea:	fd ac       	ldd	r15, Y+61	; 0x3d
     8ec:	0e ad       	ldd	r16, Y+62	; 0x3e
     8ee:	1f ad       	ldd	r17, Y+63	; 0x3f
     8f0:	25 97       	sbiw	r28, 0x05	; 5
     8f2:	d7 01       	movw	r26, r14
     8f4:	99 27       	eor	r25, r25
     8f6:	88 27       	eor	r24, r24
     8f8:	68 2a       	or	r6, r24
     8fa:	79 2a       	or	r7, r25
     8fc:	8a 2a       	or	r8, r26
     8fe:	9b 2a       	or	r9, r27
     900:	82 01       	movw	r16, r4
     902:	22 27       	eor	r18, r18
     904:	33 27       	eor	r19, r19
     906:	29 96       	adiw	r28, 0x09	; 9
     908:	0c af       	std	Y+60, r16	; 0x3c
     90a:	1d af       	std	Y+61, r17	; 0x3d
     90c:	2e af       	std	Y+62, r18	; 0x3e
     90e:	3f af       	std	Y+63, r19	; 0x3f
     910:	29 97       	sbiw	r28, 0x09	; 9
     912:	a2 01       	movw	r20, r4
     914:	91 01       	movw	r18, r2
     916:	40 70       	andi	r20, 0x00	; 0
     918:	50 70       	andi	r21, 0x00	; 0
     91a:	2d 96       	adiw	r28, 0x0d	; 13
     91c:	2c af       	std	Y+60, r18	; 0x3c
     91e:	3d af       	std	Y+61, r19	; 0x3d
     920:	4e af       	std	Y+62, r20	; 0x3e
     922:	5f af       	std	Y+63, r21	; 0x3f
     924:	2d 97       	sbiw	r28, 0x0d	; 13
     926:	c6 01       	movw	r24, r12
     928:	b5 01       	movw	r22, r10
     92a:	29 96       	adiw	r28, 0x09	; 9
     92c:	2c ad       	ldd	r18, Y+60	; 0x3c
     92e:	3d ad       	ldd	r19, Y+61	; 0x3d
     930:	4e ad       	ldd	r20, Y+62	; 0x3e
     932:	5f ad       	ldd	r21, Y+63	; 0x3f
     934:	29 97       	sbiw	r28, 0x09	; 9
     936:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     93a:	7b 01       	movw	r14, r22
     93c:	8c 01       	movw	r16, r24
     93e:	c6 01       	movw	r24, r12
     940:	b5 01       	movw	r22, r10
     942:	29 96       	adiw	r28, 0x09	; 9
     944:	2c ad       	ldd	r18, Y+60	; 0x3c
     946:	3d ad       	ldd	r19, Y+61	; 0x3d
     948:	4e ad       	ldd	r20, Y+62	; 0x3e
     94a:	5f ad       	ldd	r21, Y+63	; 0x3f
     94c:	29 97       	sbiw	r28, 0x09	; 9
     94e:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     952:	c9 01       	movw	r24, r18
     954:	da 01       	movw	r26, r20
     956:	61 96       	adiw	r28, 0x11	; 17
     958:	8c af       	std	Y+60, r24	; 0x3c
     95a:	9d af       	std	Y+61, r25	; 0x3d
     95c:	ae af       	std	Y+62, r26	; 0x3e
     95e:	bf af       	std	Y+63, r27	; 0x3f
     960:	61 97       	sbiw	r28, 0x11	; 17
     962:	bc 01       	movw	r22, r24
     964:	cd 01       	movw	r24, r26
     966:	2d 96       	adiw	r28, 0x0d	; 13
     968:	2c ad       	ldd	r18, Y+60	; 0x3c
     96a:	3d ad       	ldd	r19, Y+61	; 0x3d
     96c:	4e ad       	ldd	r20, Y+62	; 0x3e
     96e:	5f ad       	ldd	r21, Y+63	; 0x3f
     970:	2d 97       	sbiw	r28, 0x0d	; 13
     972:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     976:	9b 01       	movw	r18, r22
     978:	ac 01       	movw	r20, r24
     97a:	87 01       	movw	r16, r14
     97c:	ff 24       	eor	r15, r15
     97e:	ee 24       	eor	r14, r14
     980:	ad a4       	ldd	r10, Y+45	; 0x2d
     982:	be a4       	ldd	r11, Y+46	; 0x2e
     984:	cf a4       	ldd	r12, Y+47	; 0x2f
     986:	d8 a8       	ldd	r13, Y+48	; 0x30
     988:	c6 01       	movw	r24, r12
     98a:	aa 27       	eor	r26, r26
     98c:	bb 27       	eor	r27, r27
     98e:	57 01       	movw	r10, r14
     990:	68 01       	movw	r12, r16
     992:	a8 2a       	or	r10, r24
     994:	b9 2a       	or	r11, r25
     996:	ca 2a       	or	r12, r26
     998:	db 2a       	or	r13, r27
     99a:	a2 16       	cp	r10, r18
     99c:	b3 06       	cpc	r11, r19
     99e:	c4 06       	cpc	r12, r20
     9a0:	d5 06       	cpc	r13, r21
     9a2:	60 f5       	brcc	.+88     	; 0x9fc <__stack+0x19d>
     9a4:	61 96       	adiw	r28, 0x11	; 17
     9a6:	6c ad       	ldd	r22, Y+60	; 0x3c
     9a8:	7d ad       	ldd	r23, Y+61	; 0x3d
     9aa:	8e ad       	ldd	r24, Y+62	; 0x3e
     9ac:	9f ad       	ldd	r25, Y+63	; 0x3f
     9ae:	61 97       	sbiw	r28, 0x11	; 17
     9b0:	61 50       	subi	r22, 0x01	; 1
     9b2:	70 40       	sbci	r23, 0x00	; 0
     9b4:	80 40       	sbci	r24, 0x00	; 0
     9b6:	90 40       	sbci	r25, 0x00	; 0
     9b8:	61 96       	adiw	r28, 0x11	; 17
     9ba:	6c af       	std	Y+60, r22	; 0x3c
     9bc:	7d af       	std	Y+61, r23	; 0x3d
     9be:	8e af       	std	Y+62, r24	; 0x3e
     9c0:	9f af       	std	Y+63, r25	; 0x3f
     9c2:	61 97       	sbiw	r28, 0x11	; 17
     9c4:	a2 0c       	add	r10, r2
     9c6:	b3 1c       	adc	r11, r3
     9c8:	c4 1c       	adc	r12, r4
     9ca:	d5 1c       	adc	r13, r5
     9cc:	a2 14       	cp	r10, r2
     9ce:	b3 04       	cpc	r11, r3
     9d0:	c4 04       	cpc	r12, r4
     9d2:	d5 04       	cpc	r13, r5
     9d4:	98 f0       	brcs	.+38     	; 0x9fc <__stack+0x19d>
     9d6:	a2 16       	cp	r10, r18
     9d8:	b3 06       	cpc	r11, r19
     9da:	c4 06       	cpc	r12, r20
     9dc:	d5 06       	cpc	r13, r21
     9de:	70 f4       	brcc	.+28     	; 0x9fc <__stack+0x19d>
     9e0:	61 50       	subi	r22, 0x01	; 1
     9e2:	70 40       	sbci	r23, 0x00	; 0
     9e4:	80 40       	sbci	r24, 0x00	; 0
     9e6:	90 40       	sbci	r25, 0x00	; 0
     9e8:	61 96       	adiw	r28, 0x11	; 17
     9ea:	6c af       	std	Y+60, r22	; 0x3c
     9ec:	7d af       	std	Y+61, r23	; 0x3d
     9ee:	8e af       	std	Y+62, r24	; 0x3e
     9f0:	9f af       	std	Y+63, r25	; 0x3f
     9f2:	61 97       	sbiw	r28, 0x11	; 17
     9f4:	a2 0c       	add	r10, r2
     9f6:	b3 1c       	adc	r11, r3
     9f8:	c4 1c       	adc	r12, r4
     9fa:	d5 1c       	adc	r13, r5
     9fc:	a2 1a       	sub	r10, r18
     9fe:	b3 0a       	sbc	r11, r19
     a00:	c4 0a       	sbc	r12, r20
     a02:	d5 0a       	sbc	r13, r21
     a04:	c6 01       	movw	r24, r12
     a06:	b5 01       	movw	r22, r10
     a08:	29 96       	adiw	r28, 0x09	; 9
     a0a:	2c ad       	ldd	r18, Y+60	; 0x3c
     a0c:	3d ad       	ldd	r19, Y+61	; 0x3d
     a0e:	4e ad       	ldd	r20, Y+62	; 0x3e
     a10:	5f ad       	ldd	r21, Y+63	; 0x3f
     a12:	29 97       	sbiw	r28, 0x09	; 9
     a14:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     a18:	7b 01       	movw	r14, r22
     a1a:	8c 01       	movw	r16, r24
     a1c:	c6 01       	movw	r24, r12
     a1e:	b5 01       	movw	r22, r10
     a20:	29 96       	adiw	r28, 0x09	; 9
     a22:	2c ad       	ldd	r18, Y+60	; 0x3c
     a24:	3d ad       	ldd	r19, Y+61	; 0x3d
     a26:	4e ad       	ldd	r20, Y+62	; 0x3e
     a28:	5f ad       	ldd	r21, Y+63	; 0x3f
     a2a:	29 97       	sbiw	r28, 0x09	; 9
     a2c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     a30:	c9 01       	movw	r24, r18
     a32:	da 01       	movw	r26, r20
     a34:	5c 01       	movw	r10, r24
     a36:	6d 01       	movw	r12, r26
     a38:	c6 01       	movw	r24, r12
     a3a:	b5 01       	movw	r22, r10
     a3c:	2d 96       	adiw	r28, 0x0d	; 13
     a3e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a40:	3d ad       	ldd	r19, Y+61	; 0x3d
     a42:	4e ad       	ldd	r20, Y+62	; 0x3e
     a44:	5f ad       	ldd	r21, Y+63	; 0x3f
     a46:	2d 97       	sbiw	r28, 0x0d	; 13
     a48:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	87 01       	movw	r16, r14
     a52:	ff 24       	eor	r15, r15
     a54:	ee 24       	eor	r14, r14
     a56:	8d a5       	ldd	r24, Y+45	; 0x2d
     a58:	9e a5       	ldd	r25, Y+46	; 0x2e
     a5a:	af a5       	ldd	r26, Y+47	; 0x2f
     a5c:	b8 a9       	ldd	r27, Y+48	; 0x30
     a5e:	a0 70       	andi	r26, 0x00	; 0
     a60:	b0 70       	andi	r27, 0x00	; 0
     a62:	e8 2a       	or	r14, r24
     a64:	f9 2a       	or	r15, r25
     a66:	0a 2b       	or	r16, r26
     a68:	1b 2b       	or	r17, r27
     a6a:	e2 16       	cp	r14, r18
     a6c:	f3 06       	cpc	r15, r19
     a6e:	04 07       	cpc	r16, r20
     a70:	15 07       	cpc	r17, r21
     a72:	c0 f4       	brcc	.+48     	; 0xaa4 <__stack+0x245>
     a74:	08 94       	sec
     a76:	a1 08       	sbc	r10, r1
     a78:	b1 08       	sbc	r11, r1
     a7a:	c1 08       	sbc	r12, r1
     a7c:	d1 08       	sbc	r13, r1
     a7e:	e2 0c       	add	r14, r2
     a80:	f3 1c       	adc	r15, r3
     a82:	04 1d       	adc	r16, r4
     a84:	15 1d       	adc	r17, r5
     a86:	e2 14       	cp	r14, r2
     a88:	f3 04       	cpc	r15, r3
     a8a:	04 05       	cpc	r16, r4
     a8c:	15 05       	cpc	r17, r5
     a8e:	50 f0       	brcs	.+20     	; 0xaa4 <__stack+0x245>
     a90:	e2 16       	cp	r14, r18
     a92:	f3 06       	cpc	r15, r19
     a94:	04 07       	cpc	r16, r20
     a96:	15 07       	cpc	r17, r21
     a98:	28 f4       	brcc	.+10     	; 0xaa4 <__stack+0x245>
     a9a:	08 94       	sec
     a9c:	a1 08       	sbc	r10, r1
     a9e:	b1 08       	sbc	r11, r1
     aa0:	c1 08       	sbc	r12, r1
     aa2:	d1 08       	sbc	r13, r1
     aa4:	61 96       	adiw	r28, 0x11	; 17
     aa6:	ec ac       	ldd	r14, Y+60	; 0x3c
     aa8:	fd ac       	ldd	r15, Y+61	; 0x3d
     aaa:	0e ad       	ldd	r16, Y+62	; 0x3e
     aac:	1f ad       	ldd	r17, Y+63	; 0x3f
     aae:	61 97       	sbiw	r28, 0x11	; 17
     ab0:	d7 01       	movw	r26, r14
     ab2:	99 27       	eor	r25, r25
     ab4:	88 27       	eor	r24, r24
     ab6:	96 01       	movw	r18, r12
     ab8:	85 01       	movw	r16, r10
     aba:	08 2b       	or	r16, r24
     abc:	19 2b       	or	r17, r25
     abe:	2a 2b       	or	r18, r26
     ac0:	3b 2b       	or	r19, r27
     ac2:	09 ab       	std	Y+49, r16	; 0x31
     ac4:	1a ab       	std	Y+50, r17	; 0x32
     ac6:	2b ab       	std	Y+51, r18	; 0x33
     ac8:	3c ab       	std	Y+52, r19	; 0x34
     aca:	62 c2       	rjmp	.+1220   	; 0xf90 <__stack+0x731>
     acc:	6e 14       	cp	r6, r14
     ace:	7f 04       	cpc	r7, r15
     ad0:	80 06       	cpc	r8, r16
     ad2:	91 06       	cpc	r9, r17
     ad4:	08 f4       	brcc	.+2      	; 0xad8 <__stack+0x279>
     ad6:	51 c2       	rjmp	.+1186   	; 0xf7a <__stack+0x71b>
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	e2 16       	cp	r14, r18
     adc:	20 e0       	ldi	r18, 0x00	; 0
     ade:	f2 06       	cpc	r15, r18
     ae0:	21 e0       	ldi	r18, 0x01	; 1
     ae2:	02 07       	cpc	r16, r18
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	12 07       	cpc	r17, r18
     ae8:	88 f4       	brcc	.+34     	; 0xb0c <__stack+0x2ad>
     aea:	3f ef       	ldi	r19, 0xFF	; 255
     aec:	e3 16       	cp	r14, r19
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	31 f0       	breq	.+12     	; 0xb02 <__stack+0x2a3>
     af6:	28 f0       	brcs	.+10     	; 0xb02 <__stack+0x2a3>
     af8:	48 e0       	ldi	r20, 0x08	; 8
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	70 e0       	ldi	r23, 0x00	; 0
     b00:	17 c0       	rjmp	.+46     	; 0xb30 <__stack+0x2d1>
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	12 c0       	rjmp	.+36     	; 0xb30 <__stack+0x2d1>
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	e4 16       	cp	r14, r20
     b10:	40 e0       	ldi	r20, 0x00	; 0
     b12:	f4 06       	cpc	r15, r20
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	04 07       	cpc	r16, r20
     b18:	41 e0       	ldi	r20, 0x01	; 1
     b1a:	14 07       	cpc	r17, r20
     b1c:	28 f0       	brcs	.+10     	; 0xb28 <__stack+0x2c9>
     b1e:	48 e1       	ldi	r20, 0x18	; 24
     b20:	50 e0       	ldi	r21, 0x00	; 0
     b22:	60 e0       	ldi	r22, 0x00	; 0
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	04 c0       	rjmp	.+8      	; 0xb30 <__stack+0x2d1>
     b28:	40 e1       	ldi	r20, 0x10	; 16
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	d8 01       	movw	r26, r16
     b32:	c7 01       	movw	r24, r14
     b34:	04 2e       	mov	r0, r20
     b36:	04 c0       	rjmp	.+8      	; 0xb40 <__stack+0x2e1>
     b38:	b6 95       	lsr	r27
     b3a:	a7 95       	ror	r26
     b3c:	97 95       	ror	r25
     b3e:	87 95       	ror	r24
     b40:	0a 94       	dec	r0
     b42:	d2 f7       	brpl	.-12     	; 0xb38 <__stack+0x2d9>
     b44:	83 5e       	subi	r24, 0xE3	; 227
     b46:	9e 4f       	sbci	r25, 0xFE	; 254
     b48:	dc 01       	movw	r26, r24
     b4a:	2c 91       	ld	r18, X
     b4c:	30 e2       	ldi	r19, 0x20	; 32
     b4e:	a3 2e       	mov	r10, r19
     b50:	b1 2c       	mov	r11, r1
     b52:	c1 2c       	mov	r12, r1
     b54:	d1 2c       	mov	r13, r1
     b56:	d6 01       	movw	r26, r12
     b58:	c5 01       	movw	r24, r10
     b5a:	84 1b       	sub	r24, r20
     b5c:	95 0b       	sbc	r25, r21
     b5e:	a6 0b       	sbc	r26, r22
     b60:	b7 0b       	sbc	r27, r23
     b62:	82 1b       	sub	r24, r18
     b64:	91 09       	sbc	r25, r1
     b66:	a1 09       	sbc	r26, r1
     b68:	b1 09       	sbc	r27, r1
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	a1 05       	cpc	r26, r1
     b6e:	b1 05       	cpc	r27, r1
     b70:	89 f4       	brne	.+34     	; 0xb94 <__stack+0x335>
     b72:	e6 14       	cp	r14, r6
     b74:	f7 04       	cpc	r15, r7
     b76:	08 05       	cpc	r16, r8
     b78:	19 05       	cpc	r17, r9
     b7a:	08 f4       	brcc	.+2      	; 0xb7e <__stack+0x31f>
     b7c:	f2 c1       	rjmp	.+996    	; 0xf62 <__stack+0x703>
     b7e:	6d a4       	ldd	r6, Y+45	; 0x2d
     b80:	7e a4       	ldd	r7, Y+46	; 0x2e
     b82:	8f a4       	ldd	r8, Y+47	; 0x2f
     b84:	98 a8       	ldd	r9, Y+48	; 0x30
     b86:	62 14       	cp	r6, r2
     b88:	73 04       	cpc	r7, r3
     b8a:	84 04       	cpc	r8, r4
     b8c:	95 04       	cpc	r9, r5
     b8e:	08 f0       	brcs	.+2      	; 0xb92 <__stack+0x333>
     b90:	e8 c1       	rjmp	.+976    	; 0xf62 <__stack+0x703>
     b92:	f3 c1       	rjmp	.+998    	; 0xf7a <__stack+0x71b>
     b94:	6e 96       	adiw	r28, 0x1e	; 30
     b96:	8f af       	std	Y+63, r24	; 0x3f
     b98:	6e 97       	sbiw	r28, 0x1e	; 30
     b9a:	08 2e       	mov	r0, r24
     b9c:	04 c0       	rjmp	.+8      	; 0xba6 <__stack+0x347>
     b9e:	ee 0c       	add	r14, r14
     ba0:	ff 1c       	adc	r15, r15
     ba2:	00 1f       	adc	r16, r16
     ba4:	11 1f       	adc	r17, r17
     ba6:	0a 94       	dec	r0
     ba8:	d2 f7       	brpl	.-12     	; 0xb9e <__stack+0x33f>
     baa:	6a 2d       	mov	r22, r10
     bac:	68 1b       	sub	r22, r24
     bae:	d2 01       	movw	r26, r4
     bb0:	c1 01       	movw	r24, r2
     bb2:	06 2e       	mov	r0, r22
     bb4:	04 c0       	rjmp	.+8      	; 0xbbe <__stack+0x35f>
     bb6:	b6 95       	lsr	r27
     bb8:	a7 95       	ror	r26
     bba:	97 95       	ror	r25
     bbc:	87 95       	ror	r24
     bbe:	0a 94       	dec	r0
     bc0:	d2 f7       	brpl	.-12     	; 0xbb6 <__stack+0x357>
     bc2:	5c 01       	movw	r10, r24
     bc4:	6d 01       	movw	r12, r26
     bc6:	ae 28       	or	r10, r14
     bc8:	bf 28       	or	r11, r15
     bca:	c0 2a       	or	r12, r16
     bcc:	d1 2a       	or	r13, r17
     bce:	ad a2       	std	Y+37, r10	; 0x25
     bd0:	be a2       	std	Y+38, r11	; 0x26
     bd2:	cf a2       	std	Y+39, r12	; 0x27
     bd4:	d8 a6       	std	Y+40, r13	; 0x28
     bd6:	72 01       	movw	r14, r4
     bd8:	61 01       	movw	r12, r2
     bda:	6e 96       	adiw	r28, 0x1e	; 30
     bdc:	0f ac       	ldd	r0, Y+63	; 0x3f
     bde:	6e 97       	sbiw	r28, 0x1e	; 30
     be0:	04 c0       	rjmp	.+8      	; 0xbea <__stack+0x38b>
     be2:	cc 0c       	add	r12, r12
     be4:	dd 1c       	adc	r13, r13
     be6:	ee 1c       	adc	r14, r14
     be8:	ff 1c       	adc	r15, r15
     bea:	0a 94       	dec	r0
     bec:	d2 f7       	brpl	.-12     	; 0xbe2 <__stack+0x383>
     bee:	c9 a2       	std	Y+33, r12	; 0x21
     bf0:	da a2       	std	Y+34, r13	; 0x22
     bf2:	eb a2       	std	Y+35, r14	; 0x23
     bf4:	fc a2       	std	Y+36, r15	; 0x24
     bf6:	64 01       	movw	r12, r8
     bf8:	53 01       	movw	r10, r6
     bfa:	06 2e       	mov	r0, r22
     bfc:	04 c0       	rjmp	.+8      	; 0xc06 <__stack+0x3a7>
     bfe:	d6 94       	lsr	r13
     c00:	c7 94       	ror	r12
     c02:	b7 94       	ror	r11
     c04:	a7 94       	ror	r10
     c06:	0a 94       	dec	r0
     c08:	d2 f7       	brpl	.-12     	; 0xbfe <__stack+0x39f>
     c0a:	d4 01       	movw	r26, r8
     c0c:	c3 01       	movw	r24, r6
     c0e:	6e 96       	adiw	r28, 0x1e	; 30
     c10:	0f ac       	ldd	r0, Y+63	; 0x3f
     c12:	6e 97       	sbiw	r28, 0x1e	; 30
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__stack+0x3bf>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	aa 1f       	adc	r26, r26
     c1c:	bb 1f       	adc	r27, r27
     c1e:	0a 94       	dec	r0
     c20:	d2 f7       	brpl	.-12     	; 0xc16 <__stack+0x3b7>
     c22:	ed a4       	ldd	r14, Y+45	; 0x2d
     c24:	fe a4       	ldd	r15, Y+46	; 0x2e
     c26:	0f a5       	ldd	r16, Y+47	; 0x2f
     c28:	18 a9       	ldd	r17, Y+48	; 0x30
     c2a:	04 c0       	rjmp	.+8      	; 0xc34 <__stack+0x3d5>
     c2c:	16 95       	lsr	r17
     c2e:	07 95       	ror	r16
     c30:	f7 94       	ror	r15
     c32:	e7 94       	ror	r14
     c34:	6a 95       	dec	r22
     c36:	d2 f7       	brpl	.-12     	; 0xc2c <__stack+0x3cd>
     c38:	37 01       	movw	r6, r14
     c3a:	48 01       	movw	r8, r16
     c3c:	68 2a       	or	r6, r24
     c3e:	79 2a       	or	r7, r25
     c40:	8a 2a       	or	r8, r26
     c42:	9b 2a       	or	r9, r27
     c44:	6d 8e       	std	Y+29, r6	; 0x1d
     c46:	7e 8e       	std	Y+30, r7	; 0x1e
     c48:	8f 8e       	std	Y+31, r8	; 0x1f
     c4a:	98 a2       	std	Y+32, r9	; 0x20
     c4c:	ed a0       	ldd	r14, Y+37	; 0x25
     c4e:	fe a0       	ldd	r15, Y+38	; 0x26
     c50:	0f a1       	ldd	r16, Y+39	; 0x27
     c52:	18 a5       	ldd	r17, Y+40	; 0x28
     c54:	38 01       	movw	r6, r16
     c56:	88 24       	eor	r8, r8
     c58:	99 24       	eor	r9, r9
     c5a:	98 01       	movw	r18, r16
     c5c:	87 01       	movw	r16, r14
     c5e:	20 70       	andi	r18, 0x00	; 0
     c60:	30 70       	andi	r19, 0x00	; 0
     c62:	65 96       	adiw	r28, 0x15	; 21
     c64:	0c af       	std	Y+60, r16	; 0x3c
     c66:	1d af       	std	Y+61, r17	; 0x3d
     c68:	2e af       	std	Y+62, r18	; 0x3e
     c6a:	3f af       	std	Y+63, r19	; 0x3f
     c6c:	65 97       	sbiw	r28, 0x15	; 21
     c6e:	c6 01       	movw	r24, r12
     c70:	b5 01       	movw	r22, r10
     c72:	a4 01       	movw	r20, r8
     c74:	93 01       	movw	r18, r6
     c76:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     c7a:	7b 01       	movw	r14, r22
     c7c:	8c 01       	movw	r16, r24
     c7e:	c6 01       	movw	r24, r12
     c80:	b5 01       	movw	r22, r10
     c82:	a4 01       	movw	r20, r8
     c84:	93 01       	movw	r18, r6
     c86:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     c8a:	c9 01       	movw	r24, r18
     c8c:	da 01       	movw	r26, r20
     c8e:	1c 01       	movw	r2, r24
     c90:	2d 01       	movw	r4, r26
     c92:	c2 01       	movw	r24, r4
     c94:	b1 01       	movw	r22, r2
     c96:	65 96       	adiw	r28, 0x15	; 21
     c98:	2c ad       	ldd	r18, Y+60	; 0x3c
     c9a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c9c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c9e:	5f ad       	ldd	r21, Y+63	; 0x3f
     ca0:	65 97       	sbiw	r28, 0x15	; 21
     ca2:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     ca6:	9b 01       	movw	r18, r22
     ca8:	ac 01       	movw	r20, r24
     caa:	87 01       	movw	r16, r14
     cac:	ff 24       	eor	r15, r15
     cae:	ee 24       	eor	r14, r14
     cb0:	ad 8c       	ldd	r10, Y+29	; 0x1d
     cb2:	be 8c       	ldd	r11, Y+30	; 0x1e
     cb4:	cf 8c       	ldd	r12, Y+31	; 0x1f
     cb6:	d8 a0       	ldd	r13, Y+32	; 0x20
     cb8:	c6 01       	movw	r24, r12
     cba:	aa 27       	eor	r26, r26
     cbc:	bb 27       	eor	r27, r27
     cbe:	57 01       	movw	r10, r14
     cc0:	68 01       	movw	r12, r16
     cc2:	a8 2a       	or	r10, r24
     cc4:	b9 2a       	or	r11, r25
     cc6:	ca 2a       	or	r12, r26
     cc8:	db 2a       	or	r13, r27
     cca:	a2 16       	cp	r10, r18
     ccc:	b3 06       	cpc	r11, r19
     cce:	c4 06       	cpc	r12, r20
     cd0:	d5 06       	cpc	r13, r21
     cd2:	00 f5       	brcc	.+64     	; 0xd14 <__stack+0x4b5>
     cd4:	08 94       	sec
     cd6:	21 08       	sbc	r2, r1
     cd8:	31 08       	sbc	r3, r1
     cda:	41 08       	sbc	r4, r1
     cdc:	51 08       	sbc	r5, r1
     cde:	ed a0       	ldd	r14, Y+37	; 0x25
     ce0:	fe a0       	ldd	r15, Y+38	; 0x26
     ce2:	0f a1       	ldd	r16, Y+39	; 0x27
     ce4:	18 a5       	ldd	r17, Y+40	; 0x28
     ce6:	ae 0c       	add	r10, r14
     ce8:	bf 1c       	adc	r11, r15
     cea:	c0 1e       	adc	r12, r16
     cec:	d1 1e       	adc	r13, r17
     cee:	ae 14       	cp	r10, r14
     cf0:	bf 04       	cpc	r11, r15
     cf2:	c0 06       	cpc	r12, r16
     cf4:	d1 06       	cpc	r13, r17
     cf6:	70 f0       	brcs	.+28     	; 0xd14 <__stack+0x4b5>
     cf8:	a2 16       	cp	r10, r18
     cfa:	b3 06       	cpc	r11, r19
     cfc:	c4 06       	cpc	r12, r20
     cfe:	d5 06       	cpc	r13, r21
     d00:	48 f4       	brcc	.+18     	; 0xd14 <__stack+0x4b5>
     d02:	08 94       	sec
     d04:	21 08       	sbc	r2, r1
     d06:	31 08       	sbc	r3, r1
     d08:	41 08       	sbc	r4, r1
     d0a:	51 08       	sbc	r5, r1
     d0c:	ae 0c       	add	r10, r14
     d0e:	bf 1c       	adc	r11, r15
     d10:	c0 1e       	adc	r12, r16
     d12:	d1 1e       	adc	r13, r17
     d14:	a2 1a       	sub	r10, r18
     d16:	b3 0a       	sbc	r11, r19
     d18:	c4 0a       	sbc	r12, r20
     d1a:	d5 0a       	sbc	r13, r21
     d1c:	c6 01       	movw	r24, r12
     d1e:	b5 01       	movw	r22, r10
     d20:	a4 01       	movw	r20, r8
     d22:	93 01       	movw	r18, r6
     d24:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     d28:	7b 01       	movw	r14, r22
     d2a:	8c 01       	movw	r16, r24
     d2c:	c6 01       	movw	r24, r12
     d2e:	b5 01       	movw	r22, r10
     d30:	a4 01       	movw	r20, r8
     d32:	93 01       	movw	r18, r6
     d34:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
     d38:	c9 01       	movw	r24, r18
     d3a:	da 01       	movw	r26, r20
     d3c:	3c 01       	movw	r6, r24
     d3e:	4d 01       	movw	r8, r26
     d40:	c4 01       	movw	r24, r8
     d42:	b3 01       	movw	r22, r6
     d44:	65 96       	adiw	r28, 0x15	; 21
     d46:	2c ad       	ldd	r18, Y+60	; 0x3c
     d48:	3d ad       	ldd	r19, Y+61	; 0x3d
     d4a:	4e ad       	ldd	r20, Y+62	; 0x3e
     d4c:	5f ad       	ldd	r21, Y+63	; 0x3f
     d4e:	65 97       	sbiw	r28, 0x15	; 21
     d50:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     d54:	9b 01       	movw	r18, r22
     d56:	ac 01       	movw	r20, r24
     d58:	87 01       	movw	r16, r14
     d5a:	ff 24       	eor	r15, r15
     d5c:	ee 24       	eor	r14, r14
     d5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d60:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d62:	af 8d       	ldd	r26, Y+31	; 0x1f
     d64:	b8 a1       	ldd	r27, Y+32	; 0x20
     d66:	a0 70       	andi	r26, 0x00	; 0
     d68:	b0 70       	andi	r27, 0x00	; 0
     d6a:	57 01       	movw	r10, r14
     d6c:	68 01       	movw	r12, r16
     d6e:	a8 2a       	or	r10, r24
     d70:	b9 2a       	or	r11, r25
     d72:	ca 2a       	or	r12, r26
     d74:	db 2a       	or	r13, r27
     d76:	a2 16       	cp	r10, r18
     d78:	b3 06       	cpc	r11, r19
     d7a:	c4 06       	cpc	r12, r20
     d7c:	d5 06       	cpc	r13, r21
     d7e:	00 f5       	brcc	.+64     	; 0xdc0 <__stack+0x561>
     d80:	08 94       	sec
     d82:	61 08       	sbc	r6, r1
     d84:	71 08       	sbc	r7, r1
     d86:	81 08       	sbc	r8, r1
     d88:	91 08       	sbc	r9, r1
     d8a:	6d a1       	ldd	r22, Y+37	; 0x25
     d8c:	7e a1       	ldd	r23, Y+38	; 0x26
     d8e:	8f a1       	ldd	r24, Y+39	; 0x27
     d90:	98 a5       	ldd	r25, Y+40	; 0x28
     d92:	a6 0e       	add	r10, r22
     d94:	b7 1e       	adc	r11, r23
     d96:	c8 1e       	adc	r12, r24
     d98:	d9 1e       	adc	r13, r25
     d9a:	a6 16       	cp	r10, r22
     d9c:	b7 06       	cpc	r11, r23
     d9e:	c8 06       	cpc	r12, r24
     da0:	d9 06       	cpc	r13, r25
     da2:	70 f0       	brcs	.+28     	; 0xdc0 <__stack+0x561>
     da4:	a2 16       	cp	r10, r18
     da6:	b3 06       	cpc	r11, r19
     da8:	c4 06       	cpc	r12, r20
     daa:	d5 06       	cpc	r13, r21
     dac:	48 f4       	brcc	.+18     	; 0xdc0 <__stack+0x561>
     dae:	08 94       	sec
     db0:	61 08       	sbc	r6, r1
     db2:	71 08       	sbc	r7, r1
     db4:	81 08       	sbc	r8, r1
     db6:	91 08       	sbc	r9, r1
     db8:	a6 0e       	add	r10, r22
     dba:	b7 1e       	adc	r11, r23
     dbc:	c8 1e       	adc	r12, r24
     dbe:	d9 1e       	adc	r13, r25
     dc0:	d6 01       	movw	r26, r12
     dc2:	c5 01       	movw	r24, r10
     dc4:	82 1b       	sub	r24, r18
     dc6:	93 0b       	sbc	r25, r19
     dc8:	a4 0b       	sbc	r26, r20
     dca:	b5 0b       	sbc	r27, r21
     dcc:	89 8f       	std	Y+25, r24	; 0x19
     dce:	9a 8f       	std	Y+26, r25	; 0x1a
     dd0:	ab 8f       	std	Y+27, r26	; 0x1b
     dd2:	bc 8f       	std	Y+28, r27	; 0x1c
     dd4:	d1 01       	movw	r26, r2
     dd6:	99 27       	eor	r25, r25
     dd8:	88 27       	eor	r24, r24
     dda:	64 01       	movw	r12, r8
     ddc:	53 01       	movw	r10, r6
     dde:	a8 2a       	or	r10, r24
     de0:	b9 2a       	or	r11, r25
     de2:	ca 2a       	or	r12, r26
     de4:	db 2a       	or	r13, r27
     de6:	a9 aa       	std	Y+49, r10	; 0x31
     de8:	ba aa       	std	Y+50, r11	; 0x32
     dea:	cb aa       	std	Y+51, r12	; 0x33
     dec:	dc aa       	std	Y+52, r13	; 0x34
     dee:	86 01       	movw	r16, r12
     df0:	75 01       	movw	r14, r10
     df2:	2f ef       	ldi	r18, 0xFF	; 255
     df4:	3f ef       	ldi	r19, 0xFF	; 255
     df6:	40 e0       	ldi	r20, 0x00	; 0
     df8:	50 e0       	ldi	r21, 0x00	; 0
     dfa:	e2 22       	and	r14, r18
     dfc:	f3 22       	and	r15, r19
     dfe:	04 23       	and	r16, r20
     e00:	15 23       	and	r17, r21
     e02:	a6 01       	movw	r20, r12
     e04:	66 27       	eor	r22, r22
     e06:	77 27       	eor	r23, r23
     e08:	6d 96       	adiw	r28, 0x1d	; 29
     e0a:	4c af       	std	Y+60, r20	; 0x3c
     e0c:	5d af       	std	Y+61, r21	; 0x3d
     e0e:	6e af       	std	Y+62, r22	; 0x3e
     e10:	7f af       	std	Y+63, r23	; 0x3f
     e12:	6d 97       	sbiw	r28, 0x1d	; 29
     e14:	a9 a0       	ldd	r10, Y+33	; 0x21
     e16:	ba a0       	ldd	r11, Y+34	; 0x22
     e18:	cb a0       	ldd	r12, Y+35	; 0x23
     e1a:	dc a0       	ldd	r13, Y+36	; 0x24
     e1c:	6f ef       	ldi	r22, 0xFF	; 255
     e1e:	7f ef       	ldi	r23, 0xFF	; 255
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a6 22       	and	r10, r22
     e26:	b7 22       	and	r11, r23
     e28:	c8 22       	and	r12, r24
     e2a:	d9 22       	and	r13, r25
     e2c:	89 a1       	ldd	r24, Y+33	; 0x21
     e2e:	9a a1       	ldd	r25, Y+34	; 0x22
     e30:	ab a1       	ldd	r26, Y+35	; 0x23
     e32:	bc a1       	ldd	r27, Y+36	; 0x24
     e34:	1d 01       	movw	r2, r26
     e36:	44 24       	eor	r4, r4
     e38:	55 24       	eor	r5, r5
     e3a:	c8 01       	movw	r24, r16
     e3c:	b7 01       	movw	r22, r14
     e3e:	a6 01       	movw	r20, r12
     e40:	95 01       	movw	r18, r10
     e42:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     e46:	69 96       	adiw	r28, 0x19	; 25
     e48:	6c af       	std	Y+60, r22	; 0x3c
     e4a:	7d af       	std	Y+61, r23	; 0x3d
     e4c:	8e af       	std	Y+62, r24	; 0x3e
     e4e:	9f af       	std	Y+63, r25	; 0x3f
     e50:	69 97       	sbiw	r28, 0x19	; 25
     e52:	c8 01       	movw	r24, r16
     e54:	b7 01       	movw	r22, r14
     e56:	a2 01       	movw	r20, r4
     e58:	91 01       	movw	r18, r2
     e5a:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     e5e:	3b 01       	movw	r6, r22
     e60:	4c 01       	movw	r8, r24
     e62:	6d 96       	adiw	r28, 0x1d	; 29
     e64:	6c ad       	ldd	r22, Y+60	; 0x3c
     e66:	7d ad       	ldd	r23, Y+61	; 0x3d
     e68:	8e ad       	ldd	r24, Y+62	; 0x3e
     e6a:	9f ad       	ldd	r25, Y+63	; 0x3f
     e6c:	6d 97       	sbiw	r28, 0x1d	; 29
     e6e:	a6 01       	movw	r20, r12
     e70:	95 01       	movw	r18, r10
     e72:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     e76:	7b 01       	movw	r14, r22
     e78:	8c 01       	movw	r16, r24
     e7a:	6d 96       	adiw	r28, 0x1d	; 29
     e7c:	6c ad       	ldd	r22, Y+60	; 0x3c
     e7e:	7d ad       	ldd	r23, Y+61	; 0x3d
     e80:	8e ad       	ldd	r24, Y+62	; 0x3e
     e82:	9f ad       	ldd	r25, Y+63	; 0x3f
     e84:	6d 97       	sbiw	r28, 0x1d	; 29
     e86:	a2 01       	movw	r20, r4
     e88:	91 01       	movw	r18, r2
     e8a:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
     e8e:	5b 01       	movw	r10, r22
     e90:	6c 01       	movw	r12, r24
     e92:	a8 01       	movw	r20, r16
     e94:	97 01       	movw	r18, r14
     e96:	26 0d       	add	r18, r6
     e98:	37 1d       	adc	r19, r7
     e9a:	48 1d       	adc	r20, r8
     e9c:	59 1d       	adc	r21, r9
     e9e:	69 96       	adiw	r28, 0x19	; 25
     ea0:	6c ac       	ldd	r6, Y+60	; 0x3c
     ea2:	7d ac       	ldd	r7, Y+61	; 0x3d
     ea4:	8e ac       	ldd	r8, Y+62	; 0x3e
     ea6:	9f ac       	ldd	r9, Y+63	; 0x3f
     ea8:	69 97       	sbiw	r28, 0x19	; 25
     eaa:	c4 01       	movw	r24, r8
     eac:	aa 27       	eor	r26, r26
     eae:	bb 27       	eor	r27, r27
     eb0:	28 0f       	add	r18, r24
     eb2:	39 1f       	adc	r19, r25
     eb4:	4a 1f       	adc	r20, r26
     eb6:	5b 1f       	adc	r21, r27
     eb8:	2e 15       	cp	r18, r14
     eba:	3f 05       	cpc	r19, r15
     ebc:	40 07       	cpc	r20, r16
     ebe:	51 07       	cpc	r21, r17
     ec0:	48 f4       	brcc	.+18     	; 0xed4 <__stack+0x675>
     ec2:	e1 2c       	mov	r14, r1
     ec4:	f1 2c       	mov	r15, r1
     ec6:	61 e0       	ldi	r22, 0x01	; 1
     ec8:	06 2f       	mov	r16, r22
     eca:	11 2d       	mov	r17, r1
     ecc:	ae 0c       	add	r10, r14
     ece:	bf 1c       	adc	r11, r15
     ed0:	c0 1e       	adc	r12, r16
     ed2:	d1 1e       	adc	r13, r17
     ed4:	ca 01       	movw	r24, r20
     ed6:	aa 27       	eor	r26, r26
     ed8:	bb 27       	eor	r27, r27
     eda:	bc 01       	movw	r22, r24
     edc:	cd 01       	movw	r24, r26
     ede:	6a 0d       	add	r22, r10
     ee0:	7b 1d       	adc	r23, r11
     ee2:	8c 1d       	adc	r24, r12
     ee4:	9d 1d       	adc	r25, r13
     ee6:	69 8c       	ldd	r6, Y+25	; 0x19
     ee8:	7a 8c       	ldd	r7, Y+26	; 0x1a
     eea:	8b 8c       	ldd	r8, Y+27	; 0x1b
     eec:	9c 8c       	ldd	r9, Y+28	; 0x1c
     eee:	66 16       	cp	r6, r22
     ef0:	77 06       	cpc	r7, r23
     ef2:	88 06       	cpc	r8, r24
     ef4:	99 06       	cpc	r9, r25
     ef6:	40 f1       	brcs	.+80     	; 0xf48 <__stack+0x6e9>
     ef8:	66 15       	cp	r22, r6
     efa:	77 05       	cpc	r23, r7
     efc:	88 05       	cpc	r24, r8
     efe:	99 05       	cpc	r25, r9
     f00:	09 f0       	breq	.+2      	; 0xf04 <__stack+0x6a5>
     f02:	43 c0       	rjmp	.+134    	; 0xf8a <__stack+0x72b>
     f04:	d9 01       	movw	r26, r18
     f06:	99 27       	eor	r25, r25
     f08:	88 27       	eor	r24, r24
     f0a:	69 96       	adiw	r28, 0x19	; 25
     f0c:	2c ad       	ldd	r18, Y+60	; 0x3c
     f0e:	3d ad       	ldd	r19, Y+61	; 0x3d
     f10:	4e ad       	ldd	r20, Y+62	; 0x3e
     f12:	5f ad       	ldd	r21, Y+63	; 0x3f
     f14:	69 97       	sbiw	r28, 0x19	; 25
     f16:	40 70       	andi	r20, 0x00	; 0
     f18:	50 70       	andi	r21, 0x00	; 0
     f1a:	82 0f       	add	r24, r18
     f1c:	93 1f       	adc	r25, r19
     f1e:	a4 1f       	adc	r26, r20
     f20:	b5 1f       	adc	r27, r21
     f22:	2d a5       	ldd	r18, Y+45	; 0x2d
     f24:	3e a5       	ldd	r19, Y+46	; 0x2e
     f26:	4f a5       	ldd	r20, Y+47	; 0x2f
     f28:	58 a9       	ldd	r21, Y+48	; 0x30
     f2a:	6e 96       	adiw	r28, 0x1e	; 30
     f2c:	0f ac       	ldd	r0, Y+63	; 0x3f
     f2e:	6e 97       	sbiw	r28, 0x1e	; 30
     f30:	04 c0       	rjmp	.+8      	; 0xf3a <__stack+0x6db>
     f32:	22 0f       	add	r18, r18
     f34:	33 1f       	adc	r19, r19
     f36:	44 1f       	adc	r20, r20
     f38:	55 1f       	adc	r21, r21
     f3a:	0a 94       	dec	r0
     f3c:	d2 f7       	brpl	.-12     	; 0xf32 <__stack+0x6d3>
     f3e:	28 17       	cp	r18, r24
     f40:	39 07       	cpc	r19, r25
     f42:	4a 07       	cpc	r20, r26
     f44:	5b 07       	cpc	r21, r27
     f46:	08 f5       	brcc	.+66     	; 0xf8a <__stack+0x72b>
     f48:	09 a9       	ldd	r16, Y+49	; 0x31
     f4a:	1a a9       	ldd	r17, Y+50	; 0x32
     f4c:	2b a9       	ldd	r18, Y+51	; 0x33
     f4e:	3c a9       	ldd	r19, Y+52	; 0x34
     f50:	01 50       	subi	r16, 0x01	; 1
     f52:	10 40       	sbci	r17, 0x00	; 0
     f54:	20 40       	sbci	r18, 0x00	; 0
     f56:	30 40       	sbci	r19, 0x00	; 0
     f58:	09 ab       	std	Y+49, r16	; 0x31
     f5a:	1a ab       	std	Y+50, r17	; 0x32
     f5c:	2b ab       	std	Y+51, r18	; 0x33
     f5e:	3c ab       	std	Y+52, r19	; 0x34
     f60:	14 c0       	rjmp	.+40     	; 0xf8a <__stack+0x72b>
     f62:	66 24       	eor	r6, r6
     f64:	77 24       	eor	r7, r7
     f66:	43 01       	movw	r8, r6
     f68:	21 e0       	ldi	r18, 0x01	; 1
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	40 e0       	ldi	r20, 0x00	; 0
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	29 ab       	std	Y+49, r18	; 0x31
     f72:	3a ab       	std	Y+50, r19	; 0x32
     f74:	4b ab       	std	Y+51, r20	; 0x33
     f76:	5c ab       	std	Y+52, r21	; 0x34
     f78:	0b c0       	rjmp	.+22     	; 0xf90 <__stack+0x731>
     f7a:	66 24       	eor	r6, r6
     f7c:	77 24       	eor	r7, r7
     f7e:	43 01       	movw	r8, r6
     f80:	19 aa       	std	Y+49, r1	; 0x31
     f82:	1a aa       	std	Y+50, r1	; 0x32
     f84:	1b aa       	std	Y+51, r1	; 0x33
     f86:	1c aa       	std	Y+52, r1	; 0x34
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <__stack+0x731>
     f8a:	66 24       	eor	r6, r6
     f8c:	77 24       	eor	r7, r7
     f8e:	43 01       	movw	r8, r6
     f90:	fe 01       	movw	r30, r28
     f92:	71 96       	adiw	r30, 0x11	; 17
     f94:	88 e0       	ldi	r24, 0x08	; 8
     f96:	df 01       	movw	r26, r30
     f98:	1d 92       	st	X+, r1
     f9a:	8a 95       	dec	r24
     f9c:	e9 f7       	brne	.-6      	; 0xf98 <__stack+0x739>
     f9e:	a9 a8       	ldd	r10, Y+49	; 0x31
     fa0:	ba a8       	ldd	r11, Y+50	; 0x32
     fa2:	cb a8       	ldd	r12, Y+51	; 0x33
     fa4:	dc a8       	ldd	r13, Y+52	; 0x34
     fa6:	a9 8a       	std	Y+17, r10	; 0x11
     fa8:	ba 8a       	std	Y+18, r11	; 0x12
     faa:	cb 8a       	std	Y+19, r12	; 0x13
     fac:	dc 8a       	std	Y+20, r13	; 0x14
     fae:	6d 8a       	std	Y+21, r6	; 0x15
     fb0:	7e 8a       	std	Y+22, r7	; 0x16
     fb2:	8f 8a       	std	Y+23, r8	; 0x17
     fb4:	98 8e       	std	Y+24, r9	; 0x18
     fb6:	29 a9       	ldd	r18, Y+49	; 0x31
     fb8:	3a 89       	ldd	r19, Y+18	; 0x12
     fba:	4b 89       	ldd	r20, Y+19	; 0x13
     fbc:	5c 89       	ldd	r21, Y+20	; 0x14
     fbe:	66 2d       	mov	r22, r6
     fc0:	7e 89       	ldd	r23, Y+22	; 0x16
     fc2:	8f 89       	ldd	r24, Y+23	; 0x17
     fc4:	98 8d       	ldd	r25, Y+24	; 0x18
     fc6:	c2 5a       	subi	r28, 0xA2	; 162
     fc8:	df 4f       	sbci	r29, 0xFF	; 255
     fca:	e2 e1       	ldi	r30, 0x12	; 18
     fcc:	0c 94 6a 2b 	jmp	0x56d4	; 0x56d4 <__epilogue_restores__>

00000fd0 <_fpadd_parts>:
     fd0:	a0 e0       	ldi	r26, 0x00	; 0
     fd2:	b0 e0       	ldi	r27, 0x00	; 0
     fd4:	ee ee       	ldi	r30, 0xEE	; 238
     fd6:	f7 e0       	ldi	r31, 0x07	; 7
     fd8:	0c 94 4e 2b 	jmp	0x569c	; 0x569c <__prologue_saves__>
     fdc:	dc 01       	movw	r26, r24
     fde:	2b 01       	movw	r4, r22
     fe0:	fa 01       	movw	r30, r20
     fe2:	9c 91       	ld	r25, X
     fe4:	92 30       	cpi	r25, 0x02	; 2
     fe6:	08 f4       	brcc	.+2      	; 0xfea <_fpadd_parts+0x1a>
     fe8:	39 c1       	rjmp	.+626    	; 0x125c <_fpadd_parts+0x28c>
     fea:	eb 01       	movw	r28, r22
     fec:	88 81       	ld	r24, Y
     fee:	82 30       	cpi	r24, 0x02	; 2
     ff0:	08 f4       	brcc	.+2      	; 0xff4 <_fpadd_parts+0x24>
     ff2:	33 c1       	rjmp	.+614    	; 0x125a <_fpadd_parts+0x28a>
     ff4:	94 30       	cpi	r25, 0x04	; 4
     ff6:	69 f4       	brne	.+26     	; 0x1012 <_fpadd_parts+0x42>
     ff8:	84 30       	cpi	r24, 0x04	; 4
     ffa:	09 f0       	breq	.+2      	; 0xffe <_fpadd_parts+0x2e>
     ffc:	2f c1       	rjmp	.+606    	; 0x125c <_fpadd_parts+0x28c>
     ffe:	11 96       	adiw	r26, 0x01	; 1
    1000:	9c 91       	ld	r25, X
    1002:	11 97       	sbiw	r26, 0x01	; 1
    1004:	89 81       	ldd	r24, Y+1	; 0x01
    1006:	98 17       	cp	r25, r24
    1008:	09 f4       	brne	.+2      	; 0x100c <_fpadd_parts+0x3c>
    100a:	28 c1       	rjmp	.+592    	; 0x125c <_fpadd_parts+0x28c>
    100c:	a5 e1       	ldi	r26, 0x15	; 21
    100e:	b1 e0       	ldi	r27, 0x01	; 1
    1010:	25 c1       	rjmp	.+586    	; 0x125c <_fpadd_parts+0x28c>
    1012:	84 30       	cpi	r24, 0x04	; 4
    1014:	09 f4       	brne	.+2      	; 0x1018 <_fpadd_parts+0x48>
    1016:	21 c1       	rjmp	.+578    	; 0x125a <_fpadd_parts+0x28a>
    1018:	82 30       	cpi	r24, 0x02	; 2
    101a:	a9 f4       	brne	.+42     	; 0x1046 <_fpadd_parts+0x76>
    101c:	92 30       	cpi	r25, 0x02	; 2
    101e:	09 f0       	breq	.+2      	; 0x1022 <_fpadd_parts+0x52>
    1020:	1d c1       	rjmp	.+570    	; 0x125c <_fpadd_parts+0x28c>
    1022:	9a 01       	movw	r18, r20
    1024:	ad 01       	movw	r20, r26
    1026:	88 e0       	ldi	r24, 0x08	; 8
    1028:	ea 01       	movw	r28, r20
    102a:	09 90       	ld	r0, Y+
    102c:	ae 01       	movw	r20, r28
    102e:	e9 01       	movw	r28, r18
    1030:	09 92       	st	Y+, r0
    1032:	9e 01       	movw	r18, r28
    1034:	81 50       	subi	r24, 0x01	; 1
    1036:	c1 f7       	brne	.-16     	; 0x1028 <_fpadd_parts+0x58>
    1038:	e2 01       	movw	r28, r4
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	11 96       	adiw	r26, 0x01	; 1
    103e:	9c 91       	ld	r25, X
    1040:	89 23       	and	r24, r25
    1042:	81 83       	std	Z+1, r24	; 0x01
    1044:	08 c1       	rjmp	.+528    	; 0x1256 <_fpadd_parts+0x286>
    1046:	92 30       	cpi	r25, 0x02	; 2
    1048:	09 f4       	brne	.+2      	; 0x104c <_fpadd_parts+0x7c>
    104a:	07 c1       	rjmp	.+526    	; 0x125a <_fpadd_parts+0x28a>
    104c:	12 96       	adiw	r26, 0x02	; 2
    104e:	2d 90       	ld	r2, X+
    1050:	3c 90       	ld	r3, X
    1052:	13 97       	sbiw	r26, 0x03	; 3
    1054:	eb 01       	movw	r28, r22
    1056:	8a 81       	ldd	r24, Y+2	; 0x02
    1058:	9b 81       	ldd	r25, Y+3	; 0x03
    105a:	14 96       	adiw	r26, 0x04	; 4
    105c:	ad 90       	ld	r10, X+
    105e:	bd 90       	ld	r11, X+
    1060:	cd 90       	ld	r12, X+
    1062:	dc 90       	ld	r13, X
    1064:	17 97       	sbiw	r26, 0x07	; 7
    1066:	ec 80       	ldd	r14, Y+4	; 0x04
    1068:	fd 80       	ldd	r15, Y+5	; 0x05
    106a:	0e 81       	ldd	r16, Y+6	; 0x06
    106c:	1f 81       	ldd	r17, Y+7	; 0x07
    106e:	91 01       	movw	r18, r2
    1070:	28 1b       	sub	r18, r24
    1072:	39 0b       	sbc	r19, r25
    1074:	b9 01       	movw	r22, r18
    1076:	37 ff       	sbrs	r19, 7
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <_fpadd_parts+0xb2>
    107a:	66 27       	eor	r22, r22
    107c:	77 27       	eor	r23, r23
    107e:	62 1b       	sub	r22, r18
    1080:	73 0b       	sbc	r23, r19
    1082:	60 32       	cpi	r22, 0x20	; 32
    1084:	71 05       	cpc	r23, r1
    1086:	0c f0       	brlt	.+2      	; 0x108a <_fpadd_parts+0xba>
    1088:	61 c0       	rjmp	.+194    	; 0x114c <_fpadd_parts+0x17c>
    108a:	12 16       	cp	r1, r18
    108c:	13 06       	cpc	r1, r19
    108e:	6c f5       	brge	.+90     	; 0x10ea <_fpadd_parts+0x11a>
    1090:	37 01       	movw	r6, r14
    1092:	48 01       	movw	r8, r16
    1094:	06 2e       	mov	r0, r22
    1096:	04 c0       	rjmp	.+8      	; 0x10a0 <_fpadd_parts+0xd0>
    1098:	96 94       	lsr	r9
    109a:	87 94       	ror	r8
    109c:	77 94       	ror	r7
    109e:	67 94       	ror	r6
    10a0:	0a 94       	dec	r0
    10a2:	d2 f7       	brpl	.-12     	; 0x1098 <_fpadd_parts+0xc8>
    10a4:	21 e0       	ldi	r18, 0x01	; 1
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <_fpadd_parts+0xe6>
    10ae:	22 0f       	add	r18, r18
    10b0:	33 1f       	adc	r19, r19
    10b2:	44 1f       	adc	r20, r20
    10b4:	55 1f       	adc	r21, r21
    10b6:	6a 95       	dec	r22
    10b8:	d2 f7       	brpl	.-12     	; 0x10ae <_fpadd_parts+0xde>
    10ba:	21 50       	subi	r18, 0x01	; 1
    10bc:	30 40       	sbci	r19, 0x00	; 0
    10be:	40 40       	sbci	r20, 0x00	; 0
    10c0:	50 40       	sbci	r21, 0x00	; 0
    10c2:	2e 21       	and	r18, r14
    10c4:	3f 21       	and	r19, r15
    10c6:	40 23       	and	r20, r16
    10c8:	51 23       	and	r21, r17
    10ca:	21 15       	cp	r18, r1
    10cc:	31 05       	cpc	r19, r1
    10ce:	41 05       	cpc	r20, r1
    10d0:	51 05       	cpc	r21, r1
    10d2:	21 f0       	breq	.+8      	; 0x10dc <_fpadd_parts+0x10c>
    10d4:	21 e0       	ldi	r18, 0x01	; 1
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	50 e0       	ldi	r21, 0x00	; 0
    10dc:	79 01       	movw	r14, r18
    10de:	8a 01       	movw	r16, r20
    10e0:	e6 28       	or	r14, r6
    10e2:	f7 28       	or	r15, r7
    10e4:	08 29       	or	r16, r8
    10e6:	19 29       	or	r17, r9
    10e8:	3c c0       	rjmp	.+120    	; 0x1162 <_fpadd_parts+0x192>
    10ea:	23 2b       	or	r18, r19
    10ec:	d1 f1       	breq	.+116    	; 0x1162 <_fpadd_parts+0x192>
    10ee:	26 0e       	add	r2, r22
    10f0:	37 1e       	adc	r3, r23
    10f2:	35 01       	movw	r6, r10
    10f4:	46 01       	movw	r8, r12
    10f6:	06 2e       	mov	r0, r22
    10f8:	04 c0       	rjmp	.+8      	; 0x1102 <_fpadd_parts+0x132>
    10fa:	96 94       	lsr	r9
    10fc:	87 94       	ror	r8
    10fe:	77 94       	ror	r7
    1100:	67 94       	ror	r6
    1102:	0a 94       	dec	r0
    1104:	d2 f7       	brpl	.-12     	; 0x10fa <_fpadd_parts+0x12a>
    1106:	21 e0       	ldi	r18, 0x01	; 1
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	50 e0       	ldi	r21, 0x00	; 0
    110e:	04 c0       	rjmp	.+8      	; 0x1118 <_fpadd_parts+0x148>
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	44 1f       	adc	r20, r20
    1116:	55 1f       	adc	r21, r21
    1118:	6a 95       	dec	r22
    111a:	d2 f7       	brpl	.-12     	; 0x1110 <_fpadd_parts+0x140>
    111c:	21 50       	subi	r18, 0x01	; 1
    111e:	30 40       	sbci	r19, 0x00	; 0
    1120:	40 40       	sbci	r20, 0x00	; 0
    1122:	50 40       	sbci	r21, 0x00	; 0
    1124:	2a 21       	and	r18, r10
    1126:	3b 21       	and	r19, r11
    1128:	4c 21       	and	r20, r12
    112a:	5d 21       	and	r21, r13
    112c:	21 15       	cp	r18, r1
    112e:	31 05       	cpc	r19, r1
    1130:	41 05       	cpc	r20, r1
    1132:	51 05       	cpc	r21, r1
    1134:	21 f0       	breq	.+8      	; 0x113e <_fpadd_parts+0x16e>
    1136:	21 e0       	ldi	r18, 0x01	; 1
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	40 e0       	ldi	r20, 0x00	; 0
    113c:	50 e0       	ldi	r21, 0x00	; 0
    113e:	59 01       	movw	r10, r18
    1140:	6a 01       	movw	r12, r20
    1142:	a6 28       	or	r10, r6
    1144:	b7 28       	or	r11, r7
    1146:	c8 28       	or	r12, r8
    1148:	d9 28       	or	r13, r9
    114a:	0b c0       	rjmp	.+22     	; 0x1162 <_fpadd_parts+0x192>
    114c:	82 15       	cp	r24, r2
    114e:	93 05       	cpc	r25, r3
    1150:	2c f0       	brlt	.+10     	; 0x115c <_fpadd_parts+0x18c>
    1152:	1c 01       	movw	r2, r24
    1154:	aa 24       	eor	r10, r10
    1156:	bb 24       	eor	r11, r11
    1158:	65 01       	movw	r12, r10
    115a:	03 c0       	rjmp	.+6      	; 0x1162 <_fpadd_parts+0x192>
    115c:	ee 24       	eor	r14, r14
    115e:	ff 24       	eor	r15, r15
    1160:	87 01       	movw	r16, r14
    1162:	11 96       	adiw	r26, 0x01	; 1
    1164:	9c 91       	ld	r25, X
    1166:	d2 01       	movw	r26, r4
    1168:	11 96       	adiw	r26, 0x01	; 1
    116a:	8c 91       	ld	r24, X
    116c:	98 17       	cp	r25, r24
    116e:	09 f4       	brne	.+2      	; 0x1172 <_fpadd_parts+0x1a2>
    1170:	45 c0       	rjmp	.+138    	; 0x11fc <_fpadd_parts+0x22c>
    1172:	99 23       	and	r25, r25
    1174:	39 f0       	breq	.+14     	; 0x1184 <_fpadd_parts+0x1b4>
    1176:	a8 01       	movw	r20, r16
    1178:	97 01       	movw	r18, r14
    117a:	2a 19       	sub	r18, r10
    117c:	3b 09       	sbc	r19, r11
    117e:	4c 09       	sbc	r20, r12
    1180:	5d 09       	sbc	r21, r13
    1182:	06 c0       	rjmp	.+12     	; 0x1190 <_fpadd_parts+0x1c0>
    1184:	a6 01       	movw	r20, r12
    1186:	95 01       	movw	r18, r10
    1188:	2e 19       	sub	r18, r14
    118a:	3f 09       	sbc	r19, r15
    118c:	40 0b       	sbc	r20, r16
    118e:	51 0b       	sbc	r21, r17
    1190:	57 fd       	sbrc	r21, 7
    1192:	08 c0       	rjmp	.+16     	; 0x11a4 <_fpadd_parts+0x1d4>
    1194:	11 82       	std	Z+1, r1	; 0x01
    1196:	33 82       	std	Z+3, r3	; 0x03
    1198:	22 82       	std	Z+2, r2	; 0x02
    119a:	24 83       	std	Z+4, r18	; 0x04
    119c:	35 83       	std	Z+5, r19	; 0x05
    119e:	46 83       	std	Z+6, r20	; 0x06
    11a0:	57 83       	std	Z+7, r21	; 0x07
    11a2:	1d c0       	rjmp	.+58     	; 0x11de <_fpadd_parts+0x20e>
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	81 83       	std	Z+1, r24	; 0x01
    11a8:	33 82       	std	Z+3, r3	; 0x03
    11aa:	22 82       	std	Z+2, r2	; 0x02
    11ac:	88 27       	eor	r24, r24
    11ae:	99 27       	eor	r25, r25
    11b0:	dc 01       	movw	r26, r24
    11b2:	82 1b       	sub	r24, r18
    11b4:	93 0b       	sbc	r25, r19
    11b6:	a4 0b       	sbc	r26, r20
    11b8:	b5 0b       	sbc	r27, r21
    11ba:	84 83       	std	Z+4, r24	; 0x04
    11bc:	95 83       	std	Z+5, r25	; 0x05
    11be:	a6 83       	std	Z+6, r26	; 0x06
    11c0:	b7 83       	std	Z+7, r27	; 0x07
    11c2:	0d c0       	rjmp	.+26     	; 0x11de <_fpadd_parts+0x20e>
    11c4:	22 0f       	add	r18, r18
    11c6:	33 1f       	adc	r19, r19
    11c8:	44 1f       	adc	r20, r20
    11ca:	55 1f       	adc	r21, r21
    11cc:	24 83       	std	Z+4, r18	; 0x04
    11ce:	35 83       	std	Z+5, r19	; 0x05
    11d0:	46 83       	std	Z+6, r20	; 0x06
    11d2:	57 83       	std	Z+7, r21	; 0x07
    11d4:	82 81       	ldd	r24, Z+2	; 0x02
    11d6:	93 81       	ldd	r25, Z+3	; 0x03
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	93 83       	std	Z+3, r25	; 0x03
    11dc:	82 83       	std	Z+2, r24	; 0x02
    11de:	24 81       	ldd	r18, Z+4	; 0x04
    11e0:	35 81       	ldd	r19, Z+5	; 0x05
    11e2:	46 81       	ldd	r20, Z+6	; 0x06
    11e4:	57 81       	ldd	r21, Z+7	; 0x07
    11e6:	da 01       	movw	r26, r20
    11e8:	c9 01       	movw	r24, r18
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	a1 09       	sbc	r26, r1
    11ee:	b1 09       	sbc	r27, r1
    11f0:	8f 5f       	subi	r24, 0xFF	; 255
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	af 4f       	sbci	r26, 0xFF	; 255
    11f6:	bf 43       	sbci	r27, 0x3F	; 63
    11f8:	28 f3       	brcs	.-54     	; 0x11c4 <_fpadd_parts+0x1f4>
    11fa:	0b c0       	rjmp	.+22     	; 0x1212 <_fpadd_parts+0x242>
    11fc:	91 83       	std	Z+1, r25	; 0x01
    11fe:	33 82       	std	Z+3, r3	; 0x03
    1200:	22 82       	std	Z+2, r2	; 0x02
    1202:	ea 0c       	add	r14, r10
    1204:	fb 1c       	adc	r15, r11
    1206:	0c 1d       	adc	r16, r12
    1208:	1d 1d       	adc	r17, r13
    120a:	e4 82       	std	Z+4, r14	; 0x04
    120c:	f5 82       	std	Z+5, r15	; 0x05
    120e:	06 83       	std	Z+6, r16	; 0x06
    1210:	17 83       	std	Z+7, r17	; 0x07
    1212:	83 e0       	ldi	r24, 0x03	; 3
    1214:	80 83       	st	Z, r24
    1216:	24 81       	ldd	r18, Z+4	; 0x04
    1218:	35 81       	ldd	r19, Z+5	; 0x05
    121a:	46 81       	ldd	r20, Z+6	; 0x06
    121c:	57 81       	ldd	r21, Z+7	; 0x07
    121e:	57 ff       	sbrs	r21, 7
    1220:	1a c0       	rjmp	.+52     	; 0x1256 <_fpadd_parts+0x286>
    1222:	c9 01       	movw	r24, r18
    1224:	aa 27       	eor	r26, r26
    1226:	97 fd       	sbrc	r25, 7
    1228:	a0 95       	com	r26
    122a:	ba 2f       	mov	r27, r26
    122c:	81 70       	andi	r24, 0x01	; 1
    122e:	90 70       	andi	r25, 0x00	; 0
    1230:	a0 70       	andi	r26, 0x00	; 0
    1232:	b0 70       	andi	r27, 0x00	; 0
    1234:	56 95       	lsr	r21
    1236:	47 95       	ror	r20
    1238:	37 95       	ror	r19
    123a:	27 95       	ror	r18
    123c:	82 2b       	or	r24, r18
    123e:	93 2b       	or	r25, r19
    1240:	a4 2b       	or	r26, r20
    1242:	b5 2b       	or	r27, r21
    1244:	84 83       	std	Z+4, r24	; 0x04
    1246:	95 83       	std	Z+5, r25	; 0x05
    1248:	a6 83       	std	Z+6, r26	; 0x06
    124a:	b7 83       	std	Z+7, r27	; 0x07
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	93 81       	ldd	r25, Z+3	; 0x03
    1250:	01 96       	adiw	r24, 0x01	; 1
    1252:	93 83       	std	Z+3, r25	; 0x03
    1254:	82 83       	std	Z+2, r24	; 0x02
    1256:	df 01       	movw	r26, r30
    1258:	01 c0       	rjmp	.+2      	; 0x125c <_fpadd_parts+0x28c>
    125a:	d2 01       	movw	r26, r4
    125c:	cd 01       	movw	r24, r26
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	e2 e1       	ldi	r30, 0x12	; 18
    1264:	0c 94 6a 2b 	jmp	0x56d4	; 0x56d4 <__epilogue_restores__>

00001268 <__subsf3>:
    1268:	a0 e2       	ldi	r26, 0x20	; 32
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	ea e3       	ldi	r30, 0x3A	; 58
    126e:	f9 e0       	ldi	r31, 0x09	; 9
    1270:	0c 94 5a 2b 	jmp	0x56b4	; 0x56b4 <__prologue_saves__+0x18>
    1274:	69 83       	std	Y+1, r22	; 0x01
    1276:	7a 83       	std	Y+2, r23	; 0x02
    1278:	8b 83       	std	Y+3, r24	; 0x03
    127a:	9c 83       	std	Y+4, r25	; 0x04
    127c:	2d 83       	std	Y+5, r18	; 0x05
    127e:	3e 83       	std	Y+6, r19	; 0x06
    1280:	4f 83       	std	Y+7, r20	; 0x07
    1282:	58 87       	std	Y+8, r21	; 0x08
    1284:	e9 e0       	ldi	r30, 0x09	; 9
    1286:	ee 2e       	mov	r14, r30
    1288:	f1 2c       	mov	r15, r1
    128a:	ec 0e       	add	r14, r28
    128c:	fd 1e       	adc	r15, r29
    128e:	ce 01       	movw	r24, r28
    1290:	01 96       	adiw	r24, 0x01	; 1
    1292:	b7 01       	movw	r22, r14
    1294:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    1298:	8e 01       	movw	r16, r28
    129a:	0f 5e       	subi	r16, 0xEF	; 239
    129c:	1f 4f       	sbci	r17, 0xFF	; 255
    129e:	ce 01       	movw	r24, r28
    12a0:	05 96       	adiw	r24, 0x05	; 5
    12a2:	b8 01       	movw	r22, r16
    12a4:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    12a8:	8a 89       	ldd	r24, Y+18	; 0x12
    12aa:	91 e0       	ldi	r25, 0x01	; 1
    12ac:	89 27       	eor	r24, r25
    12ae:	8a 8b       	std	Y+18, r24	; 0x12
    12b0:	c7 01       	movw	r24, r14
    12b2:	b8 01       	movw	r22, r16
    12b4:	ae 01       	movw	r20, r28
    12b6:	47 5e       	subi	r20, 0xE7	; 231
    12b8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ba:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_fpadd_parts>
    12be:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__pack_f>
    12c2:	a0 96       	adiw	r28, 0x20	; 32
    12c4:	e6 e0       	ldi	r30, 0x06	; 6
    12c6:	0c 94 76 2b 	jmp	0x56ec	; 0x56ec <__epilogue_restores__+0x18>

000012ca <__addsf3>:
    12ca:	a0 e2       	ldi	r26, 0x20	; 32
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e6       	ldi	r30, 0x6B	; 107
    12d0:	f9 e0       	ldi	r31, 0x09	; 9
    12d2:	0c 94 5a 2b 	jmp	0x56b4	; 0x56b4 <__prologue_saves__+0x18>
    12d6:	69 83       	std	Y+1, r22	; 0x01
    12d8:	7a 83       	std	Y+2, r23	; 0x02
    12da:	8b 83       	std	Y+3, r24	; 0x03
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	2d 83       	std	Y+5, r18	; 0x05
    12e0:	3e 83       	std	Y+6, r19	; 0x06
    12e2:	4f 83       	std	Y+7, r20	; 0x07
    12e4:	58 87       	std	Y+8, r21	; 0x08
    12e6:	f9 e0       	ldi	r31, 0x09	; 9
    12e8:	ef 2e       	mov	r14, r31
    12ea:	f1 2c       	mov	r15, r1
    12ec:	ec 0e       	add	r14, r28
    12ee:	fd 1e       	adc	r15, r29
    12f0:	ce 01       	movw	r24, r28
    12f2:	01 96       	adiw	r24, 0x01	; 1
    12f4:	b7 01       	movw	r22, r14
    12f6:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    12fa:	8e 01       	movw	r16, r28
    12fc:	0f 5e       	subi	r16, 0xEF	; 239
    12fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1300:	ce 01       	movw	r24, r28
    1302:	05 96       	adiw	r24, 0x05	; 5
    1304:	b8 01       	movw	r22, r16
    1306:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    130a:	c7 01       	movw	r24, r14
    130c:	b8 01       	movw	r22, r16
    130e:	ae 01       	movw	r20, r28
    1310:	47 5e       	subi	r20, 0xE7	; 231
    1312:	5f 4f       	sbci	r21, 0xFF	; 255
    1314:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <_fpadd_parts>
    1318:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__pack_f>
    131c:	a0 96       	adiw	r28, 0x20	; 32
    131e:	e6 e0       	ldi	r30, 0x06	; 6
    1320:	0c 94 76 2b 	jmp	0x56ec	; 0x56ec <__epilogue_restores__+0x18>

00001324 <__mulsf3>:
    1324:	a0 e2       	ldi	r26, 0x20	; 32
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	e8 e9       	ldi	r30, 0x98	; 152
    132a:	f9 e0       	ldi	r31, 0x09	; 9
    132c:	0c 94 4e 2b 	jmp	0x569c	; 0x569c <__prologue_saves__>
    1330:	69 83       	std	Y+1, r22	; 0x01
    1332:	7a 83       	std	Y+2, r23	; 0x02
    1334:	8b 83       	std	Y+3, r24	; 0x03
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	2d 83       	std	Y+5, r18	; 0x05
    133a:	3e 83       	std	Y+6, r19	; 0x06
    133c:	4f 83       	std	Y+7, r20	; 0x07
    133e:	58 87       	std	Y+8, r21	; 0x08
    1340:	ce 01       	movw	r24, r28
    1342:	01 96       	adiw	r24, 0x01	; 1
    1344:	be 01       	movw	r22, r28
    1346:	67 5f       	subi	r22, 0xF7	; 247
    1348:	7f 4f       	sbci	r23, 0xFF	; 255
    134a:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    134e:	ce 01       	movw	r24, r28
    1350:	05 96       	adiw	r24, 0x05	; 5
    1352:	be 01       	movw	r22, r28
    1354:	6f 5e       	subi	r22, 0xEF	; 239
    1356:	7f 4f       	sbci	r23, 0xFF	; 255
    1358:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    135c:	99 85       	ldd	r25, Y+9	; 0x09
    135e:	92 30       	cpi	r25, 0x02	; 2
    1360:	88 f0       	brcs	.+34     	; 0x1384 <__mulsf3+0x60>
    1362:	89 89       	ldd	r24, Y+17	; 0x11
    1364:	82 30       	cpi	r24, 0x02	; 2
    1366:	c8 f0       	brcs	.+50     	; 0x139a <__mulsf3+0x76>
    1368:	94 30       	cpi	r25, 0x04	; 4
    136a:	19 f4       	brne	.+6      	; 0x1372 <__mulsf3+0x4e>
    136c:	82 30       	cpi	r24, 0x02	; 2
    136e:	51 f4       	brne	.+20     	; 0x1384 <__mulsf3+0x60>
    1370:	04 c0       	rjmp	.+8      	; 0x137a <__mulsf3+0x56>
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	29 f4       	brne	.+10     	; 0x1380 <__mulsf3+0x5c>
    1376:	92 30       	cpi	r25, 0x02	; 2
    1378:	81 f4       	brne	.+32     	; 0x139a <__mulsf3+0x76>
    137a:	85 e1       	ldi	r24, 0x15	; 21
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	c6 c0       	rjmp	.+396    	; 0x150c <__mulsf3+0x1e8>
    1380:	92 30       	cpi	r25, 0x02	; 2
    1382:	49 f4       	brne	.+18     	; 0x1396 <__mulsf3+0x72>
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	9a 85       	ldd	r25, Y+10	; 0x0a
    1388:	8a 89       	ldd	r24, Y+18	; 0x12
    138a:	98 13       	cpse	r25, r24
    138c:	21 e0       	ldi	r18, 0x01	; 1
    138e:	2a 87       	std	Y+10, r18	; 0x0a
    1390:	ce 01       	movw	r24, r28
    1392:	09 96       	adiw	r24, 0x09	; 9
    1394:	bb c0       	rjmp	.+374    	; 0x150c <__mulsf3+0x1e8>
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	49 f4       	brne	.+18     	; 0x13ac <__mulsf3+0x88>
    139a:	20 e0       	ldi	r18, 0x00	; 0
    139c:	9a 85       	ldd	r25, Y+10	; 0x0a
    139e:	8a 89       	ldd	r24, Y+18	; 0x12
    13a0:	98 13       	cpse	r25, r24
    13a2:	21 e0       	ldi	r18, 0x01	; 1
    13a4:	2a 8b       	std	Y+18, r18	; 0x12
    13a6:	ce 01       	movw	r24, r28
    13a8:	41 96       	adiw	r24, 0x11	; 17
    13aa:	b0 c0       	rjmp	.+352    	; 0x150c <__mulsf3+0x1e8>
    13ac:	2d 84       	ldd	r2, Y+13	; 0x0d
    13ae:	3e 84       	ldd	r3, Y+14	; 0x0e
    13b0:	4f 84       	ldd	r4, Y+15	; 0x0f
    13b2:	58 88       	ldd	r5, Y+16	; 0x10
    13b4:	6d 88       	ldd	r6, Y+21	; 0x15
    13b6:	7e 88       	ldd	r7, Y+22	; 0x16
    13b8:	8f 88       	ldd	r8, Y+23	; 0x17
    13ba:	98 8c       	ldd	r9, Y+24	; 0x18
    13bc:	ee 24       	eor	r14, r14
    13be:	ff 24       	eor	r15, r15
    13c0:	87 01       	movw	r16, r14
    13c2:	aa 24       	eor	r10, r10
    13c4:	bb 24       	eor	r11, r11
    13c6:	65 01       	movw	r12, r10
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	50 e0       	ldi	r21, 0x00	; 0
    13cc:	60 e0       	ldi	r22, 0x00	; 0
    13ce:	70 e0       	ldi	r23, 0x00	; 0
    13d0:	e0 e0       	ldi	r30, 0x00	; 0
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	c1 01       	movw	r24, r2
    13d6:	81 70       	andi	r24, 0x01	; 1
    13d8:	90 70       	andi	r25, 0x00	; 0
    13da:	89 2b       	or	r24, r25
    13dc:	e9 f0       	breq	.+58     	; 0x1418 <__mulsf3+0xf4>
    13de:	e6 0c       	add	r14, r6
    13e0:	f7 1c       	adc	r15, r7
    13e2:	08 1d       	adc	r16, r8
    13e4:	19 1d       	adc	r17, r9
    13e6:	9a 01       	movw	r18, r20
    13e8:	ab 01       	movw	r20, r22
    13ea:	2a 0d       	add	r18, r10
    13ec:	3b 1d       	adc	r19, r11
    13ee:	4c 1d       	adc	r20, r12
    13f0:	5d 1d       	adc	r21, r13
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	a0 e0       	ldi	r26, 0x00	; 0
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e6 14       	cp	r14, r6
    13fc:	f7 04       	cpc	r15, r7
    13fe:	08 05       	cpc	r16, r8
    1400:	19 05       	cpc	r17, r9
    1402:	20 f4       	brcc	.+8      	; 0x140c <__mulsf3+0xe8>
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	a0 e0       	ldi	r26, 0x00	; 0
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	ba 01       	movw	r22, r20
    140e:	a9 01       	movw	r20, r18
    1410:	48 0f       	add	r20, r24
    1412:	59 1f       	adc	r21, r25
    1414:	6a 1f       	adc	r22, r26
    1416:	7b 1f       	adc	r23, r27
    1418:	aa 0c       	add	r10, r10
    141a:	bb 1c       	adc	r11, r11
    141c:	cc 1c       	adc	r12, r12
    141e:	dd 1c       	adc	r13, r13
    1420:	97 fe       	sbrs	r9, 7
    1422:	08 c0       	rjmp	.+16     	; 0x1434 <__mulsf3+0x110>
    1424:	81 e0       	ldi	r24, 0x01	; 1
    1426:	90 e0       	ldi	r25, 0x00	; 0
    1428:	a0 e0       	ldi	r26, 0x00	; 0
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	a8 2a       	or	r10, r24
    142e:	b9 2a       	or	r11, r25
    1430:	ca 2a       	or	r12, r26
    1432:	db 2a       	or	r13, r27
    1434:	31 96       	adiw	r30, 0x01	; 1
    1436:	e0 32       	cpi	r30, 0x20	; 32
    1438:	f1 05       	cpc	r31, r1
    143a:	49 f0       	breq	.+18     	; 0x144e <__mulsf3+0x12a>
    143c:	66 0c       	add	r6, r6
    143e:	77 1c       	adc	r7, r7
    1440:	88 1c       	adc	r8, r8
    1442:	99 1c       	adc	r9, r9
    1444:	56 94       	lsr	r5
    1446:	47 94       	ror	r4
    1448:	37 94       	ror	r3
    144a:	27 94       	ror	r2
    144c:	c3 cf       	rjmp	.-122    	; 0x13d4 <__mulsf3+0xb0>
    144e:	fa 85       	ldd	r31, Y+10	; 0x0a
    1450:	ea 89       	ldd	r30, Y+18	; 0x12
    1452:	2b 89       	ldd	r18, Y+19	; 0x13
    1454:	3c 89       	ldd	r19, Y+20	; 0x14
    1456:	8b 85       	ldd	r24, Y+11	; 0x0b
    1458:	9c 85       	ldd	r25, Y+12	; 0x0c
    145a:	28 0f       	add	r18, r24
    145c:	39 1f       	adc	r19, r25
    145e:	2e 5f       	subi	r18, 0xFE	; 254
    1460:	3f 4f       	sbci	r19, 0xFF	; 255
    1462:	17 c0       	rjmp	.+46     	; 0x1492 <__mulsf3+0x16e>
    1464:	ca 01       	movw	r24, r20
    1466:	81 70       	andi	r24, 0x01	; 1
    1468:	90 70       	andi	r25, 0x00	; 0
    146a:	89 2b       	or	r24, r25
    146c:	61 f0       	breq	.+24     	; 0x1486 <__mulsf3+0x162>
    146e:	16 95       	lsr	r17
    1470:	07 95       	ror	r16
    1472:	f7 94       	ror	r15
    1474:	e7 94       	ror	r14
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	a0 e0       	ldi	r26, 0x00	; 0
    147c:	b0 e8       	ldi	r27, 0x80	; 128
    147e:	e8 2a       	or	r14, r24
    1480:	f9 2a       	or	r15, r25
    1482:	0a 2b       	or	r16, r26
    1484:	1b 2b       	or	r17, r27
    1486:	76 95       	lsr	r23
    1488:	67 95       	ror	r22
    148a:	57 95       	ror	r21
    148c:	47 95       	ror	r20
    148e:	2f 5f       	subi	r18, 0xFF	; 255
    1490:	3f 4f       	sbci	r19, 0xFF	; 255
    1492:	77 fd       	sbrc	r23, 7
    1494:	e7 cf       	rjmp	.-50     	; 0x1464 <__mulsf3+0x140>
    1496:	0c c0       	rjmp	.+24     	; 0x14b0 <__mulsf3+0x18c>
    1498:	44 0f       	add	r20, r20
    149a:	55 1f       	adc	r21, r21
    149c:	66 1f       	adc	r22, r22
    149e:	77 1f       	adc	r23, r23
    14a0:	17 fd       	sbrc	r17, 7
    14a2:	41 60       	ori	r20, 0x01	; 1
    14a4:	ee 0c       	add	r14, r14
    14a6:	ff 1c       	adc	r15, r15
    14a8:	00 1f       	adc	r16, r16
    14aa:	11 1f       	adc	r17, r17
    14ac:	21 50       	subi	r18, 0x01	; 1
    14ae:	30 40       	sbci	r19, 0x00	; 0
    14b0:	40 30       	cpi	r20, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	59 07       	cpc	r21, r25
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	69 07       	cpc	r22, r25
    14ba:	90 e4       	ldi	r25, 0x40	; 64
    14bc:	79 07       	cpc	r23, r25
    14be:	60 f3       	brcs	.-40     	; 0x1498 <__mulsf3+0x174>
    14c0:	2b 8f       	std	Y+27, r18	; 0x1b
    14c2:	3c 8f       	std	Y+28, r19	; 0x1c
    14c4:	db 01       	movw	r26, r22
    14c6:	ca 01       	movw	r24, r20
    14c8:	8f 77       	andi	r24, 0x7F	; 127
    14ca:	90 70       	andi	r25, 0x00	; 0
    14cc:	a0 70       	andi	r26, 0x00	; 0
    14ce:	b0 70       	andi	r27, 0x00	; 0
    14d0:	80 34       	cpi	r24, 0x40	; 64
    14d2:	91 05       	cpc	r25, r1
    14d4:	a1 05       	cpc	r26, r1
    14d6:	b1 05       	cpc	r27, r1
    14d8:	61 f4       	brne	.+24     	; 0x14f2 <__mulsf3+0x1ce>
    14da:	47 fd       	sbrc	r20, 7
    14dc:	0a c0       	rjmp	.+20     	; 0x14f2 <__mulsf3+0x1ce>
    14de:	e1 14       	cp	r14, r1
    14e0:	f1 04       	cpc	r15, r1
    14e2:	01 05       	cpc	r16, r1
    14e4:	11 05       	cpc	r17, r1
    14e6:	29 f0       	breq	.+10     	; 0x14f2 <__mulsf3+0x1ce>
    14e8:	40 5c       	subi	r20, 0xC0	; 192
    14ea:	5f 4f       	sbci	r21, 0xFF	; 255
    14ec:	6f 4f       	sbci	r22, 0xFF	; 255
    14ee:	7f 4f       	sbci	r23, 0xFF	; 255
    14f0:	40 78       	andi	r20, 0x80	; 128
    14f2:	1a 8e       	std	Y+26, r1	; 0x1a
    14f4:	fe 17       	cp	r31, r30
    14f6:	11 f0       	breq	.+4      	; 0x14fc <__mulsf3+0x1d8>
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	8a 8f       	std	Y+26, r24	; 0x1a
    14fc:	4d 8f       	std	Y+29, r20	; 0x1d
    14fe:	5e 8f       	std	Y+30, r21	; 0x1e
    1500:	6f 8f       	std	Y+31, r22	; 0x1f
    1502:	78 a3       	std	Y+32, r23	; 0x20
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	89 8f       	std	Y+25, r24	; 0x19
    1508:	ce 01       	movw	r24, r28
    150a:	49 96       	adiw	r24, 0x19	; 25
    150c:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__pack_f>
    1510:	a0 96       	adiw	r28, 0x20	; 32
    1512:	e2 e1       	ldi	r30, 0x12	; 18
    1514:	0c 94 6a 2b 	jmp	0x56d4	; 0x56d4 <__epilogue_restores__>

00001518 <__divsf3>:
    1518:	a8 e1       	ldi	r26, 0x18	; 24
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e2 e9       	ldi	r30, 0x92	; 146
    151e:	fa e0       	ldi	r31, 0x0A	; 10
    1520:	0c 94 56 2b 	jmp	0x56ac	; 0x56ac <__prologue_saves__+0x10>
    1524:	69 83       	std	Y+1, r22	; 0x01
    1526:	7a 83       	std	Y+2, r23	; 0x02
    1528:	8b 83       	std	Y+3, r24	; 0x03
    152a:	9c 83       	std	Y+4, r25	; 0x04
    152c:	2d 83       	std	Y+5, r18	; 0x05
    152e:	3e 83       	std	Y+6, r19	; 0x06
    1530:	4f 83       	std	Y+7, r20	; 0x07
    1532:	58 87       	std	Y+8, r21	; 0x08
    1534:	b9 e0       	ldi	r27, 0x09	; 9
    1536:	eb 2e       	mov	r14, r27
    1538:	f1 2c       	mov	r15, r1
    153a:	ec 0e       	add	r14, r28
    153c:	fd 1e       	adc	r15, r29
    153e:	ce 01       	movw	r24, r28
    1540:	01 96       	adiw	r24, 0x01	; 1
    1542:	b7 01       	movw	r22, r14
    1544:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    1548:	8e 01       	movw	r16, r28
    154a:	0f 5e       	subi	r16, 0xEF	; 239
    154c:	1f 4f       	sbci	r17, 0xFF	; 255
    154e:	ce 01       	movw	r24, r28
    1550:	05 96       	adiw	r24, 0x05	; 5
    1552:	b8 01       	movw	r22, r16
    1554:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    1558:	29 85       	ldd	r18, Y+9	; 0x09
    155a:	22 30       	cpi	r18, 0x02	; 2
    155c:	08 f4       	brcc	.+2      	; 0x1560 <__divsf3+0x48>
    155e:	7e c0       	rjmp	.+252    	; 0x165c <__divsf3+0x144>
    1560:	39 89       	ldd	r19, Y+17	; 0x11
    1562:	32 30       	cpi	r19, 0x02	; 2
    1564:	10 f4       	brcc	.+4      	; 0x156a <__divsf3+0x52>
    1566:	b8 01       	movw	r22, r16
    1568:	7c c0       	rjmp	.+248    	; 0x1662 <__divsf3+0x14a>
    156a:	8a 85       	ldd	r24, Y+10	; 0x0a
    156c:	9a 89       	ldd	r25, Y+18	; 0x12
    156e:	89 27       	eor	r24, r25
    1570:	8a 87       	std	Y+10, r24	; 0x0a
    1572:	24 30       	cpi	r18, 0x04	; 4
    1574:	11 f0       	breq	.+4      	; 0x157a <__divsf3+0x62>
    1576:	22 30       	cpi	r18, 0x02	; 2
    1578:	31 f4       	brne	.+12     	; 0x1586 <__divsf3+0x6e>
    157a:	23 17       	cp	r18, r19
    157c:	09 f0       	breq	.+2      	; 0x1580 <__divsf3+0x68>
    157e:	6e c0       	rjmp	.+220    	; 0x165c <__divsf3+0x144>
    1580:	65 e1       	ldi	r22, 0x15	; 21
    1582:	71 e0       	ldi	r23, 0x01	; 1
    1584:	6e c0       	rjmp	.+220    	; 0x1662 <__divsf3+0x14a>
    1586:	34 30       	cpi	r19, 0x04	; 4
    1588:	39 f4       	brne	.+14     	; 0x1598 <__divsf3+0x80>
    158a:	1d 86       	std	Y+13, r1	; 0x0d
    158c:	1e 86       	std	Y+14, r1	; 0x0e
    158e:	1f 86       	std	Y+15, r1	; 0x0f
    1590:	18 8a       	std	Y+16, r1	; 0x10
    1592:	1c 86       	std	Y+12, r1	; 0x0c
    1594:	1b 86       	std	Y+11, r1	; 0x0b
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <__divsf3+0x88>
    1598:	32 30       	cpi	r19, 0x02	; 2
    159a:	21 f4       	brne	.+8      	; 0x15a4 <__divsf3+0x8c>
    159c:	84 e0       	ldi	r24, 0x04	; 4
    159e:	89 87       	std	Y+9, r24	; 0x09
    15a0:	b7 01       	movw	r22, r14
    15a2:	5f c0       	rjmp	.+190    	; 0x1662 <__divsf3+0x14a>
    15a4:	2b 85       	ldd	r18, Y+11	; 0x0b
    15a6:	3c 85       	ldd	r19, Y+12	; 0x0c
    15a8:	8b 89       	ldd	r24, Y+19	; 0x13
    15aa:	9c 89       	ldd	r25, Y+20	; 0x14
    15ac:	28 1b       	sub	r18, r24
    15ae:	39 0b       	sbc	r19, r25
    15b0:	3c 87       	std	Y+12, r19	; 0x0c
    15b2:	2b 87       	std	Y+11, r18	; 0x0b
    15b4:	ed 84       	ldd	r14, Y+13	; 0x0d
    15b6:	fe 84       	ldd	r15, Y+14	; 0x0e
    15b8:	0f 85       	ldd	r16, Y+15	; 0x0f
    15ba:	18 89       	ldd	r17, Y+16	; 0x10
    15bc:	ad 88       	ldd	r10, Y+21	; 0x15
    15be:	be 88       	ldd	r11, Y+22	; 0x16
    15c0:	cf 88       	ldd	r12, Y+23	; 0x17
    15c2:	d8 8c       	ldd	r13, Y+24	; 0x18
    15c4:	ea 14       	cp	r14, r10
    15c6:	fb 04       	cpc	r15, r11
    15c8:	0c 05       	cpc	r16, r12
    15ca:	1d 05       	cpc	r17, r13
    15cc:	40 f4       	brcc	.+16     	; 0x15de <__divsf3+0xc6>
    15ce:	ee 0c       	add	r14, r14
    15d0:	ff 1c       	adc	r15, r15
    15d2:	00 1f       	adc	r16, r16
    15d4:	11 1f       	adc	r17, r17
    15d6:	21 50       	subi	r18, 0x01	; 1
    15d8:	30 40       	sbci	r19, 0x00	; 0
    15da:	3c 87       	std	Y+12, r19	; 0x0c
    15dc:	2b 87       	std	Y+11, r18	; 0x0b
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	40 e0       	ldi	r20, 0x00	; 0
    15e4:	50 e0       	ldi	r21, 0x00	; 0
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	a0 e0       	ldi	r26, 0x00	; 0
    15ec:	b0 e4       	ldi	r27, 0x40	; 64
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	ea 14       	cp	r14, r10
    15f4:	fb 04       	cpc	r15, r11
    15f6:	0c 05       	cpc	r16, r12
    15f8:	1d 05       	cpc	r17, r13
    15fa:	40 f0       	brcs	.+16     	; 0x160c <__divsf3+0xf4>
    15fc:	28 2b       	or	r18, r24
    15fe:	39 2b       	or	r19, r25
    1600:	4a 2b       	or	r20, r26
    1602:	5b 2b       	or	r21, r27
    1604:	ea 18       	sub	r14, r10
    1606:	fb 08       	sbc	r15, r11
    1608:	0c 09       	sbc	r16, r12
    160a:	1d 09       	sbc	r17, r13
    160c:	b6 95       	lsr	r27
    160e:	a7 95       	ror	r26
    1610:	97 95       	ror	r25
    1612:	87 95       	ror	r24
    1614:	ee 0c       	add	r14, r14
    1616:	ff 1c       	adc	r15, r15
    1618:	00 1f       	adc	r16, r16
    161a:	11 1f       	adc	r17, r17
    161c:	6f 5f       	subi	r22, 0xFF	; 255
    161e:	7f 4f       	sbci	r23, 0xFF	; 255
    1620:	6f 31       	cpi	r22, 0x1F	; 31
    1622:	71 05       	cpc	r23, r1
    1624:	31 f7       	brne	.-52     	; 0x15f2 <__divsf3+0xda>
    1626:	da 01       	movw	r26, r20
    1628:	c9 01       	movw	r24, r18
    162a:	8f 77       	andi	r24, 0x7F	; 127
    162c:	90 70       	andi	r25, 0x00	; 0
    162e:	a0 70       	andi	r26, 0x00	; 0
    1630:	b0 70       	andi	r27, 0x00	; 0
    1632:	80 34       	cpi	r24, 0x40	; 64
    1634:	91 05       	cpc	r25, r1
    1636:	a1 05       	cpc	r26, r1
    1638:	b1 05       	cpc	r27, r1
    163a:	61 f4       	brne	.+24     	; 0x1654 <__divsf3+0x13c>
    163c:	27 fd       	sbrc	r18, 7
    163e:	0a c0       	rjmp	.+20     	; 0x1654 <__divsf3+0x13c>
    1640:	e1 14       	cp	r14, r1
    1642:	f1 04       	cpc	r15, r1
    1644:	01 05       	cpc	r16, r1
    1646:	11 05       	cpc	r17, r1
    1648:	29 f0       	breq	.+10     	; 0x1654 <__divsf3+0x13c>
    164a:	20 5c       	subi	r18, 0xC0	; 192
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	4f 4f       	sbci	r20, 0xFF	; 255
    1650:	5f 4f       	sbci	r21, 0xFF	; 255
    1652:	20 78       	andi	r18, 0x80	; 128
    1654:	2d 87       	std	Y+13, r18	; 0x0d
    1656:	3e 87       	std	Y+14, r19	; 0x0e
    1658:	4f 87       	std	Y+15, r20	; 0x0f
    165a:	58 8b       	std	Y+16, r21	; 0x10
    165c:	be 01       	movw	r22, r28
    165e:	67 5f       	subi	r22, 0xF7	; 247
    1660:	7f 4f       	sbci	r23, 0xFF	; 255
    1662:	cb 01       	movw	r24, r22
    1664:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__pack_f>
    1668:	68 96       	adiw	r28, 0x18	; 24
    166a:	ea e0       	ldi	r30, 0x0A	; 10
    166c:	0c 94 72 2b 	jmp	0x56e4	; 0x56e4 <__epilogue_restores__+0x10>

00001670 <__gtsf2>:
    1670:	a8 e1       	ldi	r26, 0x18	; 24
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ee e3       	ldi	r30, 0x3E	; 62
    1676:	fb e0       	ldi	r31, 0x0B	; 11
    1678:	0c 94 5a 2b 	jmp	0x56b4	; 0x56b4 <__prologue_saves__+0x18>
    167c:	69 83       	std	Y+1, r22	; 0x01
    167e:	7a 83       	std	Y+2, r23	; 0x02
    1680:	8b 83       	std	Y+3, r24	; 0x03
    1682:	9c 83       	std	Y+4, r25	; 0x04
    1684:	2d 83       	std	Y+5, r18	; 0x05
    1686:	3e 83       	std	Y+6, r19	; 0x06
    1688:	4f 83       	std	Y+7, r20	; 0x07
    168a:	58 87       	std	Y+8, r21	; 0x08
    168c:	89 e0       	ldi	r24, 0x09	; 9
    168e:	e8 2e       	mov	r14, r24
    1690:	f1 2c       	mov	r15, r1
    1692:	ec 0e       	add	r14, r28
    1694:	fd 1e       	adc	r15, r29
    1696:	ce 01       	movw	r24, r28
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	b7 01       	movw	r22, r14
    169c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    16a0:	8e 01       	movw	r16, r28
    16a2:	0f 5e       	subi	r16, 0xEF	; 239
    16a4:	1f 4f       	sbci	r17, 0xFF	; 255
    16a6:	ce 01       	movw	r24, r28
    16a8:	05 96       	adiw	r24, 0x05	; 5
    16aa:	b8 01       	movw	r22, r16
    16ac:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    16b0:	89 85       	ldd	r24, Y+9	; 0x09
    16b2:	82 30       	cpi	r24, 0x02	; 2
    16b4:	40 f0       	brcs	.+16     	; 0x16c6 <__gtsf2+0x56>
    16b6:	89 89       	ldd	r24, Y+17	; 0x11
    16b8:	82 30       	cpi	r24, 0x02	; 2
    16ba:	28 f0       	brcs	.+10     	; 0x16c6 <__gtsf2+0x56>
    16bc:	c7 01       	movw	r24, r14
    16be:	b8 01       	movw	r22, r16
    16c0:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__fpcmp_parts_f>
    16c4:	01 c0       	rjmp	.+2      	; 0x16c8 <__gtsf2+0x58>
    16c6:	8f ef       	ldi	r24, 0xFF	; 255
    16c8:	68 96       	adiw	r28, 0x18	; 24
    16ca:	e6 e0       	ldi	r30, 0x06	; 6
    16cc:	0c 94 76 2b 	jmp	0x56ec	; 0x56ec <__epilogue_restores__+0x18>

000016d0 <__gesf2>:
    16d0:	a8 e1       	ldi	r26, 0x18	; 24
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	ee e6       	ldi	r30, 0x6E	; 110
    16d6:	fb e0       	ldi	r31, 0x0B	; 11
    16d8:	0c 94 5a 2b 	jmp	0x56b4	; 0x56b4 <__prologue_saves__+0x18>
    16dc:	69 83       	std	Y+1, r22	; 0x01
    16de:	7a 83       	std	Y+2, r23	; 0x02
    16e0:	8b 83       	std	Y+3, r24	; 0x03
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	2d 83       	std	Y+5, r18	; 0x05
    16e6:	3e 83       	std	Y+6, r19	; 0x06
    16e8:	4f 83       	std	Y+7, r20	; 0x07
    16ea:	58 87       	std	Y+8, r21	; 0x08
    16ec:	89 e0       	ldi	r24, 0x09	; 9
    16ee:	e8 2e       	mov	r14, r24
    16f0:	f1 2c       	mov	r15, r1
    16f2:	ec 0e       	add	r14, r28
    16f4:	fd 1e       	adc	r15, r29
    16f6:	ce 01       	movw	r24, r28
    16f8:	01 96       	adiw	r24, 0x01	; 1
    16fa:	b7 01       	movw	r22, r14
    16fc:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    1700:	8e 01       	movw	r16, r28
    1702:	0f 5e       	subi	r16, 0xEF	; 239
    1704:	1f 4f       	sbci	r17, 0xFF	; 255
    1706:	ce 01       	movw	r24, r28
    1708:	05 96       	adiw	r24, 0x05	; 5
    170a:	b8 01       	movw	r22, r16
    170c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	40 f0       	brcs	.+16     	; 0x1726 <__gesf2+0x56>
    1716:	89 89       	ldd	r24, Y+17	; 0x11
    1718:	82 30       	cpi	r24, 0x02	; 2
    171a:	28 f0       	brcs	.+10     	; 0x1726 <__gesf2+0x56>
    171c:	c7 01       	movw	r24, r14
    171e:	b8 01       	movw	r22, r16
    1720:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__fpcmp_parts_f>
    1724:	01 c0       	rjmp	.+2      	; 0x1728 <__gesf2+0x58>
    1726:	8f ef       	ldi	r24, 0xFF	; 255
    1728:	68 96       	adiw	r28, 0x18	; 24
    172a:	e6 e0       	ldi	r30, 0x06	; 6
    172c:	0c 94 76 2b 	jmp	0x56ec	; 0x56ec <__epilogue_restores__+0x18>

00001730 <__ltsf2>:
    1730:	a8 e1       	ldi	r26, 0x18	; 24
    1732:	b0 e0       	ldi	r27, 0x00	; 0
    1734:	ee e9       	ldi	r30, 0x9E	; 158
    1736:	fb e0       	ldi	r31, 0x0B	; 11
    1738:	0c 94 5a 2b 	jmp	0x56b4	; 0x56b4 <__prologue_saves__+0x18>
    173c:	69 83       	std	Y+1, r22	; 0x01
    173e:	7a 83       	std	Y+2, r23	; 0x02
    1740:	8b 83       	std	Y+3, r24	; 0x03
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	2d 83       	std	Y+5, r18	; 0x05
    1746:	3e 83       	std	Y+6, r19	; 0x06
    1748:	4f 83       	std	Y+7, r20	; 0x07
    174a:	58 87       	std	Y+8, r21	; 0x08
    174c:	89 e0       	ldi	r24, 0x09	; 9
    174e:	e8 2e       	mov	r14, r24
    1750:	f1 2c       	mov	r15, r1
    1752:	ec 0e       	add	r14, r28
    1754:	fd 1e       	adc	r15, r29
    1756:	ce 01       	movw	r24, r28
    1758:	01 96       	adiw	r24, 0x01	; 1
    175a:	b7 01       	movw	r22, r14
    175c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    1760:	8e 01       	movw	r16, r28
    1762:	0f 5e       	subi	r16, 0xEF	; 239
    1764:	1f 4f       	sbci	r17, 0xFF	; 255
    1766:	ce 01       	movw	r24, r28
    1768:	05 96       	adiw	r24, 0x05	; 5
    176a:	b8 01       	movw	r22, r16
    176c:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    1770:	89 85       	ldd	r24, Y+9	; 0x09
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	40 f0       	brcs	.+16     	; 0x1786 <__ltsf2+0x56>
    1776:	89 89       	ldd	r24, Y+17	; 0x11
    1778:	82 30       	cpi	r24, 0x02	; 2
    177a:	28 f0       	brcs	.+10     	; 0x1786 <__ltsf2+0x56>
    177c:	c7 01       	movw	r24, r14
    177e:	b8 01       	movw	r22, r16
    1780:	0e 94 69 0d 	call	0x1ad2	; 0x1ad2 <__fpcmp_parts_f>
    1784:	01 c0       	rjmp	.+2      	; 0x1788 <__ltsf2+0x58>
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	68 96       	adiw	r28, 0x18	; 24
    178a:	e6 e0       	ldi	r30, 0x06	; 6
    178c:	0c 94 76 2b 	jmp	0x56ec	; 0x56ec <__epilogue_restores__+0x18>

00001790 <__fixsfsi>:
    1790:	ac e0       	ldi	r26, 0x0C	; 12
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	ee ec       	ldi	r30, 0xCE	; 206
    1796:	fb e0       	ldi	r31, 0x0B	; 11
    1798:	0c 94 5e 2b 	jmp	0x56bc	; 0x56bc <__prologue_saves__+0x20>
    179c:	69 83       	std	Y+1, r22	; 0x01
    179e:	7a 83       	std	Y+2, r23	; 0x02
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	ce 01       	movw	r24, r28
    17a6:	01 96       	adiw	r24, 0x01	; 1
    17a8:	be 01       	movw	r22, r28
    17aa:	6b 5f       	subi	r22, 0xFB	; 251
    17ac:	7f 4f       	sbci	r23, 0xFF	; 255
    17ae:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <__unpack_f>
    17b2:	8d 81       	ldd	r24, Y+5	; 0x05
    17b4:	82 30       	cpi	r24, 0x02	; 2
    17b6:	61 f1       	breq	.+88     	; 0x1810 <__fixsfsi+0x80>
    17b8:	82 30       	cpi	r24, 0x02	; 2
    17ba:	50 f1       	brcs	.+84     	; 0x1810 <__fixsfsi+0x80>
    17bc:	84 30       	cpi	r24, 0x04	; 4
    17be:	21 f4       	brne	.+8      	; 0x17c8 <__fixsfsi+0x38>
    17c0:	8e 81       	ldd	r24, Y+6	; 0x06
    17c2:	88 23       	and	r24, r24
    17c4:	51 f1       	breq	.+84     	; 0x181a <__fixsfsi+0x8a>
    17c6:	2e c0       	rjmp	.+92     	; 0x1824 <__fixsfsi+0x94>
    17c8:	2f 81       	ldd	r18, Y+7	; 0x07
    17ca:	38 85       	ldd	r19, Y+8	; 0x08
    17cc:	37 fd       	sbrc	r19, 7
    17ce:	20 c0       	rjmp	.+64     	; 0x1810 <__fixsfsi+0x80>
    17d0:	6e 81       	ldd	r22, Y+6	; 0x06
    17d2:	2f 31       	cpi	r18, 0x1F	; 31
    17d4:	31 05       	cpc	r19, r1
    17d6:	1c f0       	brlt	.+6      	; 0x17de <__fixsfsi+0x4e>
    17d8:	66 23       	and	r22, r22
    17da:	f9 f0       	breq	.+62     	; 0x181a <__fixsfsi+0x8a>
    17dc:	23 c0       	rjmp	.+70     	; 0x1824 <__fixsfsi+0x94>
    17de:	8e e1       	ldi	r24, 0x1E	; 30
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	82 1b       	sub	r24, r18
    17e4:	93 0b       	sbc	r25, r19
    17e6:	29 85       	ldd	r18, Y+9	; 0x09
    17e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    17ea:	4b 85       	ldd	r20, Y+11	; 0x0b
    17ec:	5c 85       	ldd	r21, Y+12	; 0x0c
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <__fixsfsi+0x68>
    17f0:	56 95       	lsr	r21
    17f2:	47 95       	ror	r20
    17f4:	37 95       	ror	r19
    17f6:	27 95       	ror	r18
    17f8:	8a 95       	dec	r24
    17fa:	d2 f7       	brpl	.-12     	; 0x17f0 <__fixsfsi+0x60>
    17fc:	66 23       	and	r22, r22
    17fe:	b1 f0       	breq	.+44     	; 0x182c <__fixsfsi+0x9c>
    1800:	50 95       	com	r21
    1802:	40 95       	com	r20
    1804:	30 95       	com	r19
    1806:	21 95       	neg	r18
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	4f 4f       	sbci	r20, 0xFF	; 255
    180c:	5f 4f       	sbci	r21, 0xFF	; 255
    180e:	0e c0       	rjmp	.+28     	; 0x182c <__fixsfsi+0x9c>
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e0       	ldi	r20, 0x00	; 0
    1816:	50 e0       	ldi	r21, 0x00	; 0
    1818:	09 c0       	rjmp	.+18     	; 0x182c <__fixsfsi+0x9c>
    181a:	2f ef       	ldi	r18, 0xFF	; 255
    181c:	3f ef       	ldi	r19, 0xFF	; 255
    181e:	4f ef       	ldi	r20, 0xFF	; 255
    1820:	5f e7       	ldi	r21, 0x7F	; 127
    1822:	04 c0       	rjmp	.+8      	; 0x182c <__fixsfsi+0x9c>
    1824:	20 e0       	ldi	r18, 0x00	; 0
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	40 e0       	ldi	r20, 0x00	; 0
    182a:	50 e8       	ldi	r21, 0x80	; 128
    182c:	b9 01       	movw	r22, r18
    182e:	ca 01       	movw	r24, r20
    1830:	2c 96       	adiw	r28, 0x0c	; 12
    1832:	e2 e0       	ldi	r30, 0x02	; 2
    1834:	0c 94 7a 2b 	jmp	0x56f4	; 0x56f4 <__epilogue_restores__+0x20>

00001838 <__pack_f>:
    1838:	df 92       	push	r13
    183a:	ef 92       	push	r14
    183c:	ff 92       	push	r15
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	fc 01       	movw	r30, r24
    1844:	e4 80       	ldd	r14, Z+4	; 0x04
    1846:	f5 80       	ldd	r15, Z+5	; 0x05
    1848:	06 81       	ldd	r16, Z+6	; 0x06
    184a:	17 81       	ldd	r17, Z+7	; 0x07
    184c:	d1 80       	ldd	r13, Z+1	; 0x01
    184e:	80 81       	ld	r24, Z
    1850:	82 30       	cpi	r24, 0x02	; 2
    1852:	48 f4       	brcc	.+18     	; 0x1866 <__pack_f+0x2e>
    1854:	80 e0       	ldi	r24, 0x00	; 0
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	a0 e1       	ldi	r26, 0x10	; 16
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e8 2a       	or	r14, r24
    185e:	f9 2a       	or	r15, r25
    1860:	0a 2b       	or	r16, r26
    1862:	1b 2b       	or	r17, r27
    1864:	a5 c0       	rjmp	.+330    	; 0x19b0 <__pack_f+0x178>
    1866:	84 30       	cpi	r24, 0x04	; 4
    1868:	09 f4       	brne	.+2      	; 0x186c <__pack_f+0x34>
    186a:	9f c0       	rjmp	.+318    	; 0x19aa <__pack_f+0x172>
    186c:	82 30       	cpi	r24, 0x02	; 2
    186e:	21 f4       	brne	.+8      	; 0x1878 <__pack_f+0x40>
    1870:	ee 24       	eor	r14, r14
    1872:	ff 24       	eor	r15, r15
    1874:	87 01       	movw	r16, r14
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <__pack_f+0x4a>
    1878:	e1 14       	cp	r14, r1
    187a:	f1 04       	cpc	r15, r1
    187c:	01 05       	cpc	r16, r1
    187e:	11 05       	cpc	r17, r1
    1880:	19 f4       	brne	.+6      	; 0x1888 <__pack_f+0x50>
    1882:	e0 e0       	ldi	r30, 0x00	; 0
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	96 c0       	rjmp	.+300    	; 0x19b4 <__pack_f+0x17c>
    1888:	62 81       	ldd	r22, Z+2	; 0x02
    188a:	73 81       	ldd	r23, Z+3	; 0x03
    188c:	9f ef       	ldi	r25, 0xFF	; 255
    188e:	62 38       	cpi	r22, 0x82	; 130
    1890:	79 07       	cpc	r23, r25
    1892:	0c f0       	brlt	.+2      	; 0x1896 <__pack_f+0x5e>
    1894:	5b c0       	rjmp	.+182    	; 0x194c <__pack_f+0x114>
    1896:	22 e8       	ldi	r18, 0x82	; 130
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	26 1b       	sub	r18, r22
    189c:	37 0b       	sbc	r19, r23
    189e:	2a 31       	cpi	r18, 0x1A	; 26
    18a0:	31 05       	cpc	r19, r1
    18a2:	2c f0       	brlt	.+10     	; 0x18ae <__pack_f+0x76>
    18a4:	20 e0       	ldi	r18, 0x00	; 0
    18a6:	30 e0       	ldi	r19, 0x00	; 0
    18a8:	40 e0       	ldi	r20, 0x00	; 0
    18aa:	50 e0       	ldi	r21, 0x00	; 0
    18ac:	2a c0       	rjmp	.+84     	; 0x1902 <__pack_f+0xca>
    18ae:	b8 01       	movw	r22, r16
    18b0:	a7 01       	movw	r20, r14
    18b2:	02 2e       	mov	r0, r18
    18b4:	04 c0       	rjmp	.+8      	; 0x18be <__pack_f+0x86>
    18b6:	76 95       	lsr	r23
    18b8:	67 95       	ror	r22
    18ba:	57 95       	ror	r21
    18bc:	47 95       	ror	r20
    18be:	0a 94       	dec	r0
    18c0:	d2 f7       	brpl	.-12     	; 0x18b6 <__pack_f+0x7e>
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e0       	ldi	r26, 0x00	; 0
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	04 c0       	rjmp	.+8      	; 0x18d4 <__pack_f+0x9c>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	aa 1f       	adc	r26, r26
    18d2:	bb 1f       	adc	r27, r27
    18d4:	2a 95       	dec	r18
    18d6:	d2 f7       	brpl	.-12     	; 0x18cc <__pack_f+0x94>
    18d8:	01 97       	sbiw	r24, 0x01	; 1
    18da:	a1 09       	sbc	r26, r1
    18dc:	b1 09       	sbc	r27, r1
    18de:	8e 21       	and	r24, r14
    18e0:	9f 21       	and	r25, r15
    18e2:	a0 23       	and	r26, r16
    18e4:	b1 23       	and	r27, r17
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	a1 05       	cpc	r26, r1
    18ea:	b1 05       	cpc	r27, r1
    18ec:	21 f0       	breq	.+8      	; 0x18f6 <__pack_f+0xbe>
    18ee:	81 e0       	ldi	r24, 0x01	; 1
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a0 e0       	ldi	r26, 0x00	; 0
    18f4:	b0 e0       	ldi	r27, 0x00	; 0
    18f6:	9a 01       	movw	r18, r20
    18f8:	ab 01       	movw	r20, r22
    18fa:	28 2b       	or	r18, r24
    18fc:	39 2b       	or	r19, r25
    18fe:	4a 2b       	or	r20, r26
    1900:	5b 2b       	or	r21, r27
    1902:	da 01       	movw	r26, r20
    1904:	c9 01       	movw	r24, r18
    1906:	8f 77       	andi	r24, 0x7F	; 127
    1908:	90 70       	andi	r25, 0x00	; 0
    190a:	a0 70       	andi	r26, 0x00	; 0
    190c:	b0 70       	andi	r27, 0x00	; 0
    190e:	80 34       	cpi	r24, 0x40	; 64
    1910:	91 05       	cpc	r25, r1
    1912:	a1 05       	cpc	r26, r1
    1914:	b1 05       	cpc	r27, r1
    1916:	39 f4       	brne	.+14     	; 0x1926 <__pack_f+0xee>
    1918:	27 ff       	sbrs	r18, 7
    191a:	09 c0       	rjmp	.+18     	; 0x192e <__pack_f+0xf6>
    191c:	20 5c       	subi	r18, 0xC0	; 192
    191e:	3f 4f       	sbci	r19, 0xFF	; 255
    1920:	4f 4f       	sbci	r20, 0xFF	; 255
    1922:	5f 4f       	sbci	r21, 0xFF	; 255
    1924:	04 c0       	rjmp	.+8      	; 0x192e <__pack_f+0xf6>
    1926:	21 5c       	subi	r18, 0xC1	; 193
    1928:	3f 4f       	sbci	r19, 0xFF	; 255
    192a:	4f 4f       	sbci	r20, 0xFF	; 255
    192c:	5f 4f       	sbci	r21, 0xFF	; 255
    192e:	e0 e0       	ldi	r30, 0x00	; 0
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	20 30       	cpi	r18, 0x00	; 0
    1934:	a0 e0       	ldi	r26, 0x00	; 0
    1936:	3a 07       	cpc	r19, r26
    1938:	a0 e0       	ldi	r26, 0x00	; 0
    193a:	4a 07       	cpc	r20, r26
    193c:	a0 e4       	ldi	r26, 0x40	; 64
    193e:	5a 07       	cpc	r21, r26
    1940:	10 f0       	brcs	.+4      	; 0x1946 <__pack_f+0x10e>
    1942:	e1 e0       	ldi	r30, 0x01	; 1
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	79 01       	movw	r14, r18
    1948:	8a 01       	movw	r16, r20
    194a:	27 c0       	rjmp	.+78     	; 0x199a <__pack_f+0x162>
    194c:	60 38       	cpi	r22, 0x80	; 128
    194e:	71 05       	cpc	r23, r1
    1950:	64 f5       	brge	.+88     	; 0x19aa <__pack_f+0x172>
    1952:	fb 01       	movw	r30, r22
    1954:	e1 58       	subi	r30, 0x81	; 129
    1956:	ff 4f       	sbci	r31, 0xFF	; 255
    1958:	d8 01       	movw	r26, r16
    195a:	c7 01       	movw	r24, r14
    195c:	8f 77       	andi	r24, 0x7F	; 127
    195e:	90 70       	andi	r25, 0x00	; 0
    1960:	a0 70       	andi	r26, 0x00	; 0
    1962:	b0 70       	andi	r27, 0x00	; 0
    1964:	80 34       	cpi	r24, 0x40	; 64
    1966:	91 05       	cpc	r25, r1
    1968:	a1 05       	cpc	r26, r1
    196a:	b1 05       	cpc	r27, r1
    196c:	39 f4       	brne	.+14     	; 0x197c <__pack_f+0x144>
    196e:	e7 fe       	sbrs	r14, 7
    1970:	0d c0       	rjmp	.+26     	; 0x198c <__pack_f+0x154>
    1972:	80 e4       	ldi	r24, 0x40	; 64
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	a0 e0       	ldi	r26, 0x00	; 0
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	04 c0       	rjmp	.+8      	; 0x1984 <__pack_f+0x14c>
    197c:	8f e3       	ldi	r24, 0x3F	; 63
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	a0 e0       	ldi	r26, 0x00	; 0
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e8 0e       	add	r14, r24
    1986:	f9 1e       	adc	r15, r25
    1988:	0a 1f       	adc	r16, r26
    198a:	1b 1f       	adc	r17, r27
    198c:	17 ff       	sbrs	r17, 7
    198e:	05 c0       	rjmp	.+10     	; 0x199a <__pack_f+0x162>
    1990:	16 95       	lsr	r17
    1992:	07 95       	ror	r16
    1994:	f7 94       	ror	r15
    1996:	e7 94       	ror	r14
    1998:	31 96       	adiw	r30, 0x01	; 1
    199a:	87 e0       	ldi	r24, 0x07	; 7
    199c:	16 95       	lsr	r17
    199e:	07 95       	ror	r16
    19a0:	f7 94       	ror	r15
    19a2:	e7 94       	ror	r14
    19a4:	8a 95       	dec	r24
    19a6:	d1 f7       	brne	.-12     	; 0x199c <__pack_f+0x164>
    19a8:	05 c0       	rjmp	.+10     	; 0x19b4 <__pack_f+0x17c>
    19aa:	ee 24       	eor	r14, r14
    19ac:	ff 24       	eor	r15, r15
    19ae:	87 01       	movw	r16, r14
    19b0:	ef ef       	ldi	r30, 0xFF	; 255
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	6e 2f       	mov	r22, r30
    19b6:	67 95       	ror	r22
    19b8:	66 27       	eor	r22, r22
    19ba:	67 95       	ror	r22
    19bc:	90 2f       	mov	r25, r16
    19be:	9f 77       	andi	r25, 0x7F	; 127
    19c0:	d7 94       	ror	r13
    19c2:	dd 24       	eor	r13, r13
    19c4:	d7 94       	ror	r13
    19c6:	8e 2f       	mov	r24, r30
    19c8:	86 95       	lsr	r24
    19ca:	49 2f       	mov	r20, r25
    19cc:	46 2b       	or	r20, r22
    19ce:	58 2f       	mov	r21, r24
    19d0:	5d 29       	or	r21, r13
    19d2:	b7 01       	movw	r22, r14
    19d4:	ca 01       	movw	r24, r20
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	08 95       	ret

000019e2 <__unpack_f>:
    19e2:	fc 01       	movw	r30, r24
    19e4:	db 01       	movw	r26, r22
    19e6:	40 81       	ld	r20, Z
    19e8:	51 81       	ldd	r21, Z+1	; 0x01
    19ea:	22 81       	ldd	r18, Z+2	; 0x02
    19ec:	62 2f       	mov	r22, r18
    19ee:	6f 77       	andi	r22, 0x7F	; 127
    19f0:	70 e0       	ldi	r23, 0x00	; 0
    19f2:	22 1f       	adc	r18, r18
    19f4:	22 27       	eor	r18, r18
    19f6:	22 1f       	adc	r18, r18
    19f8:	93 81       	ldd	r25, Z+3	; 0x03
    19fa:	89 2f       	mov	r24, r25
    19fc:	88 0f       	add	r24, r24
    19fe:	82 2b       	or	r24, r18
    1a00:	28 2f       	mov	r18, r24
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	99 1f       	adc	r25, r25
    1a06:	99 27       	eor	r25, r25
    1a08:	99 1f       	adc	r25, r25
    1a0a:	11 96       	adiw	r26, 0x01	; 1
    1a0c:	9c 93       	st	X, r25
    1a0e:	11 97       	sbiw	r26, 0x01	; 1
    1a10:	21 15       	cp	r18, r1
    1a12:	31 05       	cpc	r19, r1
    1a14:	a9 f5       	brne	.+106    	; 0x1a80 <__unpack_f+0x9e>
    1a16:	41 15       	cp	r20, r1
    1a18:	51 05       	cpc	r21, r1
    1a1a:	61 05       	cpc	r22, r1
    1a1c:	71 05       	cpc	r23, r1
    1a1e:	11 f4       	brne	.+4      	; 0x1a24 <__unpack_f+0x42>
    1a20:	82 e0       	ldi	r24, 0x02	; 2
    1a22:	37 c0       	rjmp	.+110    	; 0x1a92 <__unpack_f+0xb0>
    1a24:	82 e8       	ldi	r24, 0x82	; 130
    1a26:	9f ef       	ldi	r25, 0xFF	; 255
    1a28:	13 96       	adiw	r26, 0x03	; 3
    1a2a:	9c 93       	st	X, r25
    1a2c:	8e 93       	st	-X, r24
    1a2e:	12 97       	sbiw	r26, 0x02	; 2
    1a30:	9a 01       	movw	r18, r20
    1a32:	ab 01       	movw	r20, r22
    1a34:	67 e0       	ldi	r22, 0x07	; 7
    1a36:	22 0f       	add	r18, r18
    1a38:	33 1f       	adc	r19, r19
    1a3a:	44 1f       	adc	r20, r20
    1a3c:	55 1f       	adc	r21, r21
    1a3e:	6a 95       	dec	r22
    1a40:	d1 f7       	brne	.-12     	; 0x1a36 <__unpack_f+0x54>
    1a42:	83 e0       	ldi	r24, 0x03	; 3
    1a44:	8c 93       	st	X, r24
    1a46:	0d c0       	rjmp	.+26     	; 0x1a62 <__unpack_f+0x80>
    1a48:	22 0f       	add	r18, r18
    1a4a:	33 1f       	adc	r19, r19
    1a4c:	44 1f       	adc	r20, r20
    1a4e:	55 1f       	adc	r21, r21
    1a50:	12 96       	adiw	r26, 0x02	; 2
    1a52:	8d 91       	ld	r24, X+
    1a54:	9c 91       	ld	r25, X
    1a56:	13 97       	sbiw	r26, 0x03	; 3
    1a58:	01 97       	sbiw	r24, 0x01	; 1
    1a5a:	13 96       	adiw	r26, 0x03	; 3
    1a5c:	9c 93       	st	X, r25
    1a5e:	8e 93       	st	-X, r24
    1a60:	12 97       	sbiw	r26, 0x02	; 2
    1a62:	20 30       	cpi	r18, 0x00	; 0
    1a64:	80 e0       	ldi	r24, 0x00	; 0
    1a66:	38 07       	cpc	r19, r24
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	48 07       	cpc	r20, r24
    1a6c:	80 e4       	ldi	r24, 0x40	; 64
    1a6e:	58 07       	cpc	r21, r24
    1a70:	58 f3       	brcs	.-42     	; 0x1a48 <__unpack_f+0x66>
    1a72:	14 96       	adiw	r26, 0x04	; 4
    1a74:	2d 93       	st	X+, r18
    1a76:	3d 93       	st	X+, r19
    1a78:	4d 93       	st	X+, r20
    1a7a:	5c 93       	st	X, r21
    1a7c:	17 97       	sbiw	r26, 0x07	; 7
    1a7e:	08 95       	ret
    1a80:	2f 3f       	cpi	r18, 0xFF	; 255
    1a82:	31 05       	cpc	r19, r1
    1a84:	79 f4       	brne	.+30     	; 0x1aa4 <__unpack_f+0xc2>
    1a86:	41 15       	cp	r20, r1
    1a88:	51 05       	cpc	r21, r1
    1a8a:	61 05       	cpc	r22, r1
    1a8c:	71 05       	cpc	r23, r1
    1a8e:	19 f4       	brne	.+6      	; 0x1a96 <__unpack_f+0xb4>
    1a90:	84 e0       	ldi	r24, 0x04	; 4
    1a92:	8c 93       	st	X, r24
    1a94:	08 95       	ret
    1a96:	64 ff       	sbrs	r22, 4
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <__unpack_f+0xbe>
    1a9a:	81 e0       	ldi	r24, 0x01	; 1
    1a9c:	8c 93       	st	X, r24
    1a9e:	12 c0       	rjmp	.+36     	; 0x1ac4 <__unpack_f+0xe2>
    1aa0:	1c 92       	st	X, r1
    1aa2:	10 c0       	rjmp	.+32     	; 0x1ac4 <__unpack_f+0xe2>
    1aa4:	2f 57       	subi	r18, 0x7F	; 127
    1aa6:	30 40       	sbci	r19, 0x00	; 0
    1aa8:	13 96       	adiw	r26, 0x03	; 3
    1aaa:	3c 93       	st	X, r19
    1aac:	2e 93       	st	-X, r18
    1aae:	12 97       	sbiw	r26, 0x02	; 2
    1ab0:	83 e0       	ldi	r24, 0x03	; 3
    1ab2:	8c 93       	st	X, r24
    1ab4:	87 e0       	ldi	r24, 0x07	; 7
    1ab6:	44 0f       	add	r20, r20
    1ab8:	55 1f       	adc	r21, r21
    1aba:	66 1f       	adc	r22, r22
    1abc:	77 1f       	adc	r23, r23
    1abe:	8a 95       	dec	r24
    1ac0:	d1 f7       	brne	.-12     	; 0x1ab6 <__unpack_f+0xd4>
    1ac2:	70 64       	ori	r23, 0x40	; 64
    1ac4:	14 96       	adiw	r26, 0x04	; 4
    1ac6:	4d 93       	st	X+, r20
    1ac8:	5d 93       	st	X+, r21
    1aca:	6d 93       	st	X+, r22
    1acc:	7c 93       	st	X, r23
    1ace:	17 97       	sbiw	r26, 0x07	; 7
    1ad0:	08 95       	ret

00001ad2 <__fpcmp_parts_f>:
    1ad2:	1f 93       	push	r17
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	fb 01       	movw	r30, r22
    1ad8:	9c 91       	ld	r25, X
    1ada:	92 30       	cpi	r25, 0x02	; 2
    1adc:	08 f4       	brcc	.+2      	; 0x1ae0 <__fpcmp_parts_f+0xe>
    1ade:	47 c0       	rjmp	.+142    	; 0x1b6e <__fpcmp_parts_f+0x9c>
    1ae0:	80 81       	ld	r24, Z
    1ae2:	82 30       	cpi	r24, 0x02	; 2
    1ae4:	08 f4       	brcc	.+2      	; 0x1ae8 <__fpcmp_parts_f+0x16>
    1ae6:	43 c0       	rjmp	.+134    	; 0x1b6e <__fpcmp_parts_f+0x9c>
    1ae8:	94 30       	cpi	r25, 0x04	; 4
    1aea:	51 f4       	brne	.+20     	; 0x1b00 <__fpcmp_parts_f+0x2e>
    1aec:	11 96       	adiw	r26, 0x01	; 1
    1aee:	1c 91       	ld	r17, X
    1af0:	84 30       	cpi	r24, 0x04	; 4
    1af2:	99 f5       	brne	.+102    	; 0x1b5a <__fpcmp_parts_f+0x88>
    1af4:	81 81       	ldd	r24, Z+1	; 0x01
    1af6:	68 2f       	mov	r22, r24
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	61 1b       	sub	r22, r17
    1afc:	71 09       	sbc	r23, r1
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <__fpcmp_parts_f+0xac>
    1b00:	84 30       	cpi	r24, 0x04	; 4
    1b02:	21 f0       	breq	.+8      	; 0x1b0c <__fpcmp_parts_f+0x3a>
    1b04:	92 30       	cpi	r25, 0x02	; 2
    1b06:	31 f4       	brne	.+12     	; 0x1b14 <__fpcmp_parts_f+0x42>
    1b08:	82 30       	cpi	r24, 0x02	; 2
    1b0a:	b9 f1       	breq	.+110    	; 0x1b7a <__fpcmp_parts_f+0xa8>
    1b0c:	81 81       	ldd	r24, Z+1	; 0x01
    1b0e:	88 23       	and	r24, r24
    1b10:	89 f1       	breq	.+98     	; 0x1b74 <__fpcmp_parts_f+0xa2>
    1b12:	2d c0       	rjmp	.+90     	; 0x1b6e <__fpcmp_parts_f+0x9c>
    1b14:	11 96       	adiw	r26, 0x01	; 1
    1b16:	1c 91       	ld	r17, X
    1b18:	11 97       	sbiw	r26, 0x01	; 1
    1b1a:	82 30       	cpi	r24, 0x02	; 2
    1b1c:	f1 f0       	breq	.+60     	; 0x1b5a <__fpcmp_parts_f+0x88>
    1b1e:	81 81       	ldd	r24, Z+1	; 0x01
    1b20:	18 17       	cp	r17, r24
    1b22:	d9 f4       	brne	.+54     	; 0x1b5a <__fpcmp_parts_f+0x88>
    1b24:	12 96       	adiw	r26, 0x02	; 2
    1b26:	2d 91       	ld	r18, X+
    1b28:	3c 91       	ld	r19, X
    1b2a:	13 97       	sbiw	r26, 0x03	; 3
    1b2c:	82 81       	ldd	r24, Z+2	; 0x02
    1b2e:	93 81       	ldd	r25, Z+3	; 0x03
    1b30:	82 17       	cp	r24, r18
    1b32:	93 07       	cpc	r25, r19
    1b34:	94 f0       	brlt	.+36     	; 0x1b5a <__fpcmp_parts_f+0x88>
    1b36:	28 17       	cp	r18, r24
    1b38:	39 07       	cpc	r19, r25
    1b3a:	bc f0       	brlt	.+46     	; 0x1b6a <__fpcmp_parts_f+0x98>
    1b3c:	14 96       	adiw	r26, 0x04	; 4
    1b3e:	8d 91       	ld	r24, X+
    1b40:	9d 91       	ld	r25, X+
    1b42:	0d 90       	ld	r0, X+
    1b44:	bc 91       	ld	r27, X
    1b46:	a0 2d       	mov	r26, r0
    1b48:	24 81       	ldd	r18, Z+4	; 0x04
    1b4a:	35 81       	ldd	r19, Z+5	; 0x05
    1b4c:	46 81       	ldd	r20, Z+6	; 0x06
    1b4e:	57 81       	ldd	r21, Z+7	; 0x07
    1b50:	28 17       	cp	r18, r24
    1b52:	39 07       	cpc	r19, r25
    1b54:	4a 07       	cpc	r20, r26
    1b56:	5b 07       	cpc	r21, r27
    1b58:	18 f4       	brcc	.+6      	; 0x1b60 <__fpcmp_parts_f+0x8e>
    1b5a:	11 23       	and	r17, r17
    1b5c:	41 f0       	breq	.+16     	; 0x1b6e <__fpcmp_parts_f+0x9c>
    1b5e:	0a c0       	rjmp	.+20     	; 0x1b74 <__fpcmp_parts_f+0xa2>
    1b60:	82 17       	cp	r24, r18
    1b62:	93 07       	cpc	r25, r19
    1b64:	a4 07       	cpc	r26, r20
    1b66:	b5 07       	cpc	r27, r21
    1b68:	40 f4       	brcc	.+16     	; 0x1b7a <__fpcmp_parts_f+0xa8>
    1b6a:	11 23       	and	r17, r17
    1b6c:	19 f0       	breq	.+6      	; 0x1b74 <__fpcmp_parts_f+0xa2>
    1b6e:	61 e0       	ldi	r22, 0x01	; 1
    1b70:	70 e0       	ldi	r23, 0x00	; 0
    1b72:	05 c0       	rjmp	.+10     	; 0x1b7e <__fpcmp_parts_f+0xac>
    1b74:	6f ef       	ldi	r22, 0xFF	; 255
    1b76:	7f ef       	ldi	r23, 0xFF	; 255
    1b78:	02 c0       	rjmp	.+4      	; 0x1b7e <__fpcmp_parts_f+0xac>
    1b7a:	60 e0       	ldi	r22, 0x00	; 0
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	cb 01       	movw	r24, r22
    1b80:	1f 91       	pop	r17
    1b82:	08 95       	ret

00001b84 <UART_Init>:
static void(*ReceivePtrCallBack)(void)=NULL;
static u8 GlobalReceiveSize=0;
static u8 *GlobalReceiveData=NULL;


void UART_Init(const UART_Config * const UserConfig){
    1b84:	2f 92       	push	r2
    1b86:	3f 92       	push	r3
    1b88:	4f 92       	push	r4
    1b8a:	5f 92       	push	r5
    1b8c:	6f 92       	push	r6
    1b8e:	7f 92       	push	r7
    1b90:	8f 92       	push	r8
    1b92:	9f 92       	push	r9
    1b94:	af 92       	push	r10
    1b96:	bf 92       	push	r11
    1b98:	cf 92       	push	r12
    1b9a:	df 92       	push	r13
    1b9c:	ef 92       	push	r14
    1b9e:	ff 92       	push	r15
    1ba0:	0f 93       	push	r16
    1ba2:	1f 93       	push	r17
    1ba4:	df 93       	push	r29
    1ba6:	cf 93       	push	r28
    1ba8:	cd b7       	in	r28, 0x3d	; 61
    1baa:	de b7       	in	r29, 0x3e	; 62
    1bac:	ec 97       	sbiw	r28, 0x3c	; 60
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	de bf       	out	0x3e, r29	; 62
    1bb4:	0f be       	out	0x3f, r0	; 63
    1bb6:	cd bf       	out	0x3d, r28	; 61
    1bb8:	9f 87       	std	Y+15, r25	; 0x0f
    1bba:	8e 87       	std	Y+14, r24	; 0x0e

	u32 Loc_u32Baudrate = 0;
    1bbc:	1a 86       	std	Y+10, r1	; 0x0a
    1bbe:	1b 86       	std	Y+11, r1	; 0x0b
    1bc0:	1c 86       	std	Y+12, r1	; 0x0c
    1bc2:	1d 86       	std	Y+13, r1	; 0x0d
	u8 Loc_u8TempRegister = 0;
    1bc4:	19 86       	std	Y+9, r1	; 0x09

	if(UserConfig) //If configurations are passed to the function
    1bc6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bc8:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bca:	00 97       	sbiw	r24, 0x00	; 0
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <UART_Init+0x4c>
    1bce:	bb c2       	rjmp	.+1398   	; 0x2146 <UART_Init+0x5c2>
	{	/*Configuring UBRR*/
		switch(UserConfig->Baude_Rate)
    1bd0:	ee 85       	ldd	r30, Y+14	; 0x0e
    1bd2:	ff 85       	ldd	r31, Y+15	; 0x0f
    1bd4:	81 85       	ldd	r24, Z+9	; 0x09
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	39 8b       	std	Y+17, r19	; 0x11
    1bdc:	28 8b       	std	Y+16, r18	; 0x10
    1bde:	88 89       	ldd	r24, Y+16	; 0x10
    1be0:	99 89       	ldd	r25, Y+17	; 0x11
    1be2:	84 30       	cpi	r24, 0x04	; 4
    1be4:	91 05       	cpc	r25, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <UART_Init+0x66>
    1be8:	5b c0       	rjmp	.+182    	; 0x1ca0 <UART_Init+0x11c>
    1bea:	e8 89       	ldd	r30, Y+16	; 0x10
    1bec:	f9 89       	ldd	r31, Y+17	; 0x11
    1bee:	e5 30       	cpi	r30, 0x05	; 5
    1bf0:	f1 05       	cpc	r31, r1
    1bf2:	d4 f4       	brge	.+52     	; 0x1c28 <UART_Init+0xa4>
    1bf4:	28 89       	ldd	r18, Y+16	; 0x10
    1bf6:	39 89       	ldd	r19, Y+17	; 0x11
    1bf8:	21 30       	cpi	r18, 0x01	; 1
    1bfa:	31 05       	cpc	r19, r1
    1bfc:	b1 f1       	breq	.+108    	; 0x1c6a <UART_Init+0xe6>
    1bfe:	88 89       	ldd	r24, Y+16	; 0x10
    1c00:	99 89       	ldd	r25, Y+17	; 0x11
    1c02:	82 30       	cpi	r24, 0x02	; 2
    1c04:	91 05       	cpc	r25, r1
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <UART_Init+0x8e>
    1c08:	e8 89       	ldd	r30, Y+16	; 0x10
    1c0a:	f9 89       	ldd	r31, Y+17	; 0x11
    1c0c:	30 97       	sbiw	r30, 0x00	; 0
    1c0e:	21 f1       	breq	.+72     	; 0x1c58 <UART_Init+0xd4>
    1c10:	73 c0       	rjmp	.+230    	; 0x1cf8 <UART_Init+0x174>
    1c12:	28 89       	ldd	r18, Y+16	; 0x10
    1c14:	39 89       	ldd	r19, Y+17	; 0x11
    1c16:	22 30       	cpi	r18, 0x02	; 2
    1c18:	31 05       	cpc	r19, r1
    1c1a:	81 f1       	breq	.+96     	; 0x1c7c <UART_Init+0xf8>
    1c1c:	88 89       	ldd	r24, Y+16	; 0x10
    1c1e:	99 89       	ldd	r25, Y+17	; 0x11
    1c20:	83 30       	cpi	r24, 0x03	; 3
    1c22:	91 05       	cpc	r25, r1
    1c24:	a1 f1       	breq	.+104    	; 0x1c8e <UART_Init+0x10a>
    1c26:	68 c0       	rjmp	.+208    	; 0x1cf8 <UART_Init+0x174>
    1c28:	e8 89       	ldd	r30, Y+16	; 0x10
    1c2a:	f9 89       	ldd	r31, Y+17	; 0x11
    1c2c:	e6 30       	cpi	r30, 0x06	; 6
    1c2e:	f1 05       	cpc	r31, r1
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <UART_Init+0xb0>
    1c32:	48 c0       	rjmp	.+144    	; 0x1cc4 <UART_Init+0x140>
    1c34:	28 89       	ldd	r18, Y+16	; 0x10
    1c36:	39 89       	ldd	r19, Y+17	; 0x11
    1c38:	26 30       	cpi	r18, 0x06	; 6
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	d4 f1       	brlt	.+116    	; 0x1cb2 <UART_Init+0x12e>
    1c3e:	88 89       	ldd	r24, Y+16	; 0x10
    1c40:	99 89       	ldd	r25, Y+17	; 0x11
    1c42:	87 30       	cpi	r24, 0x07	; 7
    1c44:	91 05       	cpc	r25, r1
    1c46:	09 f4       	brne	.+2      	; 0x1c4a <UART_Init+0xc6>
    1c48:	46 c0       	rjmp	.+140    	; 0x1cd6 <UART_Init+0x152>
    1c4a:	e8 89       	ldd	r30, Y+16	; 0x10
    1c4c:	f9 89       	ldd	r31, Y+17	; 0x11
    1c4e:	e8 30       	cpi	r30, 0x08	; 8
    1c50:	f1 05       	cpc	r31, r1
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <UART_Init+0xd2>
    1c54:	49 c0       	rjmp	.+146    	; 0x1ce8 <UART_Init+0x164>
    1c56:	50 c0       	rjmp	.+160    	; 0x1cf8 <UART_Init+0x174>
		{
		case 0:
			Loc_u32Baudrate = 1200;
    1c58:	80 eb       	ldi	r24, 0xB0	; 176
    1c5a:	94 e0       	ldi	r25, 0x04	; 4
    1c5c:	a0 e0       	ldi	r26, 0x00	; 0
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	8a 87       	std	Y+10, r24	; 0x0a
    1c62:	9b 87       	std	Y+11, r25	; 0x0b
    1c64:	ac 87       	std	Y+12, r26	; 0x0c
    1c66:	bd 87       	std	Y+13, r27	; 0x0d
    1c68:	47 c0       	rjmp	.+142    	; 0x1cf8 <UART_Init+0x174>
			break;
		case 1:
			Loc_u32Baudrate = 2400;
    1c6a:	80 e6       	ldi	r24, 0x60	; 96
    1c6c:	99 e0       	ldi	r25, 0x09	; 9
    1c6e:	a0 e0       	ldi	r26, 0x00	; 0
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	8a 87       	std	Y+10, r24	; 0x0a
    1c74:	9b 87       	std	Y+11, r25	; 0x0b
    1c76:	ac 87       	std	Y+12, r26	; 0x0c
    1c78:	bd 87       	std	Y+13, r27	; 0x0d
    1c7a:	3e c0       	rjmp	.+124    	; 0x1cf8 <UART_Init+0x174>
			break;
		case 2:
			Loc_u32Baudrate = 4800;
    1c7c:	80 ec       	ldi	r24, 0xC0	; 192
    1c7e:	92 e1       	ldi	r25, 0x12	; 18
    1c80:	a0 e0       	ldi	r26, 0x00	; 0
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	8a 87       	std	Y+10, r24	; 0x0a
    1c86:	9b 87       	std	Y+11, r25	; 0x0b
    1c88:	ac 87       	std	Y+12, r26	; 0x0c
    1c8a:	bd 87       	std	Y+13, r27	; 0x0d
    1c8c:	35 c0       	rjmp	.+106    	; 0x1cf8 <UART_Init+0x174>
			break;
		case 3:
			Loc_u32Baudrate = 9600;
    1c8e:	80 e8       	ldi	r24, 0x80	; 128
    1c90:	95 e2       	ldi	r25, 0x25	; 37
    1c92:	a0 e0       	ldi	r26, 0x00	; 0
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	8a 87       	std	Y+10, r24	; 0x0a
    1c98:	9b 87       	std	Y+11, r25	; 0x0b
    1c9a:	ac 87       	std	Y+12, r26	; 0x0c
    1c9c:	bd 87       	std	Y+13, r27	; 0x0d
    1c9e:	2c c0       	rjmp	.+88     	; 0x1cf8 <UART_Init+0x174>
			break;
		case 4:
			Loc_u32Baudrate = 19200;
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	9b e4       	ldi	r25, 0x4B	; 75
    1ca4:	a0 e0       	ldi	r26, 0x00	; 0
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	8a 87       	std	Y+10, r24	; 0x0a
    1caa:	9b 87       	std	Y+11, r25	; 0x0b
    1cac:	ac 87       	std	Y+12, r26	; 0x0c
    1cae:	bd 87       	std	Y+13, r27	; 0x0d
    1cb0:	23 c0       	rjmp	.+70     	; 0x1cf8 <UART_Init+0x174>
			break;
		case 5:
			Loc_u32Baudrate = 38400;
    1cb2:	80 e0       	ldi	r24, 0x00	; 0
    1cb4:	96 e9       	ldi	r25, 0x96	; 150
    1cb6:	a0 e0       	ldi	r26, 0x00	; 0
    1cb8:	b0 e0       	ldi	r27, 0x00	; 0
    1cba:	8a 87       	std	Y+10, r24	; 0x0a
    1cbc:	9b 87       	std	Y+11, r25	; 0x0b
    1cbe:	ac 87       	std	Y+12, r26	; 0x0c
    1cc0:	bd 87       	std	Y+13, r27	; 0x0d
    1cc2:	1a c0       	rjmp	.+52     	; 0x1cf8 <UART_Init+0x174>
			break;
		case 6:
			Loc_u32Baudrate = 57600;
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	91 ee       	ldi	r25, 0xE1	; 225
    1cc8:	a0 e0       	ldi	r26, 0x00	; 0
    1cca:	b0 e0       	ldi	r27, 0x00	; 0
    1ccc:	8a 87       	std	Y+10, r24	; 0x0a
    1cce:	9b 87       	std	Y+11, r25	; 0x0b
    1cd0:	ac 87       	std	Y+12, r26	; 0x0c
    1cd2:	bd 87       	std	Y+13, r27	; 0x0d
    1cd4:	11 c0       	rjmp	.+34     	; 0x1cf8 <UART_Init+0x174>
			break;
		case 7:
			Loc_u32Baudrate = 115200;
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	92 ec       	ldi	r25, 0xC2	; 194
    1cda:	a1 e0       	ldi	r26, 0x01	; 1
    1cdc:	b0 e0       	ldi	r27, 0x00	; 0
    1cde:	8a 87       	std	Y+10, r24	; 0x0a
    1ce0:	9b 87       	std	Y+11, r25	; 0x0b
    1ce2:	ac 87       	std	Y+12, r26	; 0x0c
    1ce4:	bd 87       	std	Y+13, r27	; 0x0d
    1ce6:	08 c0       	rjmp	.+16     	; 0x1cf8 <UART_Init+0x174>
			break;
		case 8:
			Loc_u32Baudrate = 250400;
    1ce8:	80 e2       	ldi	r24, 0x20	; 32
    1cea:	92 ed       	ldi	r25, 0xD2	; 210
    1cec:	a3 e0       	ldi	r26, 0x03	; 3
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	8a 87       	std	Y+10, r24	; 0x0a
    1cf2:	9b 87       	std	Y+11, r25	; 0x0b
    1cf4:	ac 87       	std	Y+12, r26	; 0x0c
    1cf6:	bd 87       	std	Y+13, r27	; 0x0d
			break;
		default:
			break;
		}
		/*Calculating UBRR VALUE*/
		u64 LocalTemp_UBRR= (SYSTEM_CLOCK_HZ/(16ULL * Loc_u32Baudrate));
    1cf8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cfa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1cfc:	ac 85       	ldd	r26, Y+12	; 0x0c
    1cfe:	bd 85       	ldd	r27, Y+13	; 0x0d
    1d00:	5c 01       	movw	r10, r24
    1d02:	6d 01       	movw	r12, r26
    1d04:	ee 24       	eor	r14, r14
    1d06:	ff 24       	eor	r15, r15
    1d08:	87 01       	movw	r16, r14
    1d0a:	2a 2d       	mov	r18, r10
    1d0c:	3b 2d       	mov	r19, r11
    1d0e:	4c 2d       	mov	r20, r12
    1d10:	5d 2d       	mov	r21, r13
    1d12:	6e 2d       	mov	r22, r14
    1d14:	7f 2d       	mov	r23, r15
    1d16:	80 2f       	mov	r24, r16
    1d18:	91 2f       	mov	r25, r17
    1d1a:	04 e0       	ldi	r16, 0x04	; 4
    1d1c:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    1d20:	a2 2e       	mov	r10, r18
    1d22:	b3 2e       	mov	r11, r19
    1d24:	c4 2e       	mov	r12, r20
    1d26:	d5 2e       	mov	r13, r21
    1d28:	e6 2e       	mov	r14, r22
    1d2a:	f7 2e       	mov	r15, r23
    1d2c:	08 2f       	mov	r16, r24
    1d2e:	19 2f       	mov	r17, r25
    1d30:	2a 2c       	mov	r2, r10
    1d32:	3b 2c       	mov	r3, r11
    1d34:	4c 2c       	mov	r4, r12
    1d36:	5d 2c       	mov	r5, r13
    1d38:	6e 2c       	mov	r6, r14
    1d3a:	7f 2c       	mov	r7, r15
    1d3c:	80 2e       	mov	r8, r16
    1d3e:	91 2e       	mov	r9, r17
    1d40:	20 e0       	ldi	r18, 0x00	; 0
    1d42:	32 e1       	ldi	r19, 0x12	; 18
    1d44:	4a e7       	ldi	r20, 0x7A	; 122
    1d46:	50 e0       	ldi	r21, 0x00	; 0
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	90 e0       	ldi	r25, 0x00	; 0
    1d50:	a2 2c       	mov	r10, r2
    1d52:	b3 2c       	mov	r11, r3
    1d54:	c4 2c       	mov	r12, r4
    1d56:	d5 2c       	mov	r13, r5
    1d58:	e6 2c       	mov	r14, r6
    1d5a:	f7 2c       	mov	r15, r7
    1d5c:	08 2d       	mov	r16, r8
    1d5e:	19 2d       	mov	r17, r9
    1d60:	0e 94 73 01 	call	0x2e6	; 0x2e6 <__udivdi3>
    1d64:	a2 2e       	mov	r10, r18
    1d66:	b3 2e       	mov	r11, r19
    1d68:	c4 2e       	mov	r12, r20
    1d6a:	d5 2e       	mov	r13, r21
    1d6c:	e6 2e       	mov	r14, r22
    1d6e:	f7 2e       	mov	r15, r23
    1d70:	08 2f       	mov	r16, r24
    1d72:	19 2f       	mov	r17, r25
    1d74:	a9 82       	std	Y+1, r10	; 0x01
    1d76:	ba 82       	std	Y+2, r11	; 0x02
    1d78:	cb 82       	std	Y+3, r12	; 0x03
    1d7a:	dc 82       	std	Y+4, r13	; 0x04
    1d7c:	ed 82       	std	Y+5, r14	; 0x05
    1d7e:	fe 82       	std	Y+6, r15	; 0x06
    1d80:	0f 83       	std	Y+7, r16	; 0x07
    1d82:	18 87       	std	Y+8, r17	; 0x08
		LocalTemp_UBRR-=1;
    1d84:	f9 81       	ldd	r31, Y+1	; 0x01
    1d86:	fa 8b       	std	Y+18, r31	; 0x12
    1d88:	2a 81       	ldd	r18, Y+2	; 0x02
    1d8a:	2b 8b       	std	Y+19, r18	; 0x13
    1d8c:	3b 81       	ldd	r19, Y+3	; 0x03
    1d8e:	3c 8b       	std	Y+20, r19	; 0x14
    1d90:	8c 81       	ldd	r24, Y+4	; 0x04
    1d92:	8d 8b       	std	Y+21, r24	; 0x15
    1d94:	9d 81       	ldd	r25, Y+5	; 0x05
    1d96:	9e 8b       	std	Y+22, r25	; 0x16
    1d98:	ee 81       	ldd	r30, Y+6	; 0x06
    1d9a:	ef 8b       	std	Y+23, r30	; 0x17
    1d9c:	ff 81       	ldd	r31, Y+7	; 0x07
    1d9e:	f8 8f       	std	Y+24, r31	; 0x18
    1da0:	28 85       	ldd	r18, Y+8	; 0x08
    1da2:	29 8f       	std	Y+25, r18	; 0x19
    1da4:	3f ef       	ldi	r19, 0xFF	; 255
    1da6:	3a 8f       	std	Y+26, r19	; 0x1a
    1da8:	8f ef       	ldi	r24, 0xFF	; 255
    1daa:	8b 8f       	std	Y+27, r24	; 0x1b
    1dac:	9f ef       	ldi	r25, 0xFF	; 255
    1dae:	9c 8f       	std	Y+28, r25	; 0x1c
    1db0:	ef ef       	ldi	r30, 0xFF	; 255
    1db2:	ed 8f       	std	Y+29, r30	; 0x1d
    1db4:	ff ef       	ldi	r31, 0xFF	; 255
    1db6:	fe 8f       	std	Y+30, r31	; 0x1e
    1db8:	2f ef       	ldi	r18, 0xFF	; 255
    1dba:	2f 8f       	std	Y+31, r18	; 0x1f
    1dbc:	3f ef       	ldi	r19, 0xFF	; 255
    1dbe:	38 a3       	std	Y+32, r19	; 0x20
    1dc0:	8f ef       	ldi	r24, 0xFF	; 255
    1dc2:	89 a3       	std	Y+33, r24	; 0x21
    1dc4:	9a 89       	ldd	r25, Y+18	; 0x12
    1dc6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1dc8:	9e 0f       	add	r25, r30
    1dca:	9a a3       	std	Y+34, r25	; 0x22
    1dcc:	f1 e0       	ldi	r31, 0x01	; 1
    1dce:	fa a7       	std	Y+42, r31	; 0x2a
    1dd0:	2a a1       	ldd	r18, Y+34	; 0x22
    1dd2:	3a 89       	ldd	r19, Y+18	; 0x12
    1dd4:	23 17       	cp	r18, r19
    1dd6:	08 f0       	brcs	.+2      	; 0x1dda <UART_Init+0x256>
    1dd8:	1a a6       	std	Y+42, r1	; 0x2a
    1dda:	8b 89       	ldd	r24, Y+19	; 0x13
    1ddc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1dde:	89 0f       	add	r24, r25
    1de0:	8b a3       	std	Y+35, r24	; 0x23
    1de2:	e1 e0       	ldi	r30, 0x01	; 1
    1de4:	eb a7       	std	Y+43, r30	; 0x2b
    1de6:	fb a1       	ldd	r31, Y+35	; 0x23
    1de8:	2b 89       	ldd	r18, Y+19	; 0x13
    1dea:	f2 17       	cp	r31, r18
    1dec:	08 f0       	brcs	.+2      	; 0x1df0 <UART_Init+0x26c>
    1dee:	1b a6       	std	Y+43, r1	; 0x2b
    1df0:	3a a5       	ldd	r19, Y+42	; 0x2a
    1df2:	8b a1       	ldd	r24, Y+35	; 0x23
    1df4:	38 0f       	add	r19, r24
    1df6:	3c a7       	std	Y+44, r19	; 0x2c
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	9d a7       	std	Y+45, r25	; 0x2d
    1dfc:	ec a5       	ldd	r30, Y+44	; 0x2c
    1dfe:	fb a1       	ldd	r31, Y+35	; 0x23
    1e00:	ef 17       	cp	r30, r31
    1e02:	08 f0       	brcs	.+2      	; 0x1e06 <UART_Init+0x282>
    1e04:	1d a6       	std	Y+45, r1	; 0x2d
    1e06:	2b a5       	ldd	r18, Y+43	; 0x2b
    1e08:	3d a5       	ldd	r19, Y+45	; 0x2d
    1e0a:	23 2b       	or	r18, r19
    1e0c:	2b a7       	std	Y+43, r18	; 0x2b
    1e0e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1e10:	8b a3       	std	Y+35, r24	; 0x23
    1e12:	9c 89       	ldd	r25, Y+20	; 0x14
    1e14:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1e16:	9e 0f       	add	r25, r30
    1e18:	9c a3       	std	Y+36, r25	; 0x24
    1e1a:	f1 e0       	ldi	r31, 0x01	; 1
    1e1c:	fe a7       	std	Y+46, r31	; 0x2e
    1e1e:	2c a1       	ldd	r18, Y+36	; 0x24
    1e20:	3c 89       	ldd	r19, Y+20	; 0x14
    1e22:	23 17       	cp	r18, r19
    1e24:	08 f0       	brcs	.+2      	; 0x1e28 <UART_Init+0x2a4>
    1e26:	1e a6       	std	Y+46, r1	; 0x2e
    1e28:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e2a:	9c a1       	ldd	r25, Y+36	; 0x24
    1e2c:	89 0f       	add	r24, r25
    1e2e:	8f a7       	std	Y+47, r24	; 0x2f
    1e30:	e1 e0       	ldi	r30, 0x01	; 1
    1e32:	e8 ab       	std	Y+48, r30	; 0x30
    1e34:	ff a5       	ldd	r31, Y+47	; 0x2f
    1e36:	2c a1       	ldd	r18, Y+36	; 0x24
    1e38:	f2 17       	cp	r31, r18
    1e3a:	08 f0       	brcs	.+2      	; 0x1e3e <UART_Init+0x2ba>
    1e3c:	18 aa       	std	Y+48, r1	; 0x30
    1e3e:	3e a5       	ldd	r19, Y+46	; 0x2e
    1e40:	88 a9       	ldd	r24, Y+48	; 0x30
    1e42:	38 2b       	or	r19, r24
    1e44:	3e a7       	std	Y+46, r19	; 0x2e
    1e46:	9f a5       	ldd	r25, Y+47	; 0x2f
    1e48:	9c a3       	std	Y+36, r25	; 0x24
    1e4a:	ed 89       	ldd	r30, Y+21	; 0x15
    1e4c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    1e4e:	ef 0f       	add	r30, r31
    1e50:	ed a3       	std	Y+37, r30	; 0x25
    1e52:	21 e0       	ldi	r18, 0x01	; 1
    1e54:	29 ab       	std	Y+49, r18	; 0x31
    1e56:	3d a1       	ldd	r19, Y+37	; 0x25
    1e58:	8d 89       	ldd	r24, Y+21	; 0x15
    1e5a:	38 17       	cp	r19, r24
    1e5c:	08 f0       	brcs	.+2      	; 0x1e60 <UART_Init+0x2dc>
    1e5e:	19 aa       	std	Y+49, r1	; 0x31
    1e60:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e62:	ed a1       	ldd	r30, Y+37	; 0x25
    1e64:	9e 0f       	add	r25, r30
    1e66:	9a ab       	std	Y+50, r25	; 0x32
    1e68:	f1 e0       	ldi	r31, 0x01	; 1
    1e6a:	fb ab       	std	Y+51, r31	; 0x33
    1e6c:	2a a9       	ldd	r18, Y+50	; 0x32
    1e6e:	3d a1       	ldd	r19, Y+37	; 0x25
    1e70:	23 17       	cp	r18, r19
    1e72:	08 f0       	brcs	.+2      	; 0x1e76 <UART_Init+0x2f2>
    1e74:	1b aa       	std	Y+51, r1	; 0x33
    1e76:	89 a9       	ldd	r24, Y+49	; 0x31
    1e78:	9b a9       	ldd	r25, Y+51	; 0x33
    1e7a:	89 2b       	or	r24, r25
    1e7c:	89 ab       	std	Y+49, r24	; 0x31
    1e7e:	ea a9       	ldd	r30, Y+50	; 0x32
    1e80:	ed a3       	std	Y+37, r30	; 0x25
    1e82:	fe 89       	ldd	r31, Y+22	; 0x16
    1e84:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1e86:	f2 0f       	add	r31, r18
    1e88:	fe a3       	std	Y+38, r31	; 0x26
    1e8a:	31 e0       	ldi	r19, 0x01	; 1
    1e8c:	3c ab       	std	Y+52, r19	; 0x34
    1e8e:	8e a1       	ldd	r24, Y+38	; 0x26
    1e90:	9e 89       	ldd	r25, Y+22	; 0x16
    1e92:	89 17       	cp	r24, r25
    1e94:	08 f0       	brcs	.+2      	; 0x1e98 <UART_Init+0x314>
    1e96:	1c aa       	std	Y+52, r1	; 0x34
    1e98:	e9 a9       	ldd	r30, Y+49	; 0x31
    1e9a:	fe a1       	ldd	r31, Y+38	; 0x26
    1e9c:	ef 0f       	add	r30, r31
    1e9e:	ed ab       	std	Y+53, r30	; 0x35
    1ea0:	21 e0       	ldi	r18, 0x01	; 1
    1ea2:	2e ab       	std	Y+54, r18	; 0x36
    1ea4:	3d a9       	ldd	r19, Y+53	; 0x35
    1ea6:	8e a1       	ldd	r24, Y+38	; 0x26
    1ea8:	38 17       	cp	r19, r24
    1eaa:	08 f0       	brcs	.+2      	; 0x1eae <UART_Init+0x32a>
    1eac:	1e aa       	std	Y+54, r1	; 0x36
    1eae:	9c a9       	ldd	r25, Y+52	; 0x34
    1eb0:	ee a9       	ldd	r30, Y+54	; 0x36
    1eb2:	9e 2b       	or	r25, r30
    1eb4:	9c ab       	std	Y+52, r25	; 0x34
    1eb6:	fd a9       	ldd	r31, Y+53	; 0x35
    1eb8:	fe a3       	std	Y+38, r31	; 0x26
    1eba:	2f 89       	ldd	r18, Y+23	; 0x17
    1ebc:	3f 8d       	ldd	r19, Y+31	; 0x1f
    1ebe:	23 0f       	add	r18, r19
    1ec0:	2f a3       	std	Y+39, r18	; 0x27
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	8f ab       	std	Y+55, r24	; 0x37
    1ec6:	9f a1       	ldd	r25, Y+39	; 0x27
    1ec8:	ef 89       	ldd	r30, Y+23	; 0x17
    1eca:	9e 17       	cp	r25, r30
    1ecc:	08 f0       	brcs	.+2      	; 0x1ed0 <UART_Init+0x34c>
    1ece:	1f aa       	std	Y+55, r1	; 0x37
    1ed0:	fc a9       	ldd	r31, Y+52	; 0x34
    1ed2:	2f a1       	ldd	r18, Y+39	; 0x27
    1ed4:	f2 0f       	add	r31, r18
    1ed6:	f8 af       	std	Y+56, r31	; 0x38
    1ed8:	31 e0       	ldi	r19, 0x01	; 1
    1eda:	39 af       	std	Y+57, r19	; 0x39
    1edc:	88 ad       	ldd	r24, Y+56	; 0x38
    1ede:	9f a1       	ldd	r25, Y+39	; 0x27
    1ee0:	89 17       	cp	r24, r25
    1ee2:	08 f0       	brcs	.+2      	; 0x1ee6 <UART_Init+0x362>
    1ee4:	19 ae       	std	Y+57, r1	; 0x39
    1ee6:	ef a9       	ldd	r30, Y+55	; 0x37
    1ee8:	f9 ad       	ldd	r31, Y+57	; 0x39
    1eea:	ef 2b       	or	r30, r31
    1eec:	ef ab       	std	Y+55, r30	; 0x37
    1eee:	28 ad       	ldd	r18, Y+56	; 0x38
    1ef0:	2f a3       	std	Y+39, r18	; 0x27
    1ef2:	38 8d       	ldd	r19, Y+24	; 0x18
    1ef4:	88 a1       	ldd	r24, Y+32	; 0x20
    1ef6:	38 0f       	add	r19, r24
    1ef8:	38 a7       	std	Y+40, r19	; 0x28
    1efa:	91 e0       	ldi	r25, 0x01	; 1
    1efc:	9a af       	std	Y+58, r25	; 0x3a
    1efe:	e8 a5       	ldd	r30, Y+40	; 0x28
    1f00:	f8 8d       	ldd	r31, Y+24	; 0x18
    1f02:	ef 17       	cp	r30, r31
    1f04:	08 f0       	brcs	.+2      	; 0x1f08 <UART_Init+0x384>
    1f06:	1a ae       	std	Y+58, r1	; 0x3a
    1f08:	2f a9       	ldd	r18, Y+55	; 0x37
    1f0a:	38 a5       	ldd	r19, Y+40	; 0x28
    1f0c:	23 0f       	add	r18, r19
    1f0e:	2b af       	std	Y+59, r18	; 0x3b
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	8c af       	std	Y+60, r24	; 0x3c
    1f14:	9b ad       	ldd	r25, Y+59	; 0x3b
    1f16:	e8 a5       	ldd	r30, Y+40	; 0x28
    1f18:	9e 17       	cp	r25, r30
    1f1a:	08 f0       	brcs	.+2      	; 0x1f1e <UART_Init+0x39a>
    1f1c:	1c ae       	std	Y+60, r1	; 0x3c
    1f1e:	fa ad       	ldd	r31, Y+58	; 0x3a
    1f20:	2c ad       	ldd	r18, Y+60	; 0x3c
    1f22:	f2 2b       	or	r31, r18
    1f24:	fa af       	std	Y+58, r31	; 0x3a
    1f26:	3b ad       	ldd	r19, Y+59	; 0x3b
    1f28:	38 a7       	std	Y+40, r19	; 0x28
    1f2a:	89 8d       	ldd	r24, Y+25	; 0x19
    1f2c:	99 a1       	ldd	r25, Y+33	; 0x21
    1f2e:	89 0f       	add	r24, r25
    1f30:	89 a7       	std	Y+41, r24	; 0x29
    1f32:	8a ad       	ldd	r24, Y+58	; 0x3a
    1f34:	e9 a5       	ldd	r30, Y+41	; 0x29
    1f36:	8e 0f       	add	r24, r30
    1f38:	89 a7       	std	Y+41, r24	; 0x29
    1f3a:	fa a1       	ldd	r31, Y+34	; 0x22
    1f3c:	f9 83       	std	Y+1, r31	; 0x01
    1f3e:	2b a1       	ldd	r18, Y+35	; 0x23
    1f40:	2a 83       	std	Y+2, r18	; 0x02
    1f42:	3c a1       	ldd	r19, Y+36	; 0x24
    1f44:	3b 83       	std	Y+3, r19	; 0x03
    1f46:	8d a1       	ldd	r24, Y+37	; 0x25
    1f48:	8c 83       	std	Y+4, r24	; 0x04
    1f4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1f4c:	9d 83       	std	Y+5, r25	; 0x05
    1f4e:	ef a1       	ldd	r30, Y+39	; 0x27
    1f50:	ee 83       	std	Y+6, r30	; 0x06
    1f52:	f8 a5       	ldd	r31, Y+40	; 0x28
    1f54:	ff 83       	std	Y+7, r31	; 0x07
    1f56:	29 a5       	ldd	r18, Y+41	; 0x29
    1f58:	28 87       	std	Y+8, r18	; 0x08

		if(LocalTemp_UBRR<MAX_8BIT_VALUE){
    1f5a:	88 85       	ldd	r24, Y+8	; 0x08
    1f5c:	88 23       	and	r24, r24
    1f5e:	79 f5       	brne	.+94     	; 0x1fbe <UART_Init+0x43a>
    1f60:	88 85       	ldd	r24, Y+8	; 0x08
    1f62:	88 23       	and	r24, r24
    1f64:	39 f5       	brne	.+78     	; 0x1fb4 <UART_Init+0x430>
    1f66:	8f 81       	ldd	r24, Y+7	; 0x07
    1f68:	88 23       	and	r24, r24
    1f6a:	49 f5       	brne	.+82     	; 0x1fbe <UART_Init+0x43a>
    1f6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1f6e:	88 23       	and	r24, r24
    1f70:	09 f5       	brne	.+66     	; 0x1fb4 <UART_Init+0x430>
    1f72:	8e 81       	ldd	r24, Y+6	; 0x06
    1f74:	88 23       	and	r24, r24
    1f76:	19 f5       	brne	.+70     	; 0x1fbe <UART_Init+0x43a>
    1f78:	8e 81       	ldd	r24, Y+6	; 0x06
    1f7a:	88 23       	and	r24, r24
    1f7c:	d9 f4       	brne	.+54     	; 0x1fb4 <UART_Init+0x430>
    1f7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f80:	88 23       	and	r24, r24
    1f82:	e9 f4       	brne	.+58     	; 0x1fbe <UART_Init+0x43a>
    1f84:	8d 81       	ldd	r24, Y+5	; 0x05
    1f86:	88 23       	and	r24, r24
    1f88:	a9 f4       	brne	.+42     	; 0x1fb4 <UART_Init+0x430>
    1f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8c:	88 23       	and	r24, r24
    1f8e:	b9 f4       	brne	.+46     	; 0x1fbe <UART_Init+0x43a>
    1f90:	8c 81       	ldd	r24, Y+4	; 0x04
    1f92:	88 23       	and	r24, r24
    1f94:	79 f4       	brne	.+30     	; 0x1fb4 <UART_Init+0x430>
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	88 23       	and	r24, r24
    1f9a:	89 f4       	brne	.+34     	; 0x1fbe <UART_Init+0x43a>
    1f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9e:	88 23       	and	r24, r24
    1fa0:	49 f4       	brne	.+18     	; 0x1fb4 <UART_Init+0x430>
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	88 23       	and	r24, r24
    1fa6:	59 f4       	brne	.+22     	; 0x1fbe <UART_Init+0x43a>
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	88 23       	and	r24, r24
    1fac:	19 f4       	brne	.+6      	; 0x1fb4 <UART_Init+0x430>
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	8f 3f       	cpi	r24, 0xFF	; 255
    1fb2:	28 f4       	brcc	.+10     	; 0x1fbe <UART_Init+0x43a>
			UBRRL = LocalTemp_UBRR;
    1fb4:	e9 e2       	ldi	r30, 0x29	; 41
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	80 83       	st	Z, r24
    1fbc:	2e c0       	rjmp	.+92     	; 0x201a <UART_Init+0x496>
		}
		else
		{
			/*Make sure we are accessing UBRRH*/
			ClearBit(UBRRH,UCSRC_URSEL_BIT);
    1fbe:	a0 e4       	ldi	r26, 0x40	; 64
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	e0 e4       	ldi	r30, 0x40	; 64
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8f 77       	andi	r24, 0x7F	; 127
    1fca:	8c 93       	st	X, r24
			/*Write HIGH REGISTER FIRST*/
			UBRRH=(LocalTemp_UBRR>>8)&(UBRRH_MASK);
    1fcc:	88 24       	eor	r8, r8
    1fce:	99 24       	eor	r9, r9
    1fd0:	68 94       	set
    1fd2:	86 f8       	bld	r8, 6
    1fd4:	29 81       	ldd	r18, Y+1	; 0x01
    1fd6:	3a 81       	ldd	r19, Y+2	; 0x02
    1fd8:	4b 81       	ldd	r20, Y+3	; 0x03
    1fda:	5c 81       	ldd	r21, Y+4	; 0x04
    1fdc:	6d 81       	ldd	r22, Y+5	; 0x05
    1fde:	7e 81       	ldd	r23, Y+6	; 0x06
    1fe0:	8f 81       	ldd	r24, Y+7	; 0x07
    1fe2:	98 85       	ldd	r25, Y+8	; 0x08
    1fe4:	08 e0       	ldi	r16, 0x08	; 8
    1fe6:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    1fea:	a2 2e       	mov	r10, r18
    1fec:	b3 2e       	mov	r11, r19
    1fee:	c4 2e       	mov	r12, r20
    1ff0:	d5 2e       	mov	r13, r21
    1ff2:	e6 2e       	mov	r14, r22
    1ff4:	f7 2e       	mov	r15, r23
    1ff6:	08 2f       	mov	r16, r24
    1ff8:	19 2f       	mov	r17, r25
    1ffa:	2a 2d       	mov	r18, r10
    1ffc:	3b 2d       	mov	r19, r11
    1ffe:	4c 2d       	mov	r20, r12
    2000:	5d 2d       	mov	r21, r13
    2002:	6e 2d       	mov	r22, r14
    2004:	7f 2d       	mov	r23, r15
    2006:	80 2f       	mov	r24, r16
    2008:	91 2f       	mov	r25, r17
    200a:	82 2f       	mov	r24, r18
    200c:	8f 70       	andi	r24, 0x0F	; 15
    200e:	f4 01       	movw	r30, r8
    2010:	80 83       	st	Z, r24

			/*Write Lowest BYTE only*/
			UBRRL=(u8)LocalTemp_UBRR;
    2012:	e9 e2       	ldi	r30, 0x29	; 41
    2014:	f0 e0       	ldi	r31, 0x00	; 0
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	80 83       	st	Z, r24

		}
		/*Configuring UCSRA*/
		UCSRA |= UserConfig->Communication_Mode <<UCSRA_MPCM_BIT;
    201a:	ab e2       	ldi	r26, 0x2B	; 43
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	eb e2       	ldi	r30, 0x2B	; 43
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	90 81       	ld	r25, Z
    2024:	ee 85       	ldd	r30, Y+14	; 0x0e
    2026:	ff 85       	ldd	r31, Y+15	; 0x0f
    2028:	80 85       	ldd	r24, Z+8	; 0x08
    202a:	89 2b       	or	r24, r25
    202c:	8c 93       	st	X, r24
		/*Configuring UCSRB (Has to be configured first otherwise CHARSIZE bit will be overwritten by 0*/
		UCSRB = (UserConfig->Receive_Done_INT_Enable <<UCSRB_RECEIVE_INT_BIT) | (UserConfig->Send_Done_INT_Enable <<UCSRB_SEND_INT_BIT) | (UserConfig->Empty_Data_Reg_INT_Enable <<UCSRB_EMPTY_INT_BIT);
    202e:	aa e2       	ldi	r26, 0x2A	; 42
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ee 85       	ldd	r30, Y+14	; 0x0e
    2034:	ff 85       	ldd	r31, Y+15	; 0x0f
    2036:	80 81       	ld	r24, Z
    2038:	88 2f       	mov	r24, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	96 95       	lsr	r25
    203e:	98 2f       	mov	r25, r24
    2040:	88 27       	eor	r24, r24
    2042:	97 95       	ror	r25
    2044:	87 95       	ror	r24
    2046:	28 2f       	mov	r18, r24
    2048:	ee 85       	ldd	r30, Y+14	; 0x0e
    204a:	ff 85       	ldd	r31, Y+15	; 0x0f
    204c:	81 81       	ldd	r24, Z+1	; 0x01
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	00 24       	eor	r0, r0
    2054:	96 95       	lsr	r25
    2056:	87 95       	ror	r24
    2058:	07 94       	ror	r0
    205a:	96 95       	lsr	r25
    205c:	87 95       	ror	r24
    205e:	07 94       	ror	r0
    2060:	98 2f       	mov	r25, r24
    2062:	80 2d       	mov	r24, r0
    2064:	28 2b       	or	r18, r24
    2066:	ee 85       	ldd	r30, Y+14	; 0x0e
    2068:	ff 85       	ldd	r31, Y+15	; 0x0f
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	88 2f       	mov	r24, r24
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	82 95       	swap	r24
    2076:	92 95       	swap	r25
    2078:	90 7f       	andi	r25, 0xF0	; 240
    207a:	98 27       	eor	r25, r24
    207c:	80 7f       	andi	r24, 0xF0	; 240
    207e:	98 27       	eor	r25, r24
    2080:	82 2b       	or	r24, r18
    2082:	8c 93       	st	X, r24

		/*Configuring UCSRC*/
		Loc_u8TempRegister = 0;
    2084:	19 86       	std	Y+9, r1	; 0x09
		Loc_u8TempRegister |= (UserConfig->Mode_Select)<<UCSRC_UMSEL_BIT;			//BIT 	6
    2086:	ee 85       	ldd	r30, Y+14	; 0x0e
    2088:	ff 85       	ldd	r31, Y+15	; 0x0f
    208a:	84 81       	ldd	r24, Z+4	; 0x04
    208c:	88 2f       	mov	r24, r24
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	00 24       	eor	r0, r0
    2092:	96 95       	lsr	r25
    2094:	87 95       	ror	r24
    2096:	07 94       	ror	r0
    2098:	96 95       	lsr	r25
    209a:	87 95       	ror	r24
    209c:	07 94       	ror	r0
    209e:	98 2f       	mov	r25, r24
    20a0:	80 2d       	mov	r24, r0
    20a2:	98 2f       	mov	r25, r24
    20a4:	89 85       	ldd	r24, Y+9	; 0x09
    20a6:	89 2b       	or	r24, r25
    20a8:	89 87       	std	Y+9, r24	; 0x09
		Loc_u8TempRegister |= (UserConfig->Parity_Mode)<<UCSRC_UPM_BIT;				//BITS	5,4
    20aa:	ee 85       	ldd	r30, Y+14	; 0x0e
    20ac:	ff 85       	ldd	r31, Y+15	; 0x0f
    20ae:	85 81       	ldd	r24, Z+5	; 0x05
    20b0:	88 2f       	mov	r24, r24
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	82 95       	swap	r24
    20b6:	92 95       	swap	r25
    20b8:	90 7f       	andi	r25, 0xF0	; 240
    20ba:	98 27       	eor	r25, r24
    20bc:	80 7f       	andi	r24, 0xF0	; 240
    20be:	98 27       	eor	r25, r24
    20c0:	98 2f       	mov	r25, r24
    20c2:	89 85       	ldd	r24, Y+9	; 0x09
    20c4:	89 2b       	or	r24, r25
    20c6:	89 87       	std	Y+9, r24	; 0x09
		Loc_u8TempRegister |= (UserConfig->Stop_Bits_Number)<<UCSRC_USBS_BIT;		//BIT 	3
    20c8:	ee 85       	ldd	r30, Y+14	; 0x0e
    20ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    20cc:	86 81       	ldd	r24, Z+6	; 0x06
    20ce:	88 2f       	mov	r24, r24
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	88 0f       	add	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	88 0f       	add	r24, r24
    20dc:	99 1f       	adc	r25, r25
    20de:	98 2f       	mov	r25, r24
    20e0:	89 85       	ldd	r24, Y+9	; 0x09
    20e2:	89 2b       	or	r24, r25
    20e4:	89 87       	std	Y+9, r24	; 0x09
		Loc_u8TempRegister |= (UserConfig->Char_Size) << UCSRC_UCSZ_BIT;				//BITS 	2,1
    20e6:	ee 85       	ldd	r30, Y+14	; 0x0e
    20e8:	ff 85       	ldd	r31, Y+15	; 0x0f
    20ea:	83 81       	ldd	r24, Z+3	; 0x03
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	88 0f       	add	r24, r24
    20f2:	99 1f       	adc	r25, r25
    20f4:	98 2f       	mov	r25, r24
    20f6:	89 85       	ldd	r24, Y+9	; 0x09
    20f8:	89 2b       	or	r24, r25
    20fa:	89 87       	std	Y+9, r24	; 0x09
		if(UserConfig->Char_Size >CHAR_SIZE_8_){
    20fc:	ee 85       	ldd	r30, Y+14	; 0x0e
    20fe:	ff 85       	ldd	r31, Y+15	; 0x0f
    2100:	83 81       	ldd	r24, Z+3	; 0x03
    2102:	84 30       	cpi	r24, 0x04	; 4
    2104:	38 f0       	brcs	.+14     	; 0x2114 <UART_Init+0x590>
			SetBit(UCSRB,UCSRB_UCSZ2_BIT);
    2106:	aa e2       	ldi	r26, 0x2A	; 42
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	ea e2       	ldi	r30, 0x2A	; 42
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	84 60       	ori	r24, 0x04	; 4
    2112:	8c 93       	st	X, r24
		}
		Loc_u8TempRegister |= (UserConfig->Clock_Polarity);							//BIT 	0
    2114:	ee 85       	ldd	r30, Y+14	; 0x0e
    2116:	ff 85       	ldd	r31, Y+15	; 0x0f
    2118:	97 81       	ldd	r25, Z+7	; 0x07
    211a:	89 85       	ldd	r24, Y+9	; 0x09
    211c:	89 2b       	or	r24, r25
    211e:	89 87       	std	Y+9, r24	; 0x09

		/*Accessing UCSRC BY BIT SETTING BIT 7 AND ASSIGNING IT THE SETTINGS VALUE*/
		UCSRC = (1<<UCSRC_URSEL_BIT)|Loc_u8TempRegister;
    2120:	e0 e4       	ldi	r30, 0x40	; 64
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	89 85       	ldd	r24, Y+9	; 0x09
    2126:	80 68       	ori	r24, 0x80	; 128
    2128:	80 83       	st	Z, r24

		/*Enable Receiver*/
		SetBit(UCSRB,UCSRB_RECEIVE_BIT);
    212a:	aa e2       	ldi	r26, 0x2A	; 42
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	ea e2       	ldi	r30, 0x2A	; 42
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	80 81       	ld	r24, Z
    2134:	80 61       	ori	r24, 0x10	; 16
    2136:	8c 93       	st	X, r24
		/*Enable Transmitter*/
		SetBit(UCSRB,UCSRB_SEND_BIT);
    2138:	aa e2       	ldi	r26, 0x2A	; 42
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	ea e2       	ldi	r30, 0x2A	; 42
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	88 60       	ori	r24, 0x08	; 8
    2144:	8c 93       	st	X, r24
	}
	else{
		/*NULL POINTER IS PASSED, DO NOTHING*/
	}

}
    2146:	ec 96       	adiw	r28, 0x3c	; 60
    2148:	0f b6       	in	r0, 0x3f	; 63
    214a:	f8 94       	cli
    214c:	de bf       	out	0x3e, r29	; 62
    214e:	0f be       	out	0x3f, r0	; 63
    2150:	cd bf       	out	0x3d, r28	; 61
    2152:	cf 91       	pop	r28
    2154:	df 91       	pop	r29
    2156:	1f 91       	pop	r17
    2158:	0f 91       	pop	r16
    215a:	ff 90       	pop	r15
    215c:	ef 90       	pop	r14
    215e:	df 90       	pop	r13
    2160:	cf 90       	pop	r12
    2162:	bf 90       	pop	r11
    2164:	af 90       	pop	r10
    2166:	9f 90       	pop	r9
    2168:	8f 90       	pop	r8
    216a:	7f 90       	pop	r7
    216c:	6f 90       	pop	r6
    216e:	5f 90       	pop	r5
    2170:	4f 90       	pop	r4
    2172:	3f 90       	pop	r3
    2174:	2f 90       	pop	r2
    2176:	08 95       	ret

00002178 <UART_VoidSendData>:




void UART_VoidSendData(u16 Copy_u16Data){
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	00 d0       	rcall	.+0      	; 0x217e <UART_VoidSendData+0x6>
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01

	/*WAIT TILL TRANSMIT FLAG IS UP*/
	while(GetBit(UCSRA,UCSRA_UDRE_BIT)==0);
    2186:	eb e2       	ldi	r30, 0x2B	; 43
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	80 81       	ld	r24, Z
    218c:	82 95       	swap	r24
    218e:	86 95       	lsr	r24
    2190:	87 70       	andi	r24, 0x07	; 7
    2192:	88 2f       	mov	r24, r24
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	81 70       	andi	r24, 0x01	; 1
    2198:	90 70       	andi	r25, 0x00	; 0
    219a:	00 97       	sbiw	r24, 0x00	; 0
    219c:	a1 f3       	breq	.-24     	; 0x2186 <UART_VoidSendData+0xe>
	/*Checking if 9 character size is configured*/
	if(GetBit(UCSRB,UCSRB_UCSZ2_BIT)==1){
    219e:	ea e2       	ldi	r30, 0x2A	; 42
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	80 81       	ld	r24, Z
    21a4:	86 95       	lsr	r24
    21a6:	86 95       	lsr	r24
    21a8:	88 2f       	mov	r24, r24
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	81 70       	andi	r24, 0x01	; 1
    21ae:	90 70       	andi	r25, 0x00	; 0
    21b0:	88 23       	and	r24, r24
    21b2:	69 f0       	breq	.+26     	; 0x21ce <UART_VoidSendData+0x56>
		/*If 9 bits data are going to be sent*/
		if(Copy_u16Data>MAX_8BIT_VALUE){
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	9a 81       	ldd	r25, Y+2	; 0x02
    21b8:	8f 3f       	cpi	r24, 0xFF	; 255
    21ba:	91 05       	cpc	r25, r1
    21bc:	41 f0       	breq	.+16     	; 0x21ce <UART_VoidSendData+0x56>
    21be:	38 f0       	brcs	.+14     	; 0x21ce <UART_VoidSendData+0x56>
			SetBit(UCSRA,UCSRA_TRASMIT_BIT);
    21c0:	ab e2       	ldi	r26, 0x2B	; 43
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	eb e2       	ldi	r30, 0x2B	; 43
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	81 60       	ori	r24, 0x01	; 1
    21cc:	8c 93       	st	X, r24
	}
	else{

	}
	/*Send the first 8 bits to UDR*/
	UDR=(u8)Copy_u16Data;
    21ce:	ec e2       	ldi	r30, 0x2C	; 44
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	80 83       	st	Z, r24
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	cf 91       	pop	r28
    21dc:	df 91       	pop	r29
    21de:	08 95       	ret

000021e0 <UART_VoidReceiveData>:


void UART_VoidReceiveData(u16 * Copy_u16Reading){
    21e0:	df 93       	push	r29
    21e2:	cf 93       	push	r28
    21e4:	00 d0       	rcall	.+0      	; 0x21e6 <UART_VoidReceiveData+0x6>
    21e6:	cd b7       	in	r28, 0x3d	; 61
    21e8:	de b7       	in	r29, 0x3e	; 62
    21ea:	9a 83       	std	Y+2, r25	; 0x02
    21ec:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u16Reading)!=NULL){
    21ee:	89 81       	ldd	r24, Y+1	; 0x01
    21f0:	9a 81       	ldd	r25, Y+2	; 0x02
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	41 f1       	breq	.+80     	; 0x2246 <UART_VoidReceiveData+0x66>
		/*WAIT TILL RECEVIE COMPLETE FLAG IS UP*/
		while(GetBit(UCSRA,UCSRA_RXC_BIT)==0);
    21f6:	eb e2       	ldi	r30, 0x2B	; 43
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	88 23       	and	r24, r24
    21fe:	dc f7       	brge	.-10     	; 0x21f6 <UART_VoidReceiveData+0x16>
		/*Checking if 9 character size is configured*/
		if(GetBit(UCSRB,UCSRB_UCSZ2_BIT)==1){
    2200:	ea e2       	ldi	r30, 0x2A	; 42
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	86 95       	lsr	r24
    2208:	86 95       	lsr	r24
    220a:	88 2f       	mov	r24, r24
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	81 70       	andi	r24, 0x01	; 1
    2210:	90 70       	andi	r25, 0x00	; 0
    2212:	88 23       	and	r24, r24
    2214:	79 f0       	breq	.+30     	; 0x2234 <UART_VoidReceiveData+0x54>
			/*Get the ninth data bit first, then assign its value to the Reading variable*/
			*Copy_u16Reading=(GetBit(UCSRA,UCSRA_RECEIVE_BIT)<<9);
    2216:	eb e2       	ldi	r30, 0x2B	; 43
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	86 95       	lsr	r24
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	81 70       	andi	r24, 0x01	; 1
    2224:	90 70       	andi	r25, 0x00	; 0
    2226:	98 2f       	mov	r25, r24
    2228:	88 27       	eor	r24, r24
    222a:	99 0f       	add	r25, r25
    222c:	e9 81       	ldd	r30, Y+1	; 0x01
    222e:	fa 81       	ldd	r31, Y+2	; 0x02
    2230:	91 83       	std	Z+1, r25	; 0x01
    2232:	80 83       	st	Z, r24
		}
		else{
			/*Do nothing*/
		}
		/*Read the first 8 bits to UDR*/
		*Copy_u16Reading=UDR;
    2234:	ec e2       	ldi	r30, 0x2C	; 44
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	88 2f       	mov	r24, r24
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	e9 81       	ldd	r30, Y+1	; 0x01
    2240:	fa 81       	ldd	r31, Y+2	; 0x02
    2242:	91 83       	std	Z+1, r25	; 0x01
    2244:	80 83       	st	Z, r24
	}
}
    2246:	0f 90       	pop	r0
    2248:	0f 90       	pop	r0
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <UART_VoidSendDataU8>:


void UART_VoidSendDataU8(u8 Copy_u8Data){
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	0f 92       	push	r0
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	89 83       	std	Y+1, r24	; 0x01

	/*WAIT TILL DATA REGISTER EMPTY FLAG IS UP (CAN TRANSIMIT)*/
	while(GetBit(UCSRA,UCSRA_UDRE_BIT)==0);
    225c:	eb e2       	ldi	r30, 0x2B	; 43
    225e:	f0 e0       	ldi	r31, 0x00	; 0
    2260:	80 81       	ld	r24, Z
    2262:	82 95       	swap	r24
    2264:	86 95       	lsr	r24
    2266:	87 70       	andi	r24, 0x07	; 7
    2268:	88 2f       	mov	r24, r24
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	81 70       	andi	r24, 0x01	; 1
    226e:	90 70       	andi	r25, 0x00	; 0
    2270:	00 97       	sbiw	r24, 0x00	; 0
    2272:	a1 f3       	breq	.-24     	; 0x225c <UART_VoidSendDataU8+0xc>
	/*Send the first 8 bits to UDR*/
	UDR=(u8)Copy_u8Data;
    2274:	ec e2       	ldi	r30, 0x2C	; 44
    2276:	f0 e0       	ldi	r31, 0x00	; 0
    2278:	89 81       	ldd	r24, Y+1	; 0x01
    227a:	80 83       	st	Z, r24
}
    227c:	0f 90       	pop	r0
    227e:	cf 91       	pop	r28
    2280:	df 91       	pop	r29
    2282:	08 95       	ret

00002284 <UART_VoidReceiveDataU8>:


void UART_VoidReceiveDataU8(u8 * Copy_u8Reading){
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <UART_VoidReceiveDataU8+0x6>
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	9a 83       	std	Y+2, r25	; 0x02
    2290:	89 83       	std	Y+1, r24	; 0x01

	if((Copy_u8Reading)!=NULL){
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	59 f0       	breq	.+22     	; 0x22b0 <UART_VoidReceiveDataU8+0x2c>
		/*WAIT TILL RECEVIE COMPLETE FLAG IS UP*/
		while(GetBit(UCSRA,UCSRA_RXC_BIT)==0);
    229a:	eb e2       	ldi	r30, 0x2B	; 43
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	80 81       	ld	r24, Z
    22a0:	88 23       	and	r24, r24
    22a2:	dc f7       	brge	.-10     	; 0x229a <UART_VoidReceiveDataU8+0x16>
		/*Read the first 8 bits to UDR*/
		*Copy_u8Reading=UDR;
    22a4:	ec e2       	ldi	r30, 0x2C	; 44
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	e9 81       	ldd	r30, Y+1	; 0x01
    22ac:	fa 81       	ldd	r31, Y+2	; 0x02
    22ae:	80 83       	st	Z, r24
	}
	else{

	}
}
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	cf 91       	pop	r28
    22b6:	df 91       	pop	r29
    22b8:	08 95       	ret

000022ba <UART_SendBufferSync>:





void UART_SendBufferSync(u8* Copy_u8Array,u8 Copy_Size){
    22ba:	df 93       	push	r29
    22bc:	cf 93       	push	r28
    22be:	00 d0       	rcall	.+0      	; 0x22c0 <UART_SendBufferSync+0x6>
    22c0:	00 d0       	rcall	.+0      	; 0x22c2 <UART_SendBufferSync+0x8>
    22c2:	cd b7       	in	r28, 0x3d	; 61
    22c4:	de b7       	in	r29, 0x3e	; 62
    22c6:	9b 83       	std	Y+3, r25	; 0x03
    22c8:	8a 83       	std	Y+2, r24	; 0x02
    22ca:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Iterator=0;
    22cc:	19 82       	std	Y+1, r1	; 0x01
	for(Local_u8Iterator=0;Local_u8Iterator<Copy_Size;Local_u8Iterator++){
    22ce:	19 82       	std	Y+1, r1	; 0x01
    22d0:	0e c0       	rjmp	.+28     	; 0x22ee <UART_SendBufferSync+0x34>
		UART_VoidSendDataU8(Copy_u8Array[Local_u8Iterator]);
    22d2:	89 81       	ldd	r24, Y+1	; 0x01
    22d4:	28 2f       	mov	r18, r24
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	9b 81       	ldd	r25, Y+3	; 0x03
    22dc:	fc 01       	movw	r30, r24
    22de:	e2 0f       	add	r30, r18
    22e0:	f3 1f       	adc	r31, r19
    22e2:	80 81       	ld	r24, Z
    22e4:	0e 94 28 11 	call	0x2250	; 0x2250 <UART_VoidSendDataU8>



void UART_SendBufferSync(u8* Copy_u8Array,u8 Copy_Size){
	u8 Local_u8Iterator=0;
	for(Local_u8Iterator=0;Local_u8Iterator<Copy_Size;Local_u8Iterator++){
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	8f 5f       	subi	r24, 0xFF	; 255
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	99 81       	ldd	r25, Y+1	; 0x01
    22f0:	8c 81       	ldd	r24, Y+4	; 0x04
    22f2:	98 17       	cp	r25, r24
    22f4:	70 f3       	brcs	.-36     	; 0x22d2 <UART_SendBufferSync+0x18>
		UART_VoidSendDataU8(Copy_u8Array[Local_u8Iterator]);
	}

}
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	0f 90       	pop	r0
    22fe:	cf 91       	pop	r28
    2300:	df 91       	pop	r29
    2302:	08 95       	ret

00002304 <UART_SendStringSync>:
void UART_SendStringSync(string * Copy_u8String){
    2304:	df 93       	push	r29
    2306:	cf 93       	push	r28
    2308:	00 d0       	rcall	.+0      	; 0x230a <UART_SendStringSync+0x6>
    230a:	0f 92       	push	r0
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	9b 83       	std	Y+3, r25	; 0x03
    2312:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator=0;
    2314:	19 82       	std	Y+1, r1	; 0x01
    2316:	0e c0       	rjmp	.+28     	; 0x2334 <UART_SendStringSync+0x30>
//		UART_VoidSendDataU8(*(Copy_u8String));
	while(*(Copy_u8String+Local_u8Iterator)!='\0'){
		UART_VoidSendDataU8(*(Copy_u8String+Local_u8Iterator));
    2318:	89 81       	ldd	r24, Y+1	; 0x01
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	8a 81       	ldd	r24, Y+2	; 0x02
    2320:	9b 81       	ldd	r25, Y+3	; 0x03
    2322:	fc 01       	movw	r30, r24
    2324:	e2 0f       	add	r30, r18
    2326:	f3 1f       	adc	r31, r19
    2328:	80 81       	ld	r24, Z
    232a:	0e 94 28 11 	call	0x2250	; 0x2250 <UART_VoidSendDataU8>
		Local_u8Iterator++;
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	8f 5f       	subi	r24, 0xFF	; 255
    2332:	89 83       	std	Y+1, r24	; 0x01

}
void UART_SendStringSync(string * Copy_u8String){
	u8 Local_u8Iterator=0;
//		UART_VoidSendDataU8(*(Copy_u8String));
	while(*(Copy_u8String+Local_u8Iterator)!='\0'){
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	28 2f       	mov	r18, r24
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	9b 81       	ldd	r25, Y+3	; 0x03
    233e:	fc 01       	movw	r30, r24
    2340:	e2 0f       	add	r30, r18
    2342:	f3 1f       	adc	r31, r19
    2344:	80 81       	ld	r24, Z
    2346:	88 23       	and	r24, r24
    2348:	39 f7       	brne	.-50     	; 0x2318 <UART_SendStringSync+0x14>
		UART_VoidSendDataU8(*(Copy_u8String+Local_u8Iterator));
		Local_u8Iterator++;
	}
}
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	0f 90       	pop	r0
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <UART_ReceiveBufferSync>:



void UART_ReceiveBufferSync(u8* Copy_u8Data,u8 Copy_Size){
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	00 d0       	rcall	.+0      	; 0x235c <UART_ReceiveBufferSync+0x6>
    235c:	00 d0       	rcall	.+0      	; 0x235e <UART_ReceiveBufferSync+0x8>
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
    2362:	9b 83       	std	Y+3, r25	; 0x03
    2364:	8a 83       	std	Y+2, r24	; 0x02
    2366:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8Iterator=0;
    2368:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Data!=NULL){
    236a:	8a 81       	ldd	r24, Y+2	; 0x02
    236c:	9b 81       	ldd	r25, Y+3	; 0x03
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	91 f0       	breq	.+36     	; 0x2396 <UART_ReceiveBufferSync+0x40>
		for(Local_u8Iterator=0;Local_u8Iterator<Copy_Size;Local_u8Iterator++){
    2372:	19 82       	std	Y+1, r1	; 0x01
    2374:	0c c0       	rjmp	.+24     	; 0x238e <UART_ReceiveBufferSync+0x38>
			UART_VoidReceiveDataU8((Copy_u8Data+Local_u8Iterator));
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	8a 81       	ldd	r24, Y+2	; 0x02
    237e:	9b 81       	ldd	r25, Y+3	; 0x03
    2380:	82 0f       	add	r24, r18
    2382:	93 1f       	adc	r25, r19
    2384:	0e 94 42 11 	call	0x2284	; 0x2284 <UART_VoidReceiveDataU8>


void UART_ReceiveBufferSync(u8* Copy_u8Data,u8 Copy_Size){
	u8 Local_u8Iterator=0;
	if(Copy_u8Data!=NULL){
		for(Local_u8Iterator=0;Local_u8Iterator<Copy_Size;Local_u8Iterator++){
    2388:	89 81       	ldd	r24, Y+1	; 0x01
    238a:	8f 5f       	subi	r24, 0xFF	; 255
    238c:	89 83       	std	Y+1, r24	; 0x01
    238e:	99 81       	ldd	r25, Y+1	; 0x01
    2390:	8c 81       	ldd	r24, Y+4	; 0x04
    2392:	98 17       	cp	r25, r24
    2394:	80 f3       	brcs	.-32     	; 0x2376 <UART_ReceiveBufferSync+0x20>
		}
	}
	else{

	}
}
    2396:	0f 90       	pop	r0
    2398:	0f 90       	pop	r0
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <UART_ReceiveStringSync>:
void UART_ReceiveStringSync(string * Copy_u8String){
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <UART_ReceiveStringSync+0x6>
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <UART_ReceiveStringSync+0x8>
    23ac:	cd b7       	in	r28, 0x3d	; 61
    23ae:	de b7       	in	r29, 0x3e	; 62
    23b0:	9c 83       	std	Y+4, r25	; 0x04
    23b2:	8b 83       	std	Y+3, r24	; 0x03
	s8 Local_u8Iter=-1;
    23b4:	8f ef       	ldi	r24, 0xFF	; 255
    23b6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator=0;
    23b8:	19 82       	std	Y+1, r1	; 0x01
	do{//Receive characters one by one till a termination null is encountered
		if(Copy_u8String[Local_u8Iterator]=='\0'){
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	28 2f       	mov	r18, r24
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	fc 01       	movw	r30, r24
    23c6:	e2 0f       	add	r30, r18
    23c8:	f3 1f       	adc	r31, r19
    23ca:	80 81       	ld	r24, Z
    23cc:	88 23       	and	r24, r24
    23ce:	e1 f0       	breq	.+56     	; 0x2408 <UART_ReceiveStringSync+0x64>
			break;
		}
		//Type casting the string to address of u8
		UART_VoidReceiveDataU8((u8 *)(Copy_u8String+Local_u8Iterator));
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	28 2f       	mov	r18, r24
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	82 0f       	add	r24, r18
    23dc:	93 1f       	adc	r25, r19
    23de:	0e 94 42 11 	call	0x2284	; 0x2284 <UART_VoidReceiveDataU8>
		Local_u8Iterator++;
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	8f 5f       	subi	r24, 0xFF	; 255
    23e6:	89 83       	std	Y+1, r24	; 0x01
		Local_u8Iter++;
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	8f 5f       	subi	r24, 0xFF	; 255
    23ec:	8a 83       	std	Y+2, r24	; 0x02
	}
	while(Copy_u8String[Local_u8Iter]!='\0');
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	28 2f       	mov	r18, r24
    23f2:	33 27       	eor	r19, r19
    23f4:	27 fd       	sbrc	r18, 7
    23f6:	30 95       	com	r19
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	fc 01       	movw	r30, r24
    23fe:	e2 0f       	add	r30, r18
    2400:	f3 1f       	adc	r31, r19
    2402:	80 81       	ld	r24, Z
    2404:	88 23       	and	r24, r24
    2406:	c9 f6       	brne	.-78     	; 0x23ba <UART_ReceiveStringSync+0x16>
}
    2408:	0f 90       	pop	r0
    240a:	0f 90       	pop	r0
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <UART_SendBufferAsync>:




void UART_SendBufferAsync(u8* Copy_u8Data,u16 Copy_Size,void(*funcPtr)(void)){
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	00 d0       	rcall	.+0      	; 0x241c <UART_SendBufferAsync+0x6>
    241c:	00 d0       	rcall	.+0      	; 0x241e <UART_SendBufferAsync+0x8>
    241e:	00 d0       	rcall	.+0      	; 0x2420 <UART_SendBufferAsync+0xa>
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
    2424:	9a 83       	std	Y+2, r25	; 0x02
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	7c 83       	std	Y+4, r23	; 0x04
    242a:	6b 83       	std	Y+3, r22	; 0x03
    242c:	5e 83       	std	Y+6, r21	; 0x06
    242e:	4d 83       	std	Y+5, r20	; 0x05
	 * By Enabling the EMPTY UDR INT which indicates that the UDR is empty and ready to
	 * receive new data to send (ready to be written), and letting its INT send all elements.(AYSYC function
	 * only Initializes the needed parameters)
	 * */
	/*Checking if a Callback function is sent*/
	if(funcPtr!=NULL){
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	d1 f0       	breq	.+52     	; 0x246c <UART_SendBufferAsync+0x56>
		/*Enable transmit complete interrupt OR Enable Empty UDR interrupt*/

//		SetBit(UCSRB,UCSRB_SEND_INT_BIT);
		SetBit(UCSRB,UCSRB_EMPTY_INT_BIT);
    2438:	aa e2       	ldi	r26, 0x2A	; 42
    243a:	b0 e0       	ldi	r27, 0x00	; 0
    243c:	ea e2       	ldi	r30, 0x2A	; 42
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	80 62       	ori	r24, 0x20	; 32
    2444:	8c 93       	st	X, r24

		/*Checking if there is Buffer sent */
		if(Copy_u8Data !=NULL){
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	79 f0       	breq	.+30     	; 0x246c <UART_SendBufferAsync+0x56>
			/*Initializing Global array*/
			GlobalData=Copy_u8Data;
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	90 93 6c 02 	sts	0x026C, r25
    2456:	80 93 6b 02 	sts	0x026B, r24
			/*Setting call back function*/
			SendPtrCallBack=funcPtr;
    245a:	8d 81       	ldd	r24, Y+5	; 0x05
    245c:	9e 81       	ldd	r25, Y+6	; 0x06
    245e:	90 93 69 02 	sts	0x0269, r25
    2462:	80 93 68 02 	sts	0x0268, r24
			/*Assign Global size to size passed*/
			GlobalSendSize=Copy_Size;
    2466:	8b 81       	ldd	r24, Y+3	; 0x03
    2468:	80 93 6a 02 	sts	0x026A, r24
		}
	}
	else{
		/*Return Error-state no function is passed*/
	}
}
    246c:	26 96       	adiw	r28, 0x06	; 6
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	de bf       	out	0x3e, r29	; 62
    2474:	0f be       	out	0x3f, r0	; 63
    2476:	cd bf       	out	0x3d, r28	; 61
    2478:	cf 91       	pop	r28
    247a:	df 91       	pop	r29
    247c:	08 95       	ret

0000247e <UART_ReceiveBufferAsync>:


void UART_ReceiveBufferAsync(u8* Copy_u8Data,u8 Copy_Size,void(*funcPtr)(void)){
    247e:	df 93       	push	r29
    2480:	cf 93       	push	r28
    2482:	00 d0       	rcall	.+0      	; 0x2484 <UART_ReceiveBufferAsync+0x6>
    2484:	00 d0       	rcall	.+0      	; 0x2486 <UART_ReceiveBufferAsync+0x8>
    2486:	0f 92       	push	r0
    2488:	cd b7       	in	r28, 0x3d	; 61
    248a:	de b7       	in	r29, 0x3e	; 62
    248c:	9a 83       	std	Y+2, r25	; 0x02
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	6b 83       	std	Y+3, r22	; 0x03
    2492:	5d 83       	std	Y+5, r21	; 0x05
    2494:	4c 83       	std	Y+4, r20	; 0x04
	/*The Receive Complete Flag is flag which indicate that there is new data received in the UDR ready to be
	 * read, so by Enabling its INT, First element to last elements are read in the INT, AYSYC function
	 * only Initializes the needed parameters.
	 * */
	if(funcPtr!=NULL){
    2496:	8c 81       	ldd	r24, Y+4	; 0x04
    2498:	9d 81       	ldd	r25, Y+5	; 0x05
    249a:	00 97       	sbiw	r24, 0x00	; 0
    249c:	d1 f0       	breq	.+52     	; 0x24d2 <UART_ReceiveBufferAsync+0x54>
		if(Copy_u8Data!=NULL){
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	00 97       	sbiw	r24, 0x00	; 0
    24a4:	b1 f0       	breq	.+44     	; 0x24d2 <UART_ReceiveBufferAsync+0x54>
			/*Enable Receive data interrupt*/
			SetBit(UCSRB,UCSRB_RECEIVE_INT_BIT);
    24a6:	aa e2       	ldi	r26, 0x2A	; 42
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	ea e2       	ldi	r30, 0x2A	; 42
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	80 68       	ori	r24, 0x80	; 128
    24b2:	8c 93       	st	X, r24
			/*Initialize Receiving array*/
			GlobalReceiveData=Copy_u8Data;
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	90 93 71 02 	sts	0x0271, r25
    24bc:	80 93 70 02 	sts	0x0270, r24
			/*Initialize Size */
			GlobalReceiveSize=Copy_Size;
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	80 93 6f 02 	sts	0x026F, r24
			/*Initialize Callback pointer*/
			ReceivePtrCallBack=funcPtr;
    24c6:	8c 81       	ldd	r24, Y+4	; 0x04
    24c8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ca:	90 93 6e 02 	sts	0x026E, r25
    24ce:	80 93 6d 02 	sts	0x026D, r24
		}
	}
	else{
		/*If no Application function is sent , Error state No function is sent sent*/
	}
}
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <__vector_13>:



/*UART RECEIVE COMPLETE INT*/
void __vector_13 (void)__attribute((signal));
void __vector_13(void){
    24e2:	1f 92       	push	r1
    24e4:	0f 92       	push	r0
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	0f 92       	push	r0
    24ea:	11 24       	eor	r1, r1
    24ec:	2f 93       	push	r18
    24ee:	3f 93       	push	r19
    24f0:	4f 93       	push	r20
    24f2:	5f 93       	push	r21
    24f4:	6f 93       	push	r22
    24f6:	7f 93       	push	r23
    24f8:	8f 93       	push	r24
    24fa:	9f 93       	push	r25
    24fc:	af 93       	push	r26
    24fe:	bf 93       	push	r27
    2500:	ef 93       	push	r30
    2502:	ff 93       	push	r31
    2504:	df 93       	push	r29
    2506:	cf 93       	push	r28
    2508:	cd b7       	in	r28, 0x3d	; 61
    250a:	de b7       	in	r29, 0x3e	; 62
	if(ReceivePtrCallBack!=NULL){
    250c:	80 91 6d 02 	lds	r24, 0x026D
    2510:	90 91 6e 02 	lds	r25, 0x026E
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	31 f1       	breq	.+76     	; 0x2564 <__vector_13+0x82>
		static u8 Local_u8counter=0;
		/*Receive next characters, till the last one */
		GlobalReceiveData[Local_u8counter]=UDR;
    2518:	20 91 70 02 	lds	r18, 0x0270
    251c:	30 91 71 02 	lds	r19, 0x0271
    2520:	80 91 72 02 	lds	r24, 0x0272
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	d9 01       	movw	r26, r18
    252a:	a8 0f       	add	r26, r24
    252c:	b9 1f       	adc	r27, r25
    252e:	ec e2       	ldi	r30, 0x2C	; 44
    2530:	f0 e0       	ldi	r31, 0x00	; 0
    2532:	80 81       	ld	r24, Z
    2534:	8c 93       	st	X, r24
		Local_u8counter++;
    2536:	80 91 72 02 	lds	r24, 0x0272
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	80 93 72 02 	sts	0x0272, r24
		if(Local_u8counter==GlobalReceiveSize){
    2540:	90 91 72 02 	lds	r25, 0x0272
    2544:	80 91 6f 02 	lds	r24, 0x026F
    2548:	98 17       	cp	r25, r24
    254a:	61 f4       	brne	.+24     	; 0x2564 <__vector_13+0x82>
			/*Disable Interrupt*/
			ClearBit(UCSRB,UCSRB_RECEIVE_INT_BIT);
    254c:	aa e2       	ldi	r26, 0x2A	; 42
    254e:	b0 e0       	ldi	r27, 0x00	; 0
    2550:	ea e2       	ldi	r30, 0x2A	; 42
    2552:	f0 e0       	ldi	r31, 0x00	; 0
    2554:	80 81       	ld	r24, Z
    2556:	8f 77       	andi	r24, 0x7F	; 127
    2558:	8c 93       	st	X, r24
			/*After Receiving all elements,Invoke Callbackptr */
			ReceivePtrCallBack();
    255a:	e0 91 6d 02 	lds	r30, 0x026D
    255e:	f0 91 6e 02 	lds	r31, 0x026E
    2562:	09 95       	icall
	}

	else{
		/*If no Pointer is passed to the global pointer, Do nothing*/
	}
}
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	ff 91       	pop	r31
    256a:	ef 91       	pop	r30
    256c:	bf 91       	pop	r27
    256e:	af 91       	pop	r26
    2570:	9f 91       	pop	r25
    2572:	8f 91       	pop	r24
    2574:	7f 91       	pop	r23
    2576:	6f 91       	pop	r22
    2578:	5f 91       	pop	r21
    257a:	4f 91       	pop	r20
    257c:	3f 91       	pop	r19
    257e:	2f 91       	pop	r18
    2580:	0f 90       	pop	r0
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	0f 90       	pop	r0
    2586:	1f 90       	pop	r1
    2588:	18 95       	reti

0000258a <__vector_14>:
/*UART EMPTY UDR INT*/
void __vector_14 (void)__attribute((signal));
void __vector_14(void){
    258a:	1f 92       	push	r1
    258c:	0f 92       	push	r0
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	0f 92       	push	r0
    2592:	11 24       	eor	r1, r1
    2594:	2f 93       	push	r18
    2596:	3f 93       	push	r19
    2598:	4f 93       	push	r20
    259a:	5f 93       	push	r21
    259c:	6f 93       	push	r22
    259e:	7f 93       	push	r23
    25a0:	8f 93       	push	r24
    25a2:	9f 93       	push	r25
    25a4:	af 93       	push	r26
    25a6:	bf 93       	push	r27
    25a8:	ef 93       	push	r30
    25aa:	ff 93       	push	r31
    25ac:	df 93       	push	r29
    25ae:	cf 93       	push	r28
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
	if(SendPtrCallBack!=NULL){
    25b4:	80 91 68 02 	lds	r24, 0x0268
    25b8:	90 91 69 02 	lds	r25, 0x0269
    25bc:	00 97       	sbiw	r24, 0x00	; 0
    25be:	31 f1       	breq	.+76     	; 0x260c <__vector_14+0x82>
		static u8 Local_u8counter=0;

		UDR=GlobalData[Local_u8counter];
    25c0:	ac e2       	ldi	r26, 0x2C	; 44
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	20 91 6b 02 	lds	r18, 0x026B
    25c8:	30 91 6c 02 	lds	r19, 0x026C
    25cc:	80 91 73 02 	lds	r24, 0x0273
    25d0:	88 2f       	mov	r24, r24
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	f9 01       	movw	r30, r18
    25d6:	e8 0f       	add	r30, r24
    25d8:	f9 1f       	adc	r31, r25
    25da:	80 81       	ld	r24, Z
    25dc:	8c 93       	st	X, r24
		Local_u8counter++;
    25de:	80 91 73 02 	lds	r24, 0x0273
    25e2:	8f 5f       	subi	r24, 0xFF	; 255
    25e4:	80 93 73 02 	sts	0x0273, r24
		if(Local_u8counter==GlobalSendSize){
    25e8:	90 91 73 02 	lds	r25, 0x0273
    25ec:	80 91 6a 02 	lds	r24, 0x026A
    25f0:	98 17       	cp	r25, r24
    25f2:	61 f4       	brne	.+24     	; 0x260c <__vector_14+0x82>
			/*Disable Interrupt*/
			ClearBit(UCSRB,UCSRB_EMPTY_INT_BIT);
    25f4:	aa e2       	ldi	r26, 0x2A	; 42
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	ea e2       	ldi	r30, 0x2A	; 42
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	8f 7d       	andi	r24, 0xDF	; 223
    2600:	8c 93       	st	X, r24
			/*After Sending all elements,Invoke Callbackptr */
			SendPtrCallBack();
    2602:	e0 91 68 02 	lds	r30, 0x0268
    2606:	f0 91 69 02 	lds	r31, 0x0269
    260a:	09 95       	icall
	}
	else{
		/*If no Pointer is passed to the global pointer, Do nothing*/
	}

}
    260c:	cf 91       	pop	r28
    260e:	df 91       	pop	r29
    2610:	ff 91       	pop	r31
    2612:	ef 91       	pop	r30
    2614:	bf 91       	pop	r27
    2616:	af 91       	pop	r26
    2618:	9f 91       	pop	r25
    261a:	8f 91       	pop	r24
    261c:	7f 91       	pop	r23
    261e:	6f 91       	pop	r22
    2620:	5f 91       	pop	r21
    2622:	4f 91       	pop	r20
    2624:	3f 91       	pop	r19
    2626:	2f 91       	pop	r18
    2628:	0f 90       	pop	r0
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	0f 90       	pop	r0
    262e:	1f 90       	pop	r1
    2630:	18 95       	reti

00002632 <__vector_15>:


/*UART SEND COMPLETE INT*/
void __vector_15 (void)__attribute((signal));
void __vector_15(void){
    2632:	1f 92       	push	r1
    2634:	0f 92       	push	r0
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	0f 92       	push	r0
    263a:	11 24       	eor	r1, r1
    263c:	2f 93       	push	r18
    263e:	3f 93       	push	r19
    2640:	4f 93       	push	r20
    2642:	5f 93       	push	r21
    2644:	6f 93       	push	r22
    2646:	7f 93       	push	r23
    2648:	8f 93       	push	r24
    264a:	9f 93       	push	r25
    264c:	af 93       	push	r26
    264e:	bf 93       	push	r27
    2650:	ef 93       	push	r30
    2652:	ff 93       	push	r31
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
	if(SendPtrCallBack!=NULL){
    265c:	80 91 68 02 	lds	r24, 0x0268
    2660:	90 91 69 02 	lds	r25, 0x0269
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	39 f1       	breq	.+78     	; 0x26b6 <__vector_15+0x84>
		static u8 Local_u8counter=0;
		Local_u8counter++;
    2668:	80 91 74 02 	lds	r24, 0x0274
    266c:	8f 5f       	subi	r24, 0xFF	; 255
    266e:	80 93 74 02 	sts	0x0274, r24
		if(Local_u8counter<GlobalSendSize){
    2672:	90 91 74 02 	lds	r25, 0x0274
    2676:	80 91 6a 02 	lds	r24, 0x026A
    267a:	98 17       	cp	r25, r24
    267c:	80 f4       	brcc	.+32     	; 0x269e <__vector_15+0x6c>
			/*Send next character */
			UDR=GlobalData[Local_u8counter];
    267e:	ac e2       	ldi	r26, 0x2C	; 44
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	20 91 6b 02 	lds	r18, 0x026B
    2686:	30 91 6c 02 	lds	r19, 0x026C
    268a:	80 91 74 02 	lds	r24, 0x0274
    268e:	88 2f       	mov	r24, r24
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	f9 01       	movw	r30, r18
    2694:	e8 0f       	add	r30, r24
    2696:	f9 1f       	adc	r31, r25
    2698:	80 81       	ld	r24, Z
    269a:	8c 93       	st	X, r24
    269c:	0c c0       	rjmp	.+24     	; 0x26b6 <__vector_15+0x84>
		}
		else{
			/*Disable Interrupt*/
			ClearBit(UCSRB,UCSRB_SEND_INT_BIT);
    269e:	aa e2       	ldi	r26, 0x2A	; 42
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	ea e2       	ldi	r30, 0x2A	; 42
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	80 81       	ld	r24, Z
    26a8:	8f 7b       	andi	r24, 0xBF	; 191
    26aa:	8c 93       	st	X, r24
			/*After sending all elements,Invoke Callbackptr */
			SendPtrCallBack();
    26ac:	e0 91 68 02 	lds	r30, 0x0268
    26b0:	f0 91 69 02 	lds	r31, 0x0269
    26b4:	09 95       	icall
	}
	else{
		/*If no Pointer is passed to the global pointer, Do nothing*/
	}

}
    26b6:	cf 91       	pop	r28
    26b8:	df 91       	pop	r29
    26ba:	ff 91       	pop	r31
    26bc:	ef 91       	pop	r30
    26be:	bf 91       	pop	r27
    26c0:	af 91       	pop	r26
    26c2:	9f 91       	pop	r25
    26c4:	8f 91       	pop	r24
    26c6:	7f 91       	pop	r23
    26c8:	6f 91       	pop	r22
    26ca:	5f 91       	pop	r21
    26cc:	4f 91       	pop	r20
    26ce:	3f 91       	pop	r19
    26d0:	2f 91       	pop	r18
    26d2:	0f 90       	pop	r0
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	0f 90       	pop	r0
    26d8:	1f 90       	pop	r1
    26da:	18 95       	reti

000026dc <I2C_voidMasterInit>:
#include "I2C_Private.h"
#include "I2C_Config.h"
#include "I2C_Interface.h"


void I2C_voidMasterInit(){
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62

	/*enable ACK bit  */

	ClearBit(TWCR,TWCR_TWEA_BIT);
    26e4:	a6 e5       	ldi	r26, 0x56	; 86
    26e6:	b0 e0       	ldi	r27, 0x00	; 0
    26e8:	e6 e5       	ldi	r30, 0x56	; 86
    26ea:	f0 e0       	ldi	r31, 0x00	; 0
    26ec:	80 81       	ld	r24, Z
    26ee:	8f 7b       	andi	r24, 0xBF	; 191
    26f0:	8c 93       	st	X, r24

	/*Set frequency to 400kbps*/
	ClearBit(TWSR,0);
    26f2:	a1 e2       	ldi	r26, 0x21	; 33
    26f4:	b0 e0       	ldi	r27, 0x00	; 0
    26f6:	e1 e2       	ldi	r30, 0x21	; 33
    26f8:	f0 e0       	ldi	r31, 0x00	; 0
    26fa:	80 81       	ld	r24, Z
    26fc:	8e 7f       	andi	r24, 0xFE	; 254
    26fe:	8c 93       	st	X, r24
	ClearBit(TWSR,0);
    2700:	a1 e2       	ldi	r26, 0x21	; 33
    2702:	b0 e0       	ldi	r27, 0x00	; 0
    2704:	e1 e2       	ldi	r30, 0x21	; 33
    2706:	f0 e0       	ldi	r31, 0x00	; 0
    2708:	80 81       	ld	r24, Z
    270a:	8e 7f       	andi	r24, 0xFE	; 254
    270c:	8c 93       	st	X, r24

	TWBR=2;
    270e:	e0 e2       	ldi	r30, 0x20	; 32
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	82 e0       	ldi	r24, 0x02	; 2
    2714:	80 83       	st	Z, r24

	/*Enable TWI */
	SetBit(TWCR,TWCR_TWEN_BIT);
    2716:	a6 e5       	ldi	r26, 0x56	; 86
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	e6 e5       	ldi	r30, 0x56	; 86
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	80 81       	ld	r24, Z
    2720:	84 60       	ori	r24, 0x04	; 4
    2722:	8c 93       	st	X, r24

}
    2724:	cf 91       	pop	r28
    2726:	df 91       	pop	r29
    2728:	08 95       	ret

0000272a <I2C_SendStartCondition>:





I2C_ErrorStatus I2C_SendStartCondition(void){
    272a:	df 93       	push	r29
    272c:	cf 93       	push	r28
    272e:	0f 92       	push	r0
    2730:	cd b7       	in	r28, 0x3d	; 61
    2732:	de b7       	in	r29, 0x3e	; 62
	u8 ErrorStatus=NoError;
    2734:	19 82       	std	Y+1, r1	; 0x01

	/*Writing one to START Condition Bit */
	SetBit(TWCR,TWCR_TWSTA_BIT);
    2736:	a6 e5       	ldi	r26, 0x56	; 86
    2738:	b0 e0       	ldi	r27, 0x00	; 0
    273a:	e6 e5       	ldi	r30, 0x56	; 86
    273c:	f0 e0       	ldi	r31, 0x00	; 0
    273e:	80 81       	ld	r24, Z
    2740:	80 62       	ori	r24, 0x20	; 32
    2742:	8c 93       	st	X, r24
	/*Clearing the flag by Writing one to it, To start the operation*/
	SetBit(TWCR,TWCR_TWINT_BIT);
    2744:	a6 e5       	ldi	r26, 0x56	; 86
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e6 e5       	ldi	r30, 0x56	; 86
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	80 68       	ori	r24, 0x80	; 128
    2750:	8c 93       	st	X, r24
	/*Wait for the transmission flag to be up*/
	while(GetBit(TWCR,TWCR_TWINT_BIT)==0);
    2752:	e6 e5       	ldi	r30, 0x56	; 86
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	88 23       	and	r24, r24
    275a:	dc f7       	brge	.-10     	; 0x2752 <I2C_SendStartCondition+0x28>

	if((TWSR&TWSR_PRE_SCALER_MASK)!=TWSR_START_DONE){
    275c:	e1 e2       	ldi	r30, 0x21	; 33
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	88 2f       	mov	r24, r24
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	88 7f       	andi	r24, 0xF8	; 248
    2768:	90 70       	andi	r25, 0x00	; 0
    276a:	88 30       	cpi	r24, 0x08	; 8
    276c:	91 05       	cpc	r25, r1
    276e:	11 f0       	breq	.+4      	; 0x2774 <I2C_SendStartCondition+0x4a>
		ErrorStatus=StartConditionErr;
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	89 83       	std	Y+1, r24	; 0x01
	}
	else{

	}

return ErrorStatus;
    2774:	89 81       	ldd	r24, Y+1	; 0x01
}
    2776:	0f 90       	pop	r0
    2778:	cf 91       	pop	r28
    277a:	df 91       	pop	r29
    277c:	08 95       	ret

0000277e <I2C_SendRepeatedStart>:

I2C_ErrorStatus I2C_SendRepeatedStart(void){
    277e:	df 93       	push	r29
    2780:	cf 93       	push	r28
    2782:	0f 92       	push	r0
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
	u8 ErrorStatus=NoError;
    2788:	19 82       	std	Y+1, r1	; 0x01
	/*Set the start condition*/
	SetBit(TWCR,TWCR_TWSTA_BIT);
    278a:	a6 e5       	ldi	r26, 0x56	; 86
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	e6 e5       	ldi	r30, 0x56	; 86
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	80 62       	ori	r24, 0x20	; 32
    2796:	8c 93       	st	X, r24

	/*Clear interrupt flag to start the previous operation*/
	SetBit(TWCR,TWCR_TWINT_BIT);
    2798:	a6 e5       	ldi	r26, 0x56	; 86
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	e6 e5       	ldi	r30, 0x56	; 86
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	80 68       	ori	r24, 0x80	; 128
    27a4:	8c 93       	st	X, r24

	/*Polling on the interrupt flag*/
	while((GetBit(TWCR,TWCR_TWINT_BIT))==0);
    27a6:	e6 e5       	ldi	r30, 0x56	; 86
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	88 23       	and	r24, r24
    27ae:	dc f7       	brge	.-10     	; 0x27a6 <I2C_SendRepeatedStart+0x28>

	/*check on the operation status ID*/
	if((TWSR&TWSR_PRE_SCALER_MASK) != TWSR_RE_START_DONE)
    27b0:	e1 e2       	ldi	r30, 0x21	; 33
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	88 2f       	mov	r24, r24
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	88 7f       	andi	r24, 0xF8	; 248
    27bc:	90 70       	andi	r25, 0x00	; 0
    27be:	80 31       	cpi	r24, 0x10	; 16
    27c0:	91 05       	cpc	r25, r1
    27c2:	11 f0       	breq	.+4      	; 0x27c8 <I2C_SendRepeatedStart+0x4a>
	{
		ErrorStatus= RepeatedStartError;
    27c4:	82 e0       	ldi	r24, 0x02	; 2
    27c6:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		/*Do nothing*/
	}

	return ErrorStatus;
    27c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ca:	0f 90       	pop	r0
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	08 95       	ret

000027d2 <I2C_SendSlaveAddressWithWrite>:

I2C_ErrorStatus I2C_SendSlaveAddressWithWrite(u8 Copy_u8SlaveAdress){
    27d2:	df 93       	push	r29
    27d4:	cf 93       	push	r28
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <I2C_SendSlaveAddressWithWrite+0x6>
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	8a 83       	std	Y+2, r24	; 0x02
	/*Before using the function,Please Check the return status of TWSR of
	the function I2C_SendStartCondition (START CONDITION RETURN)*/
	/*TWDR MUST BE SET BEFORE MANIPULATING TWCR VALUES */
	u8 ErrorStatus=NoError;
    27de:	19 82       	std	Y+1, r1	; 0x01
	/*Assigning the 7 bit address to TWDR*/
	TWDR=((Copy_u8SlaveAdress<<1));
    27e0:	e3 e2       	ldi	r30, 0x23	; 35
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	8a 81       	ldd	r24, Y+2	; 0x02
    27e6:	88 0f       	add	r24, r24
    27e8:	80 83       	st	Z, r24
	/*Sending the write command */
	ClearBit(TWDR,0);
    27ea:	a3 e2       	ldi	r26, 0x23	; 35
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	e3 e2       	ldi	r30, 0x23	; 35
    27f0:	f0 e0       	ldi	r31, 0x00	; 0
    27f2:	80 81       	ld	r24, Z
    27f4:	8e 7f       	andi	r24, 0xFE	; 254
    27f6:	8c 93       	st	X, r24

	/*Clearing Start Condition Bit */
	ClearBit(TWCR,TWCR_TWSTA_BIT);
    27f8:	a6 e5       	ldi	r26, 0x56	; 86
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e6 e5       	ldi	r30, 0x56	; 86
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	8f 7d       	andi	r24, 0xDF	; 223
    2804:	8c 93       	st	X, r24
	/*Clearing the flag by Writing one to it, To start the operation*/
	SetBit(TWCR,TWCR_TWINT_BIT);
    2806:	a6 e5       	ldi	r26, 0x56	; 86
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e6 e5       	ldi	r30, 0x56	; 86
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	80 68       	ori	r24, 0x80	; 128
    2812:	8c 93       	st	X, r24
	/*Wait for the transmission flag to be up*/
	while(GetBit(TWCR,TWCR_TWINT_BIT)==0);
    2814:	e6 e5       	ldi	r30, 0x56	; 86
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	88 23       	and	r24, r24
    281c:	dc f7       	brge	.-10     	; 0x2814 <I2C_SendSlaveAddressWithWrite+0x42>

	if((TWSR&TWSR_PRE_SCALER_MASK)!=TWSR_SLAVE_ADD_W_ACK && (TWSR&TWSR_PRE_SCALER_MASK)!=TWSR_SLAVE_ADD_W_NO_ACK){
    281e:	e1 e2       	ldi	r30, 0x21	; 33
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	88 2f       	mov	r24, r24
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	88 7f       	andi	r24, 0xF8	; 248
    282a:	90 70       	andi	r25, 0x00	; 0
    282c:	88 31       	cpi	r24, 0x18	; 24
    282e:	91 05       	cpc	r25, r1
    2830:	61 f0       	breq	.+24     	; 0x284a <I2C_SendSlaveAddressWithWrite+0x78>
    2832:	e1 e2       	ldi	r30, 0x21	; 33
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	88 2f       	mov	r24, r24
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	88 7f       	andi	r24, 0xF8	; 248
    283e:	90 70       	andi	r25, 0x00	; 0
    2840:	80 32       	cpi	r24, 0x20	; 32
    2842:	91 05       	cpc	r25, r1
    2844:	11 f0       	breq	.+4      	; 0x284a <I2C_SendSlaveAddressWithWrite+0x78>
		ErrorStatus=SlaveAddressWithWriteErr;
    2846:	83 e0       	ldi	r24, 0x03	; 3
    2848:	89 83       	std	Y+1, r24	; 0x01
	else{

	}


	return ErrorStatus;
    284a:	89 81       	ldd	r24, Y+1	; 0x01
}
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	08 95       	ret

00002856 <I2C_SendSlaveAddressWithRead>:

I2C_ErrorStatus I2C_SendSlaveAddressWithRead(u8 Copy_u8SlaveAdress){
    2856:	df 93       	push	r29
    2858:	cf 93       	push	r28
    285a:	00 d0       	rcall	.+0      	; 0x285c <I2C_SendSlaveAddressWithRead+0x6>
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
    2860:	8a 83       	std	Y+2, r24	; 0x02
	/*Before using the function,Please Check the return status of TWSR of
	the function I2C_SendStartCondition (START CONDITION RETURN)*/
	u8 ErrorStatus=NoError;
    2862:	19 82       	std	Y+1, r1	; 0x01
	/*Assigning the 7 bit address to TWDR*/
	TWDR=((Copy_u8SlaveAdress<<1));
    2864:	e3 e2       	ldi	r30, 0x23	; 35
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	8a 81       	ldd	r24, Y+2	; 0x02
    286a:	88 0f       	add	r24, r24
    286c:	80 83       	st	Z, r24
	/*Sending the Reading command */
	SetBit(TWDR,0);
    286e:	a3 e2       	ldi	r26, 0x23	; 35
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	e3 e2       	ldi	r30, 0x23	; 35
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	81 60       	ori	r24, 0x01	; 1
    287a:	8c 93       	st	X, r24
	//*Clearing Start Condition Bit */
	ClearBit(TWCR,TWCR_TWSTA_BIT);
    287c:	a6 e5       	ldi	r26, 0x56	; 86
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	e6 e5       	ldi	r30, 0x56	; 86
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	8f 7d       	andi	r24, 0xDF	; 223
    2888:	8c 93       	st	X, r24


	/*Clearing the flag by Writing one to it, To start the operation*/
	SetBit(TWCR,TWCR_TWINT_BIT);
    288a:	a6 e5       	ldi	r26, 0x56	; 86
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	e6 e5       	ldi	r30, 0x56	; 86
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	80 68       	ori	r24, 0x80	; 128
    2896:	8c 93       	st	X, r24
	/*Wait for the transmission flag to be up*/
	while(GetBit(TWCR,TWCR_TWINT_BIT)==0);
    2898:	e6 e5       	ldi	r30, 0x56	; 86
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	80 81       	ld	r24, Z
    289e:	88 23       	and	r24, r24
    28a0:	dc f7       	brge	.-10     	; 0x2898 <I2C_SendSlaveAddressWithRead+0x42>

	if((TWSR&TWSR_PRE_SCALER_MASK)!=TWSR_SLAVE_ADD_R_ACK && (TWSR&TWSR_PRE_SCALER_MASK)!=TWSR_SLAVE_ADD_R_NO_ACK){
    28a2:	e1 e2       	ldi	r30, 0x21	; 33
    28a4:	f0 e0       	ldi	r31, 0x00	; 0
    28a6:	80 81       	ld	r24, Z
    28a8:	88 2f       	mov	r24, r24
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	88 7f       	andi	r24, 0xF8	; 248
    28ae:	90 70       	andi	r25, 0x00	; 0
    28b0:	80 34       	cpi	r24, 0x40	; 64
    28b2:	91 05       	cpc	r25, r1
    28b4:	61 f0       	breq	.+24     	; 0x28ce <I2C_SendSlaveAddressWithRead+0x78>
    28b6:	e1 e2       	ldi	r30, 0x21	; 33
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	80 81       	ld	r24, Z
    28bc:	88 2f       	mov	r24, r24
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	88 7f       	andi	r24, 0xF8	; 248
    28c2:	90 70       	andi	r25, 0x00	; 0
    28c4:	88 34       	cpi	r24, 0x48	; 72
    28c6:	91 05       	cpc	r25, r1
    28c8:	11 f0       	breq	.+4      	; 0x28ce <I2C_SendSlaveAddressWithRead+0x78>
		ErrorStatus=SlaveAddressWithReadErr;
    28ca:	84 e0       	ldi	r24, 0x04	; 4
    28cc:	89 83       	std	Y+1, r24	; 0x01
	}
	else{

	}

	return ErrorStatus;
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    28d0:	0f 90       	pop	r0
    28d2:	0f 90       	pop	r0
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <I2C_MstrSendDataByte>:

I2C_ErrorStatus I2C_MstrSendDataByte(u8 Copy_u8Data){
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <I2C_MstrSendDataByte+0x6>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	8a 83       	std	Y+2, r24	; 0x02
	/*Before using the function,Please Check the return status of TWSR of
	 * the function I2C_SendSlaveAddressWithWrite (Send address Write RETURN)*/
	u8 ErrorStatus=NoError;
    28e6:	19 82       	std	Y+1, r1	; 0x01
	/*Assigning the Data TWDR*/
	TWDR=Copy_u8Data;
    28e8:	e3 e2       	ldi	r30, 0x23	; 35
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	8a 81       	ldd	r24, Y+2	; 0x02
    28ee:	80 83       	st	Z, r24

	/*Writing one to START Condition Bit */
	ClearBit(TWCR,TWCR_TWSTA_BIT);
    28f0:	a6 e5       	ldi	r26, 0x56	; 86
    28f2:	b0 e0       	ldi	r27, 0x00	; 0
    28f4:	e6 e5       	ldi	r30, 0x56	; 86
    28f6:	f0 e0       	ldi	r31, 0x00	; 0
    28f8:	80 81       	ld	r24, Z
    28fa:	8f 7d       	andi	r24, 0xDF	; 223
    28fc:	8c 93       	st	X, r24
	/*Clearing the flag by Writing one to it, To start the operation*/
	SetBit(TWCR,TWCR_TWINT_BIT);
    28fe:	a6 e5       	ldi	r26, 0x56	; 86
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e6 e5       	ldi	r30, 0x56	; 86
    2904:	f0 e0       	ldi	r31, 0x00	; 0
    2906:	80 81       	ld	r24, Z
    2908:	80 68       	ori	r24, 0x80	; 128
    290a:	8c 93       	st	X, r24
	/*Wait for the transmission flag to be up*/
	while(GetBit(TWCR,TWCR_TWINT_BIT)==0);
    290c:	e6 e5       	ldi	r30, 0x56	; 86
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	88 23       	and	r24, r24
    2914:	dc f7       	brge	.-10     	; 0x290c <I2C_MstrSendDataByte+0x32>

	if((TWSR&TWSR_PRE_SCALER_MASK)!=TWSR_DATA_W_ACK	 && (TWSR&TWSR_PRE_SCALER_MASK)!=TWSR_DATA_W_NO_ACK){
    2916:	e1 e2       	ldi	r30, 0x21	; 33
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	88 2f       	mov	r24, r24
    291e:	90 e0       	ldi	r25, 0x00	; 0
    2920:	88 7f       	andi	r24, 0xF8	; 248
    2922:	90 70       	andi	r25, 0x00	; 0
    2924:	88 32       	cpi	r24, 0x28	; 40
    2926:	91 05       	cpc	r25, r1
    2928:	61 f0       	breq	.+24     	; 0x2942 <I2C_MstrSendDataByte+0x68>
    292a:	e1 e2       	ldi	r30, 0x21	; 33
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	88 2f       	mov	r24, r24
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	88 7f       	andi	r24, 0xF8	; 248
    2936:	90 70       	andi	r25, 0x00	; 0
    2938:	80 33       	cpi	r24, 0x30	; 48
    293a:	91 05       	cpc	r25, r1
    293c:	11 f0       	breq	.+4      	; 0x2942 <I2C_MstrSendDataByte+0x68>
		ErrorStatus=MstrWriteByteErr;
    293e:	85 e0       	ldi	r24, 0x05	; 5
    2940:	89 83       	std	Y+1, r24	; 0x01
	}
	else{

	}

	return ErrorStatus;
    2942:	89 81       	ldd	r24, Y+1	; 0x01
}
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <I2C_MstrReadDataByte>:

I2C_ErrorStatus I2C_MstrReadDataByte(pstring Copy_pu8Data){
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <I2C_MstrReadDataByte+0x6>
    2954:	0f 92       	push	r0
    2956:	cd b7       	in	r28, 0x3d	; 61
    2958:	de b7       	in	r29, 0x3e	; 62
    295a:	9b 83       	std	Y+3, r25	; 0x03
    295c:	8a 83       	std	Y+2, r24	; 0x02
	/*Before using the function,Please Check the return status of TWSR of
	  the function I2C_SendSlaveAddressWithRead (Send address Read RETURN)*/
	u8 ErrorStatus=NoError;
    295e:	19 82       	std	Y+1, r1	; 0x01

	/*Enable Acknowledge bit generation of master receiver*/
	SetBit(TWCR,TWCR_TWEA_BIT);
    2960:	a6 e5       	ldi	r26, 0x56	; 86
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e6 e5       	ldi	r30, 0x56	; 86
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	80 64       	ori	r24, 0x40	; 64
    296c:	8c 93       	st	X, r24


	/*Wait for the transmission flag to be up*/
	while(GetBit(TWCR,TWCR_TWINT_BIT)==0);
    296e:	e6 e5       	ldi	r30, 0x56	; 86
    2970:	f0 e0       	ldi	r31, 0x00	; 0
    2972:	80 81       	ld	r24, Z
    2974:	88 23       	and	r24, r24
    2976:	dc f7       	brge	.-10     	; 0x296e <I2C_MstrReadDataByte+0x20>

	ErrorStatus=(TWSR&TWSR_PRE_SCALER_MASK);
    2978:	e1 e2       	ldi	r30, 0x21	; 33
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	88 7f       	andi	r24, 0xF8	; 248
    2980:	89 83       	std	Y+1, r24	; 0x01
	if((TWSR&TWSR_PRE_SCALER_MASK)==TWSR_DATA_R_ACK){
    2982:	e1 e2       	ldi	r30, 0x21	; 33
    2984:	f0 e0       	ldi	r31, 0x00	; 0
    2986:	80 81       	ld	r24, Z
    2988:	88 2f       	mov	r24, r24
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	88 7f       	andi	r24, 0xF8	; 248
    298e:	90 70       	andi	r25, 0x00	; 0
    2990:	80 35       	cpi	r24, 0x50	; 80
    2992:	91 05       	cpc	r25, r1
    2994:	39 f4       	brne	.+14     	; 0x29a4 <I2C_MstrReadDataByte+0x56>
		/*Assigning the Data TWDR*/
		*Copy_pu8Data=TWDR;
    2996:	e3 e2       	ldi	r30, 0x23	; 35
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	ea 81       	ldd	r30, Y+2	; 0x02
    299e:	fb 81       	ldd	r31, Y+3	; 0x03
    29a0:	80 83       	st	Z, r24
    29a2:	02 c0       	rjmp	.+4      	; 0x29a8 <I2C_MstrReadDataByte+0x5a>
	}
	else{
		ErrorStatus=MstrReadByteWithAckErr;
    29a4:	86 e0       	ldi	r24, 0x06	; 6
    29a6:	89 83       	std	Y+1, r24	; 0x01
	}

	return ErrorStatus;
    29a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	cf 91       	pop	r28
    29b2:	df 91       	pop	r29
    29b4:	08 95       	ret

000029b6 <I2C_MstrReadDataByteNoAck>:





I2C_ErrorStatus I2C_MstrReadDataByteNoAck(pstring Copy_pu8Data){
    29b6:	df 93       	push	r29
    29b8:	cf 93       	push	r28
    29ba:	00 d0       	rcall	.+0      	; 0x29bc <I2C_MstrReadDataByteNoAck+0x6>
    29bc:	0f 92       	push	r0
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	9b 83       	std	Y+3, r25	; 0x03
    29c4:	8a 83       	std	Y+2, r24	; 0x02
	/*Before using the function,Please Check the return status of TWSR of
	the function I2C_SendSlaveAddressWithRead (Send address Read RETURN)*/
	u8 ErrorStatus=NoError;
    29c6:	19 82       	std	Y+1, r1	; 0x01


	/*Disable Acknowledge bit generation of master receiver*/
		ClearBit(TWCR,TWCR_TWEA_BIT);
    29c8:	a6 e5       	ldi	r26, 0x56	; 86
    29ca:	b0 e0       	ldi	r27, 0x00	; 0
    29cc:	e6 e5       	ldi	r30, 0x56	; 86
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	80 81       	ld	r24, Z
    29d2:	8f 7b       	andi	r24, 0xBF	; 191
    29d4:	8c 93       	st	X, r24

	/*Wait for the transmission flag to be up*/
	while(GetBit(TWCR,TWCR_TWINT_BIT)==0);
    29d6:	e6 e5       	ldi	r30, 0x56	; 86
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	88 23       	and	r24, r24
    29de:	dc f7       	brge	.-10     	; 0x29d6 <I2C_MstrReadDataByteNoAck+0x20>

	ErrorStatus=(TWSR&TWSR_PRE_SCALER_MASK);
    29e0:	e1 e2       	ldi	r30, 0x21	; 33
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	88 7f       	andi	r24, 0xF8	; 248
    29e8:	89 83       	std	Y+1, r24	; 0x01
	if((TWSR&TWSR_PRE_SCALER_MASK)==TWSR_DATA_R_ACK){
    29ea:	e1 e2       	ldi	r30, 0x21	; 33
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	88 2f       	mov	r24, r24
    29f2:	90 e0       	ldi	r25, 0x00	; 0
    29f4:	88 7f       	andi	r24, 0xF8	; 248
    29f6:	90 70       	andi	r25, 0x00	; 0
    29f8:	80 35       	cpi	r24, 0x50	; 80
    29fa:	91 05       	cpc	r25, r1
    29fc:	39 f4       	brne	.+14     	; 0x2a0c <I2C_MstrReadDataByteNoAck+0x56>
		/*Assigning the Data TWDR*/
		*Copy_pu8Data=TWDR;
    29fe:	e3 e2       	ldi	r30, 0x23	; 35
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	ea 81       	ldd	r30, Y+2	; 0x02
    2a06:	fb 81       	ldd	r31, Y+3	; 0x03
    2a08:	80 83       	st	Z, r24
    2a0a:	02 c0       	rjmp	.+4      	; 0x2a10 <I2C_MstrReadDataByteNoAck+0x5a>

	}
	else{
		ErrorStatus=MstrReadByteWithAckErr;
    2a0c:	86 e0       	ldi	r24, 0x06	; 6
    2a0e:	89 83       	std	Y+1, r24	; 0x01
	}

	return ErrorStatus;
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a12:	0f 90       	pop	r0
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	cf 91       	pop	r28
    2a1a:	df 91       	pop	r29
    2a1c:	08 95       	ret

00002a1e <I2C_SendStopCondition>:





void I2C_SendStopCondition(void){
    2a1e:	df 93       	push	r29
    2a20:	cf 93       	push	r28
    2a22:	cd b7       	in	r28, 0x3d	; 61
    2a24:	de b7       	in	r29, 0x3e	; 62
	/*Writing one to STOP Condition Bit */
	SetBit(TWCR,TWCR_TWSTO_BIT);
    2a26:	a6 e5       	ldi	r26, 0x56	; 86
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	e6 e5       	ldi	r30, 0x56	; 86
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	80 61       	ori	r24, 0x10	; 16
    2a32:	8c 93       	st	X, r24
	/*Clear interrupt flag to start the previous operation*/
	SetBit(TWCR,TWCR_TWINT_BIT);
    2a34:	a6 e5       	ldi	r26, 0x56	; 86
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e6 e5       	ldi	r30, 0x56	; 86
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	80 68       	ori	r24, 0x80	; 128
    2a40:	8c 93       	st	X, r24
}
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	08 95       	ret

00002a48 <DIO_s8SetPinDirection>:

#include "DIO_Interface.h"



Dio_enErrorStatus DIO_s8SetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinIDDirection){
    2a48:	df 93       	push	r29
    2a4a:	cf 93       	push	r28
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	2e 97       	sbiw	r28, 0x0e	; 14
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	de bf       	out	0x3e, r29	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	cd bf       	out	0x3d, r28	; 61
    2a5c:	8a 83       	std	Y+2, r24	; 0x02
    2a5e:	6b 83       	std	Y+3, r22	; 0x03
    2a60:	4c 83       	std	Y+4, r20	; 0x04
	/*initially = 0 (ok)*/
	Dio_enErrorStatus Local_s8ErrorState = DIO_S8_OK;
    2a62:	19 82       	std	Y+1, r1	; 0x01
	/*checking for valid Pin Direction range*/
	if(Copy_u8PinIDDirection==DIO_U8_PIN_DIR_OUTPUT || Copy_u8PinIDDirection==DIO_U8_PIN_DIR_INPUT || Copy_u8PinIDDirection==DIO_U8_PIN_DIR_INPUT_PULLUP){
    2a64:	8c 81       	ldd	r24, Y+4	; 0x04
    2a66:	81 30       	cpi	r24, 0x01	; 1
    2a68:	39 f0       	breq	.+14     	; 0x2a78 <DIO_s8SetPinDirection+0x30>
    2a6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a6c:	82 30       	cpi	r24, 0x02	; 2
    2a6e:	21 f0       	breq	.+8      	; 0x2a78 <DIO_s8SetPinDirection+0x30>
    2a70:	8c 81       	ldd	r24, Y+4	; 0x04
    2a72:	83 30       	cpi	r24, 0x03	; 3
    2a74:	09 f0       	breq	.+2      	; 0x2a78 <DIO_s8SetPinDirection+0x30>
    2a76:	c1 c1       	rjmp	.+898    	; 0x2dfa <DIO_s8SetPinDirection+0x3b2>
		if(Copy_u8PinID>=0 && Copy_u8PinID<=7)
    2a78:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7a:	88 30       	cpi	r24, 0x08	; 8
    2a7c:	08 f0       	brcs	.+2      	; 0x2a80 <DIO_s8SetPinDirection+0x38>
    2a7e:	ba c1       	rjmp	.+884    	; 0x2df4 <DIO_s8SetPinDirection+0x3ac>
		{
			switch(Copy_u8PortID)
    2a80:	8a 81       	ldd	r24, Y+2	; 0x02
    2a82:	28 2f       	mov	r18, r24
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	3e 87       	std	Y+14, r19	; 0x0e
    2a88:	2d 87       	std	Y+13, r18	; 0x0d
    2a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8e:	82 30       	cpi	r24, 0x02	; 2
    2a90:	91 05       	cpc	r25, r1
    2a92:	09 f4       	brne	.+2      	; 0x2a96 <DIO_s8SetPinDirection+0x4e>
    2a94:	7d c0       	rjmp	.+250    	; 0x2b90 <DIO_s8SetPinDirection+0x148>
    2a96:	2d 85       	ldd	r18, Y+13	; 0x0d
    2a98:	3e 85       	ldd	r19, Y+14	; 0x0e
    2a9a:	23 30       	cpi	r18, 0x03	; 3
    2a9c:	31 05       	cpc	r19, r1
    2a9e:	34 f4       	brge	.+12     	; 0x2aac <DIO_s8SetPinDirection+0x64>
    2aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aa4:	81 30       	cpi	r24, 0x01	; 1
    2aa6:	91 05       	cpc	r25, r1
    2aa8:	71 f0       	breq	.+28     	; 0x2ac6 <DIO_s8SetPinDirection+0x7e>
    2aaa:	a1 c1       	rjmp	.+834    	; 0x2dee <DIO_s8SetPinDirection+0x3a6>
    2aac:	2d 85       	ldd	r18, Y+13	; 0x0d
    2aae:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ab0:	23 30       	cpi	r18, 0x03	; 3
    2ab2:	31 05       	cpc	r19, r1
    2ab4:	09 f4       	brne	.+2      	; 0x2ab8 <DIO_s8SetPinDirection+0x70>
    2ab6:	d1 c0       	rjmp	.+418    	; 0x2c5a <DIO_s8SetPinDirection+0x212>
    2ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2abc:	84 30       	cpi	r24, 0x04	; 4
    2abe:	91 05       	cpc	r25, r1
    2ac0:	09 f4       	brne	.+2      	; 0x2ac4 <DIO_s8SetPinDirection+0x7c>
    2ac2:	30 c1       	rjmp	.+608    	; 0x2d24 <DIO_s8SetPinDirection+0x2dc>
    2ac4:	94 c1       	rjmp	.+808    	; 0x2dee <DIO_s8SetPinDirection+0x3a6>
			{
			/*in case of setting the direction of a pin in port A*/
				case (DIO_U8_PORTA):
				/*switch over different directions*/
					switch(Copy_u8PinIDDirection)
    2ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac8:	28 2f       	mov	r18, r24
    2aca:	30 e0       	ldi	r19, 0x00	; 0
    2acc:	3c 87       	std	Y+12, r19	; 0x0c
    2ace:	2b 87       	std	Y+11, r18	; 0x0b
    2ad0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ad2:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ad4:	82 30       	cpi	r24, 0x02	; 2
    2ad6:	91 05       	cpc	r25, r1
    2ad8:	f9 f0       	breq	.+62     	; 0x2b18 <DIO_s8SetPinDirection+0xd0>
    2ada:	2b 85       	ldd	r18, Y+11	; 0x0b
    2adc:	3c 85       	ldd	r19, Y+12	; 0x0c
    2ade:	23 30       	cpi	r18, 0x03	; 3
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	79 f1       	breq	.+94     	; 0x2b42 <DIO_s8SetPinDirection+0xfa>
    2ae4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ae6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	91 05       	cpc	r25, r1
    2aec:	09 f0       	breq	.+2      	; 0x2af0 <DIO_s8SetPinDirection+0xa8>
    2aee:	87 c1       	rjmp	.+782    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
					{
					/*in case of setting the pin to be output*/
						case(DIO_U8_PIN_DIR_OUTPUT):
							SetBit(DDRA,Copy_u8PinID);
    2af0:	aa e3       	ldi	r26, 0x3A	; 58
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	ea e3       	ldi	r30, 0x3A	; 58
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	80 81       	ld	r24, Z
    2afa:	48 2f       	mov	r20, r24
    2afc:	8b 81       	ldd	r24, Y+3	; 0x03
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	81 e0       	ldi	r24, 0x01	; 1
    2b04:	90 e0       	ldi	r25, 0x00	; 0
    2b06:	02 2e       	mov	r0, r18
    2b08:	02 c0       	rjmp	.+4      	; 0x2b0e <DIO_s8SetPinDirection+0xc6>
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	0a 94       	dec	r0
    2b10:	e2 f7       	brpl	.-8      	; 0x2b0a <DIO_s8SetPinDirection+0xc2>
    2b12:	84 2b       	or	r24, r20
    2b14:	8c 93       	st	X, r24
    2b16:	73 c1       	rjmp	.+742    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
							break;
					/*in case of setting the pin to be input*/
						case(DIO_U8_PIN_DIR_INPUT):
							ClearBit(DDRA,Copy_u8PinID);
    2b18:	aa e3       	ldi	r26, 0x3A	; 58
    2b1a:	b0 e0       	ldi	r27, 0x00	; 0
    2b1c:	ea e3       	ldi	r30, 0x3A	; 58
    2b1e:	f0 e0       	ldi	r31, 0x00	; 0
    2b20:	80 81       	ld	r24, Z
    2b22:	48 2f       	mov	r20, r24
    2b24:	8b 81       	ldd	r24, Y+3	; 0x03
    2b26:	28 2f       	mov	r18, r24
    2b28:	30 e0       	ldi	r19, 0x00	; 0
    2b2a:	81 e0       	ldi	r24, 0x01	; 1
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	02 2e       	mov	r0, r18
    2b30:	02 c0       	rjmp	.+4      	; 0x2b36 <DIO_s8SetPinDirection+0xee>
    2b32:	88 0f       	add	r24, r24
    2b34:	99 1f       	adc	r25, r25
    2b36:	0a 94       	dec	r0
    2b38:	e2 f7       	brpl	.-8      	; 0x2b32 <DIO_s8SetPinDirection+0xea>
    2b3a:	80 95       	com	r24
    2b3c:	84 23       	and	r24, r20
    2b3e:	8c 93       	st	X, r24
    2b40:	5e c1       	rjmp	.+700    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
							break;
					/*in case of setting the pin direction to be input pull up*/
						case(DIO_U8_PIN_DIR_INPUT_PULLUP):
							ClearBit(DDRA,Copy_u8PinID);
    2b42:	aa e3       	ldi	r26, 0x3A	; 58
    2b44:	b0 e0       	ldi	r27, 0x00	; 0
    2b46:	ea e3       	ldi	r30, 0x3A	; 58
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	80 81       	ld	r24, Z
    2b4c:	48 2f       	mov	r20, r24
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	28 2f       	mov	r18, r24
    2b52:	30 e0       	ldi	r19, 0x00	; 0
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	02 c0       	rjmp	.+4      	; 0x2b5e <DIO_s8SetPinDirection+0x116>
    2b5a:	88 0f       	add	r24, r24
    2b5c:	99 1f       	adc	r25, r25
    2b5e:	2a 95       	dec	r18
    2b60:	e2 f7       	brpl	.-8      	; 0x2b5a <DIO_s8SetPinDirection+0x112>
    2b62:	80 95       	com	r24
    2b64:	84 23       	and	r24, r20
    2b66:	8c 93       	st	X, r24
							SetBit(PORTA,Copy_u8PinID);
    2b68:	ab e3       	ldi	r26, 0x3B	; 59
    2b6a:	b0 e0       	ldi	r27, 0x00	; 0
    2b6c:	eb e3       	ldi	r30, 0x3B	; 59
    2b6e:	f0 e0       	ldi	r31, 0x00	; 0
    2b70:	80 81       	ld	r24, Z
    2b72:	48 2f       	mov	r20, r24
    2b74:	8b 81       	ldd	r24, Y+3	; 0x03
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	02 2e       	mov	r0, r18
    2b80:	02 c0       	rjmp	.+4      	; 0x2b86 <DIO_s8SetPinDirection+0x13e>
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	0a 94       	dec	r0
    2b88:	e2 f7       	brpl	.-8      	; 0x2b82 <DIO_s8SetPinDirection+0x13a>
    2b8a:	84 2b       	or	r24, r20
    2b8c:	8c 93       	st	X, r24
    2b8e:	37 c1       	rjmp	.+622    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
					break;
		/******************************************************************************/
				/*in case of setting the direction of a pin in port B*/
				case (DIO_U8_PORTB):
					/*switch over different directions*/
					switch(Copy_u8PinIDDirection)
    2b90:	8c 81       	ldd	r24, Y+4	; 0x04
    2b92:	28 2f       	mov	r18, r24
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	3a 87       	std	Y+10, r19	; 0x0a
    2b98:	29 87       	std	Y+9, r18	; 0x09
    2b9a:	89 85       	ldd	r24, Y+9	; 0x09
    2b9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b9e:	82 30       	cpi	r24, 0x02	; 2
    2ba0:	91 05       	cpc	r25, r1
    2ba2:	f9 f0       	breq	.+62     	; 0x2be2 <DIO_s8SetPinDirection+0x19a>
    2ba4:	29 85       	ldd	r18, Y+9	; 0x09
    2ba6:	3a 85       	ldd	r19, Y+10	; 0x0a
    2ba8:	23 30       	cpi	r18, 0x03	; 3
    2baa:	31 05       	cpc	r19, r1
    2bac:	79 f1       	breq	.+94     	; 0x2c0c <DIO_s8SetPinDirection+0x1c4>
    2bae:	89 85       	ldd	r24, Y+9	; 0x09
    2bb0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb2:	81 30       	cpi	r24, 0x01	; 1
    2bb4:	91 05       	cpc	r25, r1
    2bb6:	09 f0       	breq	.+2      	; 0x2bba <DIO_s8SetPinDirection+0x172>
    2bb8:	22 c1       	rjmp	.+580    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
					{					/*in case of setting the pin to be output*/
						case(DIO_U8_PIN_DIR_OUTPUT):
							SetBit(DDRB,Copy_u8PinID);
    2bba:	a7 e3       	ldi	r26, 0x37	; 55
    2bbc:	b0 e0       	ldi	r27, 0x00	; 0
    2bbe:	e7 e3       	ldi	r30, 0x37	; 55
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	48 2f       	mov	r20, r24
    2bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc8:	28 2f       	mov	r18, r24
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	02 2e       	mov	r0, r18
    2bd2:	02 c0       	rjmp	.+4      	; 0x2bd8 <DIO_s8SetPinDirection+0x190>
    2bd4:	88 0f       	add	r24, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	0a 94       	dec	r0
    2bda:	e2 f7       	brpl	.-8      	; 0x2bd4 <DIO_s8SetPinDirection+0x18c>
    2bdc:	84 2b       	or	r24, r20
    2bde:	8c 93       	st	X, r24
    2be0:	0e c1       	rjmp	.+540    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
							break;
					/*in case of setting the pin to be input*/
						case(DIO_U8_PIN_DIR_INPUT):
							ClearBit(DDRB,Copy_u8PinID);
    2be2:	a7 e3       	ldi	r26, 0x37	; 55
    2be4:	b0 e0       	ldi	r27, 0x00	; 0
    2be6:	e7 e3       	ldi	r30, 0x37	; 55
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	80 81       	ld	r24, Z
    2bec:	48 2f       	mov	r20, r24
    2bee:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf0:	28 2f       	mov	r18, r24
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	02 2e       	mov	r0, r18
    2bfa:	02 c0       	rjmp	.+4      	; 0x2c00 <DIO_s8SetPinDirection+0x1b8>
    2bfc:	88 0f       	add	r24, r24
    2bfe:	99 1f       	adc	r25, r25
    2c00:	0a 94       	dec	r0
    2c02:	e2 f7       	brpl	.-8      	; 0x2bfc <DIO_s8SetPinDirection+0x1b4>
    2c04:	80 95       	com	r24
    2c06:	84 23       	and	r24, r20
    2c08:	8c 93       	st	X, r24
    2c0a:	f9 c0       	rjmp	.+498    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
							break;
					/*in case of setting the pin direction to be input pull up*/
						case(DIO_U8_PIN_DIR_INPUT_PULLUP):
							ClearBit(DDRB,Copy_u8PinID);
    2c0c:	a7 e3       	ldi	r26, 0x37	; 55
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	e7 e3       	ldi	r30, 0x37	; 55
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	48 2f       	mov	r20, r24
    2c18:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1a:	28 2f       	mov	r18, r24
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	02 c0       	rjmp	.+4      	; 0x2c28 <DIO_s8SetPinDirection+0x1e0>
    2c24:	88 0f       	add	r24, r24
    2c26:	99 1f       	adc	r25, r25
    2c28:	2a 95       	dec	r18
    2c2a:	e2 f7       	brpl	.-8      	; 0x2c24 <DIO_s8SetPinDirection+0x1dc>
    2c2c:	80 95       	com	r24
    2c2e:	84 23       	and	r24, r20
    2c30:	8c 93       	st	X, r24
							SetBit(PORTB,Copy_u8PinID);
    2c32:	a8 e3       	ldi	r26, 0x38	; 56
    2c34:	b0 e0       	ldi	r27, 0x00	; 0
    2c36:	e8 e3       	ldi	r30, 0x38	; 56
    2c38:	f0 e0       	ldi	r31, 0x00	; 0
    2c3a:	80 81       	ld	r24, Z
    2c3c:	48 2f       	mov	r20, r24
    2c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c40:	28 2f       	mov	r18, r24
    2c42:	30 e0       	ldi	r19, 0x00	; 0
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	02 2e       	mov	r0, r18
    2c4a:	02 c0       	rjmp	.+4      	; 0x2c50 <DIO_s8SetPinDirection+0x208>
    2c4c:	88 0f       	add	r24, r24
    2c4e:	99 1f       	adc	r25, r25
    2c50:	0a 94       	dec	r0
    2c52:	e2 f7       	brpl	.-8      	; 0x2c4c <DIO_s8SetPinDirection+0x204>
    2c54:	84 2b       	or	r24, r20
    2c56:	8c 93       	st	X, r24
    2c58:	d2 c0       	rjmp	.+420    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
					}
					break;
		/******************************************************************************/
				case (DIO_U8_PORTC):
				/*switch over different directions*/
					switch(Copy_u8PinIDDirection)
    2c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c5c:	28 2f       	mov	r18, r24
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	38 87       	std	Y+8, r19	; 0x08
    2c62:	2f 83       	std	Y+7, r18	; 0x07
    2c64:	8f 81       	ldd	r24, Y+7	; 0x07
    2c66:	98 85       	ldd	r25, Y+8	; 0x08
    2c68:	82 30       	cpi	r24, 0x02	; 2
    2c6a:	91 05       	cpc	r25, r1
    2c6c:	f9 f0       	breq	.+62     	; 0x2cac <DIO_s8SetPinDirection+0x264>
    2c6e:	2f 81       	ldd	r18, Y+7	; 0x07
    2c70:	38 85       	ldd	r19, Y+8	; 0x08
    2c72:	23 30       	cpi	r18, 0x03	; 3
    2c74:	31 05       	cpc	r19, r1
    2c76:	79 f1       	breq	.+94     	; 0x2cd6 <DIO_s8SetPinDirection+0x28e>
    2c78:	8f 81       	ldd	r24, Y+7	; 0x07
    2c7a:	98 85       	ldd	r25, Y+8	; 0x08
    2c7c:	81 30       	cpi	r24, 0x01	; 1
    2c7e:	91 05       	cpc	r25, r1
    2c80:	09 f0       	breq	.+2      	; 0x2c84 <DIO_s8SetPinDirection+0x23c>
    2c82:	bd c0       	rjmp	.+378    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
					{
					/*in case of setting the pin to be output*/
						case(DIO_U8_PIN_DIR_OUTPUT):
							SetBit(DDRC,Copy_u8PinID);
    2c84:	a4 e3       	ldi	r26, 0x34	; 52
    2c86:	b0 e0       	ldi	r27, 0x00	; 0
    2c88:	e4 e3       	ldi	r30, 0x34	; 52
    2c8a:	f0 e0       	ldi	r31, 0x00	; 0
    2c8c:	80 81       	ld	r24, Z
    2c8e:	48 2f       	mov	r20, r24
    2c90:	8b 81       	ldd	r24, Y+3	; 0x03
    2c92:	28 2f       	mov	r18, r24
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	02 2e       	mov	r0, r18
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <DIO_s8SetPinDirection+0x25a>
    2c9e:	88 0f       	add	r24, r24
    2ca0:	99 1f       	adc	r25, r25
    2ca2:	0a 94       	dec	r0
    2ca4:	e2 f7       	brpl	.-8      	; 0x2c9e <DIO_s8SetPinDirection+0x256>
    2ca6:	84 2b       	or	r24, r20
    2ca8:	8c 93       	st	X, r24
    2caa:	a9 c0       	rjmp	.+338    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
							break;
					/*in case of setting the pin to be input*/
						case(DIO_U8_PIN_DIR_INPUT):
							ClearBit(DDRC,Copy_u8PinID);
    2cac:	a4 e3       	ldi	r26, 0x34	; 52
    2cae:	b0 e0       	ldi	r27, 0x00	; 0
    2cb0:	e4 e3       	ldi	r30, 0x34	; 52
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	80 81       	ld	r24, Z
    2cb6:	48 2f       	mov	r20, r24
    2cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cba:	28 2f       	mov	r18, r24
    2cbc:	30 e0       	ldi	r19, 0x00	; 0
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	90 e0       	ldi	r25, 0x00	; 0
    2cc2:	02 2e       	mov	r0, r18
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <DIO_s8SetPinDirection+0x282>
    2cc6:	88 0f       	add	r24, r24
    2cc8:	99 1f       	adc	r25, r25
    2cca:	0a 94       	dec	r0
    2ccc:	e2 f7       	brpl	.-8      	; 0x2cc6 <DIO_s8SetPinDirection+0x27e>
    2cce:	80 95       	com	r24
    2cd0:	84 23       	and	r24, r20
    2cd2:	8c 93       	st	X, r24
    2cd4:	94 c0       	rjmp	.+296    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
							break;
					/*in case of setting the pin direction to be input pull up*/
						case(DIO_U8_PIN_DIR_INPUT_PULLUP):
							ClearBit(DDRC,Copy_u8PinID);
    2cd6:	a4 e3       	ldi	r26, 0x34	; 52
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e4 e3       	ldi	r30, 0x34	; 52
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	48 2f       	mov	r20, r24
    2ce2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <DIO_s8SetPinDirection+0x2aa>
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	2a 95       	dec	r18
    2cf4:	e2 f7       	brpl	.-8      	; 0x2cee <DIO_s8SetPinDirection+0x2a6>
    2cf6:	80 95       	com	r24
    2cf8:	84 23       	and	r24, r20
    2cfa:	8c 93       	st	X, r24
							SetBit(PORTC,Copy_u8PinID);
    2cfc:	a5 e3       	ldi	r26, 0x35	; 53
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	e5 e3       	ldi	r30, 0x35	; 53
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	80 81       	ld	r24, Z
    2d06:	48 2f       	mov	r20, r24
    2d08:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0a:	28 2f       	mov	r18, r24
    2d0c:	30 e0       	ldi	r19, 0x00	; 0
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	02 2e       	mov	r0, r18
    2d14:	02 c0       	rjmp	.+4      	; 0x2d1a <DIO_s8SetPinDirection+0x2d2>
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	0a 94       	dec	r0
    2d1c:	e2 f7       	brpl	.-8      	; 0x2d16 <DIO_s8SetPinDirection+0x2ce>
    2d1e:	84 2b       	or	r24, r20
    2d20:	8c 93       	st	X, r24
    2d22:	6d c0       	rjmp	.+218    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
					}
					break;
		/******************************************************************************/
				case (DIO_U8_PORTD):
				/*switch over different directions*/
					switch(Copy_u8PinIDDirection)
    2d24:	8c 81       	ldd	r24, Y+4	; 0x04
    2d26:	28 2f       	mov	r18, r24
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	3e 83       	std	Y+6, r19	; 0x06
    2d2c:	2d 83       	std	Y+5, r18	; 0x05
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	82 30       	cpi	r24, 0x02	; 2
    2d34:	91 05       	cpc	r25, r1
    2d36:	f9 f0       	breq	.+62     	; 0x2d76 <DIO_s8SetPinDirection+0x32e>
    2d38:	2d 81       	ldd	r18, Y+5	; 0x05
    2d3a:	3e 81       	ldd	r19, Y+6	; 0x06
    2d3c:	23 30       	cpi	r18, 0x03	; 3
    2d3e:	31 05       	cpc	r19, r1
    2d40:	79 f1       	breq	.+94     	; 0x2da0 <DIO_s8SetPinDirection+0x358>
    2d42:	8d 81       	ldd	r24, Y+5	; 0x05
    2d44:	9e 81       	ldd	r25, Y+6	; 0x06
    2d46:	81 30       	cpi	r24, 0x01	; 1
    2d48:	91 05       	cpc	r25, r1
    2d4a:	09 f0       	breq	.+2      	; 0x2d4e <DIO_s8SetPinDirection+0x306>
    2d4c:	58 c0       	rjmp	.+176    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
					{
					/*in case of setting the pin to be output*/
						case(DIO_U8_PIN_DIR_OUTPUT):
							SetBit(DDRD,Copy_u8PinID);
    2d4e:	a1 e3       	ldi	r26, 0x31	; 49
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e1 e3       	ldi	r30, 0x31	; 49
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	48 2f       	mov	r20, r24
    2d5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	02 2e       	mov	r0, r18
    2d66:	02 c0       	rjmp	.+4      	; 0x2d6c <DIO_s8SetPinDirection+0x324>
    2d68:	88 0f       	add	r24, r24
    2d6a:	99 1f       	adc	r25, r25
    2d6c:	0a 94       	dec	r0
    2d6e:	e2 f7       	brpl	.-8      	; 0x2d68 <DIO_s8SetPinDirection+0x320>
    2d70:	84 2b       	or	r24, r20
    2d72:	8c 93       	st	X, r24
    2d74:	44 c0       	rjmp	.+136    	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
							break;
					/*in case of setting the pin to be input*/
						case(DIO_U8_PIN_DIR_INPUT):
							ClearBit(DDRD,Copy_u8PinID);
    2d76:	a1 e3       	ldi	r26, 0x31	; 49
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e1 e3       	ldi	r30, 0x31	; 49
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	48 2f       	mov	r20, r24
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	02 2e       	mov	r0, r18
    2d8e:	02 c0       	rjmp	.+4      	; 0x2d94 <DIO_s8SetPinDirection+0x34c>
    2d90:	88 0f       	add	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	0a 94       	dec	r0
    2d96:	e2 f7       	brpl	.-8      	; 0x2d90 <DIO_s8SetPinDirection+0x348>
    2d98:	80 95       	com	r24
    2d9a:	84 23       	and	r24, r20
    2d9c:	8c 93       	st	X, r24
    2d9e:	2f c0       	rjmp	.+94     	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
							break;
					/*in case of setting the pin direction to be input pull up*/
						case(DIO_U8_PIN_DIR_INPUT_PULLUP):
							ClearBit(DDRD,Copy_u8PinID);
    2da0:	a1 e3       	ldi	r26, 0x31	; 49
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e1 e3       	ldi	r30, 0x31	; 49
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	48 2f       	mov	r20, r24
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <DIO_s8SetPinDirection+0x374>
    2db8:	88 0f       	add	r24, r24
    2dba:	99 1f       	adc	r25, r25
    2dbc:	2a 95       	dec	r18
    2dbe:	e2 f7       	brpl	.-8      	; 0x2db8 <DIO_s8SetPinDirection+0x370>
    2dc0:	80 95       	com	r24
    2dc2:	84 23       	and	r24, r20
    2dc4:	8c 93       	st	X, r24
							SetBit(PORTD,Copy_u8PinID);
    2dc6:	a2 e3       	ldi	r26, 0x32	; 50
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e2 e3       	ldi	r30, 0x32	; 50
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	48 2f       	mov	r20, r24
    2dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2dd4:	28 2f       	mov	r18, r24
    2dd6:	30 e0       	ldi	r19, 0x00	; 0
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	02 2e       	mov	r0, r18
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <DIO_s8SetPinDirection+0x39c>
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	0a 94       	dec	r0
    2de6:	e2 f7       	brpl	.-8      	; 0x2de0 <DIO_s8SetPinDirection+0x398>
    2de8:	84 2b       	or	r24, r20
    2dea:	8c 93       	st	X, r24
    2dec:	08 c0       	rjmp	.+16     	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
							break;

					}
				break;
				default:
					Local_s8ErrorState=DIO_S8_INVALID_PORT_RANGE;
    2dee:	8e ef       	ldi	r24, 0xFE	; 254
    2df0:	89 83       	std	Y+1, r24	; 0x01
    2df2:	05 c0       	rjmp	.+10     	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
					break;
			}
		}
		else
		{
			Local_s8ErrorState=DIO_S8_INVALID_PIN_RANGE;
    2df4:	8b ef       	ldi	r24, 0xFB	; 251
    2df6:	89 83       	std	Y+1, r24	; 0x01
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <DIO_s8SetPinDirection+0x3b6>
		}
	}
	else{
		Local_s8ErrorState=DIO_S8_INVALID_PIN_DIR_RANGE;
    2dfa:	8d ef       	ldi	r24, 0xFD	; 253
    2dfc:	89 83       	std	Y+1, r24	; 0x01
	}
	/*Returen Error state
	 * 0 -> ok  (-4) -> Invalid Port ID  & (-1) -> invalid Pin ID & (-3) -> Invalid Pin Direction */
	return Local_s8ErrorState;
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e00:	2e 96       	adiw	r28, 0x0e	; 14
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <DIO_s8SetPinValue>:


/*this function shall set the value of any output pin*/
Dio_enErrorStatus DIO_s8SetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8PinValue){
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	00 d0       	rcall	.+0      	; 0x2e18 <DIO_s8SetPinValue+0x6>
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <DIO_s8SetPinValue+0x8>
    2e1a:	00 d0       	rcall	.+0      	; 0x2e1c <DIO_s8SetPinValue+0xa>
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	8a 83       	std	Y+2, r24	; 0x02
    2e22:	6b 83       	std	Y+3, r22	; 0x03
    2e24:	4c 83       	std	Y+4, r20	; 0x04
	/*initially = 0 (ok)*/
	Dio_enErrorStatus Local_s8ErrorState=0;
    2e26:	19 82       	std	Y+1, r1	; 0x01
	/*checking for valid Pin Value range*/
	if(Copy_u8PinValue==DIO_U8_PIN_LOW ||Copy_u8PinValue==DIO_U8_PIN_HIGH){
    2e28:	8c 81       	ldd	r24, Y+4	; 0x04
    2e2a:	88 23       	and	r24, r24
    2e2c:	21 f0       	breq	.+8      	; 0x2e36 <DIO_s8SetPinValue+0x24>
    2e2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2e30:	81 30       	cpi	r24, 0x01	; 1
    2e32:	09 f0       	breq	.+2      	; 0x2e36 <DIO_s8SetPinValue+0x24>
    2e34:	b4 c0       	rjmp	.+360    	; 0x2f9e <DIO_s8SetPinValue+0x18c>
		/*checking for valid Pin  range*/
		if(Copy_u8PinID>=DIO_U8_PIN0 && Copy_u8PinID<=DIO_U8_PIN7)
    2e36:	8b 81       	ldd	r24, Y+3	; 0x03
    2e38:	88 30       	cpi	r24, 0x08	; 8
    2e3a:	08 f0       	brcs	.+2      	; 0x2e3e <DIO_s8SetPinValue+0x2c>
    2e3c:	ad c0       	rjmp	.+346    	; 0x2f98 <DIO_s8SetPinValue+0x186>
		{
			/*switching over ports*/
			switch(Copy_u8PortID)
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	28 2f       	mov	r18, r24
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	3e 83       	std	Y+6, r19	; 0x06
    2e46:	2d 83       	std	Y+5, r18	; 0x05
    2e48:	6d 81       	ldd	r22, Y+5	; 0x05
    2e4a:	7e 81       	ldd	r23, Y+6	; 0x06
    2e4c:	62 30       	cpi	r22, 0x02	; 2
    2e4e:	71 05       	cpc	r23, r1
    2e50:	d1 f1       	breq	.+116    	; 0x2ec6 <DIO_s8SetPinValue+0xb4>
    2e52:	8d 81       	ldd	r24, Y+5	; 0x05
    2e54:	9e 81       	ldd	r25, Y+6	; 0x06
    2e56:	83 30       	cpi	r24, 0x03	; 3
    2e58:	91 05       	cpc	r25, r1
    2e5a:	34 f4       	brge	.+12     	; 0x2e68 <DIO_s8SetPinValue+0x56>
    2e5c:	2d 81       	ldd	r18, Y+5	; 0x05
    2e5e:	3e 81       	ldd	r19, Y+6	; 0x06
    2e60:	21 30       	cpi	r18, 0x01	; 1
    2e62:	31 05       	cpc	r19, r1
    2e64:	71 f0       	breq	.+28     	; 0x2e82 <DIO_s8SetPinValue+0x70>
    2e66:	95 c0       	rjmp	.+298    	; 0x2f92 <DIO_s8SetPinValue+0x180>
    2e68:	6d 81       	ldd	r22, Y+5	; 0x05
    2e6a:	7e 81       	ldd	r23, Y+6	; 0x06
    2e6c:	63 30       	cpi	r22, 0x03	; 3
    2e6e:	71 05       	cpc	r23, r1
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <DIO_s8SetPinValue+0x62>
    2e72:	4b c0       	rjmp	.+150    	; 0x2f0a <DIO_s8SetPinValue+0xf8>
    2e74:	8d 81       	ldd	r24, Y+5	; 0x05
    2e76:	9e 81       	ldd	r25, Y+6	; 0x06
    2e78:	84 30       	cpi	r24, 0x04	; 4
    2e7a:	91 05       	cpc	r25, r1
    2e7c:	09 f4       	brne	.+2      	; 0x2e80 <DIO_s8SetPinValue+0x6e>
    2e7e:	67 c0       	rjmp	.+206    	; 0x2f4e <DIO_s8SetPinValue+0x13c>
    2e80:	88 c0       	rjmp	.+272    	; 0x2f92 <DIO_s8SetPinValue+0x180>
			{
				/*In case of PORTA*/
				case(DIO_U8_PORTA):
					WriteBit(PORTA,Copy_u8PinID,Copy_u8PinValue);
    2e82:	ab e3       	ldi	r26, 0x3B	; 59
    2e84:	b0 e0       	ldi	r27, 0x00	; 0
    2e86:	eb e3       	ldi	r30, 0x3B	; 59
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	48 2f       	mov	r20, r24
    2e8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e90:	28 2f       	mov	r18, r24
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	81 e0       	ldi	r24, 0x01	; 1
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	02 c0       	rjmp	.+4      	; 0x2e9e <DIO_s8SetPinValue+0x8c>
    2e9a:	88 0f       	add	r24, r24
    2e9c:	99 1f       	adc	r25, r25
    2e9e:	2a 95       	dec	r18
    2ea0:	e2 f7       	brpl	.-8      	; 0x2e9a <DIO_s8SetPinValue+0x88>
    2ea2:	80 95       	com	r24
    2ea4:	48 23       	and	r20, r24
    2ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	8b 81       	ldd	r24, Y+3	; 0x03
    2eae:	88 2f       	mov	r24, r24
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	b9 01       	movw	r22, r18
    2eb4:	02 c0       	rjmp	.+4      	; 0x2eba <DIO_s8SetPinValue+0xa8>
    2eb6:	66 0f       	add	r22, r22
    2eb8:	77 1f       	adc	r23, r23
    2eba:	8a 95       	dec	r24
    2ebc:	e2 f7       	brpl	.-8      	; 0x2eb6 <DIO_s8SetPinValue+0xa4>
    2ebe:	cb 01       	movw	r24, r22
    2ec0:	84 2b       	or	r24, r20
    2ec2:	8c 93       	st	X, r24
    2ec4:	6e c0       	rjmp	.+220    	; 0x2fa2 <DIO_s8SetPinValue+0x190>
					break;
				/*In case of PORTB*/
				case(DIO_U8_PORTB):
					WriteBit(PORTB,Copy_u8PinID,Copy_u8PinValue);
    2ec6:	a8 e3       	ldi	r26, 0x38	; 56
    2ec8:	b0 e0       	ldi	r27, 0x00	; 0
    2eca:	e8 e3       	ldi	r30, 0x38	; 56
    2ecc:	f0 e0       	ldi	r31, 0x00	; 0
    2ece:	80 81       	ld	r24, Z
    2ed0:	48 2f       	mov	r20, r24
    2ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed4:	28 2f       	mov	r18, r24
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	02 c0       	rjmp	.+4      	; 0x2ee2 <DIO_s8SetPinValue+0xd0>
    2ede:	88 0f       	add	r24, r24
    2ee0:	99 1f       	adc	r25, r25
    2ee2:	2a 95       	dec	r18
    2ee4:	e2 f7       	brpl	.-8      	; 0x2ede <DIO_s8SetPinValue+0xcc>
    2ee6:	80 95       	com	r24
    2ee8:	48 23       	and	r20, r24
    2eea:	8c 81       	ldd	r24, Y+4	; 0x04
    2eec:	28 2f       	mov	r18, r24
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef2:	88 2f       	mov	r24, r24
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	b9 01       	movw	r22, r18
    2ef8:	02 c0       	rjmp	.+4      	; 0x2efe <DIO_s8SetPinValue+0xec>
    2efa:	66 0f       	add	r22, r22
    2efc:	77 1f       	adc	r23, r23
    2efe:	8a 95       	dec	r24
    2f00:	e2 f7       	brpl	.-8      	; 0x2efa <DIO_s8SetPinValue+0xe8>
    2f02:	cb 01       	movw	r24, r22
    2f04:	84 2b       	or	r24, r20
    2f06:	8c 93       	st	X, r24
    2f08:	4c c0       	rjmp	.+152    	; 0x2fa2 <DIO_s8SetPinValue+0x190>
					break;
				/*In case of PORTC*/
				case(DIO_U8_PORTC):
					WriteBit(PORTC,Copy_u8PinID,Copy_u8PinValue);
    2f0a:	a5 e3       	ldi	r26, 0x35	; 53
    2f0c:	b0 e0       	ldi	r27, 0x00	; 0
    2f0e:	e5 e3       	ldi	r30, 0x35	; 53
    2f10:	f0 e0       	ldi	r31, 0x00	; 0
    2f12:	80 81       	ld	r24, Z
    2f14:	48 2f       	mov	r20, r24
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	28 2f       	mov	r18, r24
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	81 e0       	ldi	r24, 0x01	; 1
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <DIO_s8SetPinValue+0x114>
    2f22:	88 0f       	add	r24, r24
    2f24:	99 1f       	adc	r25, r25
    2f26:	2a 95       	dec	r18
    2f28:	e2 f7       	brpl	.-8      	; 0x2f22 <DIO_s8SetPinValue+0x110>
    2f2a:	80 95       	com	r24
    2f2c:	48 23       	and	r20, r24
    2f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f30:	28 2f       	mov	r18, r24
    2f32:	30 e0       	ldi	r19, 0x00	; 0
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	88 2f       	mov	r24, r24
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	b9 01       	movw	r22, r18
    2f3c:	02 c0       	rjmp	.+4      	; 0x2f42 <DIO_s8SetPinValue+0x130>
    2f3e:	66 0f       	add	r22, r22
    2f40:	77 1f       	adc	r23, r23
    2f42:	8a 95       	dec	r24
    2f44:	e2 f7       	brpl	.-8      	; 0x2f3e <DIO_s8SetPinValue+0x12c>
    2f46:	cb 01       	movw	r24, r22
    2f48:	84 2b       	or	r24, r20
    2f4a:	8c 93       	st	X, r24
    2f4c:	2a c0       	rjmp	.+84     	; 0x2fa2 <DIO_s8SetPinValue+0x190>
					break;
				/*In case of PORTD*/
				case(DIO_U8_PORTD):
					WriteBit(PORTD,Copy_u8PinID,Copy_u8PinValue);
    2f4e:	a2 e3       	ldi	r26, 0x32	; 50
    2f50:	b0 e0       	ldi	r27, 0x00	; 0
    2f52:	e2 e3       	ldi	r30, 0x32	; 50
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	80 81       	ld	r24, Z
    2f58:	48 2f       	mov	r20, r24
    2f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5c:	28 2f       	mov	r18, r24
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	81 e0       	ldi	r24, 0x01	; 1
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	02 c0       	rjmp	.+4      	; 0x2f6a <DIO_s8SetPinValue+0x158>
    2f66:	88 0f       	add	r24, r24
    2f68:	99 1f       	adc	r25, r25
    2f6a:	2a 95       	dec	r18
    2f6c:	e2 f7       	brpl	.-8      	; 0x2f66 <DIO_s8SetPinValue+0x154>
    2f6e:	80 95       	com	r24
    2f70:	48 23       	and	r20, r24
    2f72:	8c 81       	ldd	r24, Y+4	; 0x04
    2f74:	28 2f       	mov	r18, r24
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	88 2f       	mov	r24, r24
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	b9 01       	movw	r22, r18
    2f80:	02 c0       	rjmp	.+4      	; 0x2f86 <DIO_s8SetPinValue+0x174>
    2f82:	66 0f       	add	r22, r22
    2f84:	77 1f       	adc	r23, r23
    2f86:	8a 95       	dec	r24
    2f88:	e2 f7       	brpl	.-8      	; 0x2f82 <DIO_s8SetPinValue+0x170>
    2f8a:	cb 01       	movw	r24, r22
    2f8c:	84 2b       	or	r24, r20
    2f8e:	8c 93       	st	X, r24
    2f90:	08 c0       	rjmp	.+16     	; 0x2fa2 <DIO_s8SetPinValue+0x190>
					break;
				default:
					Local_s8ErrorState=DIO_S8_INVALID_PORT_RANGE;
    2f92:	8e ef       	ldi	r24, 0xFE	; 254
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	05 c0       	rjmp	.+10     	; 0x2fa2 <DIO_s8SetPinValue+0x190>
			}

		}
		else
		{
			Local_s8ErrorState=DIO_S8_INVALID_PIN_RANGE;
    2f98:	8b ef       	ldi	r24, 0xFB	; 251
    2f9a:	89 83       	std	Y+1, r24	; 0x01
    2f9c:	02 c0       	rjmp	.+4      	; 0x2fa2 <DIO_s8SetPinValue+0x190>
		}

	}
	else
		{
			Local_s8ErrorState=DIO_S8_INVALID_PIN_VALUE_RANGE;
    2f9e:	8c ef       	ldi	r24, 0xFC	; 252
    2fa0:	89 83       	std	Y+1, r24	; 0x01
		}
	/*Returen Error state
	 * 0 -> ok  (-4) -> Invalid Port ID  & (-1) -> invalid Pin ID & (-3) -> Invalid Pin Value */
	return Local_s8ErrorState;
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fa4:	26 96       	adiw	r28, 0x06	; 6
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	08 95       	ret

00002fb6 <DIO_s8SetPortDirection>:

Dio_enErrorStatus DIO_s8SetPortDirection(u8 Copy_u8PortID  , u8 Copy_u8PortDirection){
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	cd b7       	in	r28, 0x3d	; 61
    2fbc:	de b7       	in	r29, 0x3e	; 62
    2fbe:	2d 97       	sbiw	r28, 0x0d	; 13
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	8a 83       	std	Y+2, r24	; 0x02
    2fcc:	6b 83       	std	Y+3, r22	; 0x03
	/*Local variable for checking errors (0) is (OK) */
	Dio_enErrorStatus local_s8_ErrorState=0;
    2fce:	19 82       	std	Y+1, r1	; 0x01
	/*Switching over PORTs */
	switch(Copy_u8PortID)
    2fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	3d 87       	std	Y+13, r19	; 0x0d
    2fd8:	2c 87       	std	Y+12, r18	; 0x0c
    2fda:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fdc:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fde:	82 30       	cpi	r24, 0x02	; 2
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	09 f4       	brne	.+2      	; 0x2fe6 <DIO_s8SetPortDirection+0x30>
    2fe4:	42 c0       	rjmp	.+132    	; 0x306a <DIO_s8SetPortDirection+0xb4>
    2fe6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fe8:	3d 85       	ldd	r19, Y+13	; 0x0d
    2fea:	23 30       	cpi	r18, 0x03	; 3
    2fec:	31 05       	cpc	r19, r1
    2fee:	34 f4       	brge	.+12     	; 0x2ffc <DIO_s8SetPortDirection+0x46>
    2ff0:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ff2:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ff4:	81 30       	cpi	r24, 0x01	; 1
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	71 f0       	breq	.+28     	; 0x3016 <DIO_s8SetPortDirection+0x60>
    2ffa:	b5 c0       	rjmp	.+362    	; 0x3166 <DIO_s8SetPortDirection+0x1b0>
    2ffc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ffe:	3d 85       	ldd	r19, Y+13	; 0x0d
    3000:	23 30       	cpi	r18, 0x03	; 3
    3002:	31 05       	cpc	r19, r1
    3004:	09 f4       	brne	.+2      	; 0x3008 <DIO_s8SetPortDirection+0x52>
    3006:	5b c0       	rjmp	.+182    	; 0x30be <DIO_s8SetPortDirection+0x108>
    3008:	8c 85       	ldd	r24, Y+12	; 0x0c
    300a:	9d 85       	ldd	r25, Y+13	; 0x0d
    300c:	84 30       	cpi	r24, 0x04	; 4
    300e:	91 05       	cpc	r25, r1
    3010:	09 f4       	brne	.+2      	; 0x3014 <DIO_s8SetPortDirection+0x5e>
    3012:	7f c0       	rjmp	.+254    	; 0x3112 <DIO_s8SetPortDirection+0x15c>
    3014:	a8 c0       	rjmp	.+336    	; 0x3166 <DIO_s8SetPortDirection+0x1b0>
	{
	/* In case of Port A*/
		case(DIO_U8_PORTA):
			/*Switching over Port Directions*/
			switch(Copy_u8PortDirection)
    3016:	8b 81       	ldd	r24, Y+3	; 0x03
    3018:	28 2f       	mov	r18, r24
    301a:	30 e0       	ldi	r19, 0x00	; 0
    301c:	3b 87       	std	Y+11, r19	; 0x0b
    301e:	2a 87       	std	Y+10, r18	; 0x0a
    3020:	8a 85       	ldd	r24, Y+10	; 0x0a
    3022:	9b 85       	ldd	r25, Y+11	; 0x0b
    3024:	82 30       	cpi	r24, 0x02	; 2
    3026:	91 05       	cpc	r25, r1
    3028:	79 f0       	breq	.+30     	; 0x3048 <DIO_s8SetPortDirection+0x92>
    302a:	2a 85       	ldd	r18, Y+10	; 0x0a
    302c:	3b 85       	ldd	r19, Y+11	; 0x0b
    302e:	23 30       	cpi	r18, 0x03	; 3
    3030:	31 05       	cpc	r19, r1
    3032:	71 f0       	breq	.+28     	; 0x3050 <DIO_s8SetPortDirection+0x9a>
    3034:	8a 85       	ldd	r24, Y+10	; 0x0a
    3036:	9b 85       	ldd	r25, Y+11	; 0x0b
    3038:	81 30       	cpi	r24, 0x01	; 1
    303a:	91 05       	cpc	r25, r1
    303c:	89 f4       	brne	.+34     	; 0x3060 <DIO_s8SetPortDirection+0xaa>
			{
				/*In case of PORT OUTPUT*/
				case(DIO_U8_PORT_DIR_OUTPUT):
					DDRA=DIO_U8_PORT_DIR_HIGH;
    303e:	ea e3       	ldi	r30, 0x3A	; 58
    3040:	f0 e0       	ldi	r31, 0x00	; 0
    3042:	8f ef       	ldi	r24, 0xFF	; 255
    3044:	80 83       	st	Z, r24
    3046:	91 c0       	rjmp	.+290    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
				/*In case of PORT INPUT*/
				case(DIO_U8_PORT_DIR_INPUT):
					DDRA=DIO_U8_PORT_DIR_LOW;
    3048:	ea e3       	ldi	r30, 0x3A	; 58
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	10 82       	st	Z, r1
    304e:	8d c0       	rjmp	.+282    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
			/*In case of PORT INPUT_PULLUP*/
				case(DIO_U8_PORT_DIR_INPUT_PULLUP):
					DDRA=DIO_U8_PORT_DIR_LOW;
    3050:	ea e3       	ldi	r30, 0x3A	; 58
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	10 82       	st	Z, r1
					PORTA=DI0_U8_PORT_HIGH;
    3056:	eb e3       	ldi	r30, 0x3B	; 59
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	8f ef       	ldi	r24, 0xFF	; 255
    305c:	80 83       	st	Z, r24
    305e:	85 c0       	rjmp	.+266    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
				default:
					DDRA=Copy_u8PortDirection;
    3060:	ea e3       	ldi	r30, 0x3A	; 58
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	80 83       	st	Z, r24
    3068:	80 c0       	rjmp	.+256    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
			break;
		/******************************************************************************/
		/* In case of Port B*/
		case(DIO_U8_PORTB):
			/*Switching over Port Directions*/
			switch(Copy_u8PortDirection)
    306a:	8b 81       	ldd	r24, Y+3	; 0x03
    306c:	28 2f       	mov	r18, r24
    306e:	30 e0       	ldi	r19, 0x00	; 0
    3070:	39 87       	std	Y+9, r19	; 0x09
    3072:	28 87       	std	Y+8, r18	; 0x08
    3074:	88 85       	ldd	r24, Y+8	; 0x08
    3076:	99 85       	ldd	r25, Y+9	; 0x09
    3078:	82 30       	cpi	r24, 0x02	; 2
    307a:	91 05       	cpc	r25, r1
    307c:	79 f0       	breq	.+30     	; 0x309c <DIO_s8SetPortDirection+0xe6>
    307e:	28 85       	ldd	r18, Y+8	; 0x08
    3080:	39 85       	ldd	r19, Y+9	; 0x09
    3082:	23 30       	cpi	r18, 0x03	; 3
    3084:	31 05       	cpc	r19, r1
    3086:	71 f0       	breq	.+28     	; 0x30a4 <DIO_s8SetPortDirection+0xee>
    3088:	88 85       	ldd	r24, Y+8	; 0x08
    308a:	99 85       	ldd	r25, Y+9	; 0x09
    308c:	81 30       	cpi	r24, 0x01	; 1
    308e:	91 05       	cpc	r25, r1
    3090:	89 f4       	brne	.+34     	; 0x30b4 <DIO_s8SetPortDirection+0xfe>
			{
				/*In case of PORT OUTPUT*/
				case(DIO_U8_PORT_DIR_OUTPUT):
					DDRB=DIO_U8_PORT_DIR_HIGH;
    3092:	e7 e3       	ldi	r30, 0x37	; 55
    3094:	f0 e0       	ldi	r31, 0x00	; 0
    3096:	8f ef       	ldi	r24, 0xFF	; 255
    3098:	80 83       	st	Z, r24
    309a:	67 c0       	rjmp	.+206    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
				/*In case of PORT INPUT*/
				case(DIO_U8_PORT_DIR_INPUT):
					DDRB=DIO_U8_PORT_DIR_LOW;
    309c:	e7 e3       	ldi	r30, 0x37	; 55
    309e:	f0 e0       	ldi	r31, 0x00	; 0
    30a0:	10 82       	st	Z, r1
    30a2:	63 c0       	rjmp	.+198    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
			/*In case of PORT INPUT_PULLUP*/
				case(DIO_U8_PORT_DIR_INPUT_PULLUP):
					DDRB=DIO_U8_PORT_DIR_LOW;
    30a4:	e7 e3       	ldi	r30, 0x37	; 55
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	10 82       	st	Z, r1
					PORTB=DI0_U8_PORT_HIGH;
    30aa:	e8 e3       	ldi	r30, 0x38	; 56
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	8f ef       	ldi	r24, 0xFF	; 255
    30b0:	80 83       	st	Z, r24
    30b2:	5b c0       	rjmp	.+182    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
				default:
					DDRB=Copy_u8PortDirection;
    30b4:	e7 e3       	ldi	r30, 0x37	; 55
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	80 83       	st	Z, r24
    30bc:	56 c0       	rjmp	.+172    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
			break;
		/******************************************************************************/
		/* In case of Port C*/
		case(DIO_U8_PORTC):
			/*Switching over Port Directions*/
			switch(Copy_u8PortDirection)
    30be:	8b 81       	ldd	r24, Y+3	; 0x03
    30c0:	28 2f       	mov	r18, r24
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	3f 83       	std	Y+7, r19	; 0x07
    30c6:	2e 83       	std	Y+6, r18	; 0x06
    30c8:	8e 81       	ldd	r24, Y+6	; 0x06
    30ca:	9f 81       	ldd	r25, Y+7	; 0x07
    30cc:	82 30       	cpi	r24, 0x02	; 2
    30ce:	91 05       	cpc	r25, r1
    30d0:	79 f0       	breq	.+30     	; 0x30f0 <DIO_s8SetPortDirection+0x13a>
    30d2:	2e 81       	ldd	r18, Y+6	; 0x06
    30d4:	3f 81       	ldd	r19, Y+7	; 0x07
    30d6:	23 30       	cpi	r18, 0x03	; 3
    30d8:	31 05       	cpc	r19, r1
    30da:	71 f0       	breq	.+28     	; 0x30f8 <DIO_s8SetPortDirection+0x142>
    30dc:	8e 81       	ldd	r24, Y+6	; 0x06
    30de:	9f 81       	ldd	r25, Y+7	; 0x07
    30e0:	81 30       	cpi	r24, 0x01	; 1
    30e2:	91 05       	cpc	r25, r1
    30e4:	69 f4       	brne	.+26     	; 0x3100 <DIO_s8SetPortDirection+0x14a>
			{
				/*In case of PORT OUTPUT*/
				case(DIO_U8_PORT_DIR_OUTPUT):
					DDRC=DIO_U8_PORT_DIR_HIGH;
    30e6:	e4 e3       	ldi	r30, 0x34	; 52
    30e8:	f0 e0       	ldi	r31, 0x00	; 0
    30ea:	8f ef       	ldi	r24, 0xFF	; 255
    30ec:	80 83       	st	Z, r24
    30ee:	3d c0       	rjmp	.+122    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
				/*In case of PORT INPUT*/
				case(DIO_U8_PORT_DIR_INPUT):
					DDRC=DIO_U8_PORT_DIR_LOW;
    30f0:	e4 e3       	ldi	r30, 0x34	; 52
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	10 82       	st	Z, r1
    30f6:	39 c0       	rjmp	.+114    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
			/*In case of PORT INPUT_PULLUP*/
				case(DIO_U8_PORT_DIR_INPUT_PULLUP):
					DDRC=DIO_U8_PORT_DIR_LOW;
    30f8:	e4 e3       	ldi	r30, 0x34	; 52
    30fa:	f0 e0       	ldi	r31, 0x00	; 0
    30fc:	10 82       	st	Z, r1
    30fe:	35 c0       	rjmp	.+106    	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
				default:
					DDRC=Copy_u8PortDirection;
    3100:	e4 e3       	ldi	r30, 0x34	; 52
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	8b 81       	ldd	r24, Y+3	; 0x03
    3106:	80 83       	st	Z, r24
					PORTC=DI0_U8_PORT_HIGH;
    3108:	e5 e3       	ldi	r30, 0x35	; 53
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	8f ef       	ldi	r24, 0xFF	; 255
    310e:	80 83       	st	Z, r24
    3110:	2c c0       	rjmp	.+88     	; 0x316a <DIO_s8SetPortDirection+0x1b4>
			break;
		/******************************************************************************/
				/* In case of Port D*/
		case(DIO_U8_PORTD):
			/*Switching over Port Directions*/
			switch(Copy_u8PortDirection)
    3112:	8b 81       	ldd	r24, Y+3	; 0x03
    3114:	28 2f       	mov	r18, r24
    3116:	30 e0       	ldi	r19, 0x00	; 0
    3118:	3d 83       	std	Y+5, r19	; 0x05
    311a:	2c 83       	std	Y+4, r18	; 0x04
    311c:	8c 81       	ldd	r24, Y+4	; 0x04
    311e:	9d 81       	ldd	r25, Y+5	; 0x05
    3120:	82 30       	cpi	r24, 0x02	; 2
    3122:	91 05       	cpc	r25, r1
    3124:	79 f0       	breq	.+30     	; 0x3144 <DIO_s8SetPortDirection+0x18e>
    3126:	2c 81       	ldd	r18, Y+4	; 0x04
    3128:	3d 81       	ldd	r19, Y+5	; 0x05
    312a:	23 30       	cpi	r18, 0x03	; 3
    312c:	31 05       	cpc	r19, r1
    312e:	71 f0       	breq	.+28     	; 0x314c <DIO_s8SetPortDirection+0x196>
    3130:	8c 81       	ldd	r24, Y+4	; 0x04
    3132:	9d 81       	ldd	r25, Y+5	; 0x05
    3134:	81 30       	cpi	r24, 0x01	; 1
    3136:	91 05       	cpc	r25, r1
    3138:	89 f4       	brne	.+34     	; 0x315c <DIO_s8SetPortDirection+0x1a6>
			{
				/*In case of PORT OUTPUT*/
				case(DIO_U8_PORT_DIR_OUTPUT):
					DDRD=DIO_U8_PORT_DIR_HIGH;
    313a:	e1 e3       	ldi	r30, 0x31	; 49
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	8f ef       	ldi	r24, 0xFF	; 255
    3140:	80 83       	st	Z, r24
    3142:	13 c0       	rjmp	.+38     	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
				/*In case of PORT INPUT*/
				case(DIO_U8_PORT_DIR_INPUT):
					DDRD=DIO_U8_PORT_DIR_LOW;
    3144:	e1 e3       	ldi	r30, 0x31	; 49
    3146:	f0 e0       	ldi	r31, 0x00	; 0
    3148:	10 82       	st	Z, r1
    314a:	0f c0       	rjmp	.+30     	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
			/*In case of PORT INPUT_PULLUP*/
				case(DIO_U8_PORT_DIR_INPUT_PULLUP):
					DDRD=DIO_U8_PORT_DIR_LOW;
    314c:	e1 e3       	ldi	r30, 0x31	; 49
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	10 82       	st	Z, r1
					PORTD=DI0_U8_PORT_HIGH;
    3152:	e2 e3       	ldi	r30, 0x32	; 50
    3154:	f0 e0       	ldi	r31, 0x00	; 0
    3156:	8f ef       	ldi	r24, 0xFF	; 255
    3158:	80 83       	st	Z, r24
    315a:	07 c0       	rjmp	.+14     	; 0x316a <DIO_s8SetPortDirection+0x1b4>
					break;
				default:
					DDRD=Copy_u8PortDirection;
    315c:	e1 e3       	ldi	r30, 0x31	; 49
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	80 83       	st	Z, r24
    3164:	02 c0       	rjmp	.+4      	; 0x316a <DIO_s8SetPortDirection+0x1b4>
			}
			break;
		/******************************************************************************/
		/*Invalid Port value*/
		default:
			local_s8_ErrorState=DIO_S8_INVALID_PORT_RANGE;
    3166:	8e ef       	ldi	r24, 0xFE	; 254
    3168:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	/*Return ErrorState
	 *  * 0 -> ok  (-4) -> Invalid Port ID  &  */
	return 	local_s8_ErrorState;
    316a:	89 81       	ldd	r24, Y+1	; 0x01
}
    316c:	2d 96       	adiw	r28, 0x0d	; 13
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <DIO_u8SetPortValue>:
/*this function is to set the value of a specific output port*/

Dio_enErrorStatus DIO_u8SetPortValue(u8 Copy_u8PortID  , s32 Copy_u8PortValue){
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	28 97       	sbiw	r28, 0x08	; 8
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
    3192:	8a 83       	std	Y+2, r24	; 0x02
    3194:	4b 83       	std	Y+3, r20	; 0x03
    3196:	5c 83       	std	Y+4, r21	; 0x04
    3198:	6d 83       	std	Y+5, r22	; 0x05
    319a:	7e 83       	std	Y+6, r23	; 0x06
	Dio_enErrorStatus local_s8_ErrorState=0;
    319c:	19 82       	std	Y+1, r1	; 0x01
	/*Switching over PORTs */
		switch(Copy_u8PortID)
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	28 2f       	mov	r18, r24
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	38 87       	std	Y+8, r19	; 0x08
    31a6:	2f 83       	std	Y+7, r18	; 0x07
    31a8:	8f 81       	ldd	r24, Y+7	; 0x07
    31aa:	98 85       	ldd	r25, Y+8	; 0x08
    31ac:	82 30       	cpi	r24, 0x02	; 2
    31ae:	91 05       	cpc	r25, r1
    31b0:	d9 f0       	breq	.+54     	; 0x31e8 <DIO_u8SetPortValue+0x6a>
    31b2:	2f 81       	ldd	r18, Y+7	; 0x07
    31b4:	38 85       	ldd	r19, Y+8	; 0x08
    31b6:	23 30       	cpi	r18, 0x03	; 3
    31b8:	31 05       	cpc	r19, r1
    31ba:	34 f4       	brge	.+12     	; 0x31c8 <DIO_u8SetPortValue+0x4a>
    31bc:	8f 81       	ldd	r24, Y+7	; 0x07
    31be:	98 85       	ldd	r25, Y+8	; 0x08
    31c0:	81 30       	cpi	r24, 0x01	; 1
    31c2:	91 05       	cpc	r25, r1
    31c4:	61 f0       	breq	.+24     	; 0x31de <DIO_u8SetPortValue+0x60>
    31c6:	1f c0       	rjmp	.+62     	; 0x3206 <DIO_u8SetPortValue+0x88>
    31c8:	2f 81       	ldd	r18, Y+7	; 0x07
    31ca:	38 85       	ldd	r19, Y+8	; 0x08
    31cc:	23 30       	cpi	r18, 0x03	; 3
    31ce:	31 05       	cpc	r19, r1
    31d0:	81 f0       	breq	.+32     	; 0x31f2 <DIO_u8SetPortValue+0x74>
    31d2:	8f 81       	ldd	r24, Y+7	; 0x07
    31d4:	98 85       	ldd	r25, Y+8	; 0x08
    31d6:	84 30       	cpi	r24, 0x04	; 4
    31d8:	91 05       	cpc	r25, r1
    31da:	81 f0       	breq	.+32     	; 0x31fc <DIO_u8SetPortValue+0x7e>
    31dc:	14 c0       	rjmp	.+40     	; 0x3206 <DIO_u8SetPortValue+0x88>
		{
		/* In case of Port A*/
			case(DIO_U8_PORTA):
				PORTA=Copy_u8PortValue;
    31de:	eb e3       	ldi	r30, 0x3B	; 59
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	80 83       	st	Z, r24
    31e6:	11 c0       	rjmp	.+34     	; 0x320a <DIO_u8SetPortValue+0x8c>
				break;
			case(DIO_U8_PORTB):
				PORTB=Copy_u8PortValue;
    31e8:	e8 e3       	ldi	r30, 0x38	; 56
    31ea:	f0 e0       	ldi	r31, 0x00	; 0
    31ec:	8b 81       	ldd	r24, Y+3	; 0x03
    31ee:	80 83       	st	Z, r24
    31f0:	0c c0       	rjmp	.+24     	; 0x320a <DIO_u8SetPortValue+0x8c>
				break;
			case(DIO_U8_PORTC):
				PORTC=Copy_u8PortValue;
    31f2:	e5 e3       	ldi	r30, 0x35	; 53
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	8b 81       	ldd	r24, Y+3	; 0x03
    31f8:	80 83       	st	Z, r24
    31fa:	07 c0       	rjmp	.+14     	; 0x320a <DIO_u8SetPortValue+0x8c>
				break;
			case(DIO_U8_PORTD):
				PORTD=Copy_u8PortValue;
    31fc:	e2 e3       	ldi	r30, 0x32	; 50
    31fe:	f0 e0       	ldi	r31, 0x00	; 0
    3200:	8b 81       	ldd	r24, Y+3	; 0x03
    3202:	80 83       	st	Z, r24
    3204:	02 c0       	rjmp	.+4      	; 0x320a <DIO_u8SetPortValue+0x8c>
				break;
			default:
				local_s8_ErrorState=DIO_S8_INVALID_PORT_RANGE;
    3206:	8e ef       	ldi	r24, 0xFE	; 254
    3208:	89 83       	std	Y+1, r24	; 0x01
				break;
		}
	return local_s8_ErrorState;
    320a:	89 81       	ldd	r24, Y+1	; 0x01
}
    320c:	28 96       	adiw	r28, 0x08	; 8
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <DIO_s8TogglePin>:

Dio_enErrorStatus DIO_s8TogglePin(u8 Copy_u8PortID , u8 Copy_u8PinID){
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	00 d0       	rcall	.+0      	; 0x3224 <DIO_s8TogglePin+0x6>
    3224:	00 d0       	rcall	.+0      	; 0x3226 <DIO_s8TogglePin+0x8>
    3226:	0f 92       	push	r0
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	8a 83       	std	Y+2, r24	; 0x02
    322e:	6b 83       	std	Y+3, r22	; 0x03
	Dio_enErrorStatus Local_s8ErrorState=0;
    3230:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8PinID>=DIO_U8_PIN0 && Copy_u8PinID<=DIO_U8_PIN7)
    3232:	8b 81       	ldd	r24, Y+3	; 0x03
    3234:	88 30       	cpi	r24, 0x08	; 8
    3236:	08 f0       	brcs	.+2      	; 0x323a <DIO_s8TogglePin+0x1c>
    3238:	73 c0       	rjmp	.+230    	; 0x3320 <DIO_s8TogglePin+0x102>
	{
		switch(Copy_u8PortID)
    323a:	8a 81       	ldd	r24, Y+2	; 0x02
    323c:	28 2f       	mov	r18, r24
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	3d 83       	std	Y+5, r19	; 0x05
    3242:	2c 83       	std	Y+4, r18	; 0x04
    3244:	8c 81       	ldd	r24, Y+4	; 0x04
    3246:	9d 81       	ldd	r25, Y+5	; 0x05
    3248:	82 30       	cpi	r24, 0x02	; 2
    324a:	91 05       	cpc	r25, r1
    324c:	51 f1       	breq	.+84     	; 0x32a2 <DIO_s8TogglePin+0x84>
    324e:	2c 81       	ldd	r18, Y+4	; 0x04
    3250:	3d 81       	ldd	r19, Y+5	; 0x05
    3252:	23 30       	cpi	r18, 0x03	; 3
    3254:	31 05       	cpc	r19, r1
    3256:	34 f4       	brge	.+12     	; 0x3264 <DIO_s8TogglePin+0x46>
    3258:	8c 81       	ldd	r24, Y+4	; 0x04
    325a:	9d 81       	ldd	r25, Y+5	; 0x05
    325c:	81 30       	cpi	r24, 0x01	; 1
    325e:	91 05       	cpc	r25, r1
    3260:	61 f0       	breq	.+24     	; 0x327a <DIO_s8TogglePin+0x5c>
    3262:	5b c0       	rjmp	.+182    	; 0x331a <DIO_s8TogglePin+0xfc>
    3264:	2c 81       	ldd	r18, Y+4	; 0x04
    3266:	3d 81       	ldd	r19, Y+5	; 0x05
    3268:	23 30       	cpi	r18, 0x03	; 3
    326a:	31 05       	cpc	r19, r1
    326c:	71 f1       	breq	.+92     	; 0x32ca <DIO_s8TogglePin+0xac>
    326e:	8c 81       	ldd	r24, Y+4	; 0x04
    3270:	9d 81       	ldd	r25, Y+5	; 0x05
    3272:	84 30       	cpi	r24, 0x04	; 4
    3274:	91 05       	cpc	r25, r1
    3276:	e9 f1       	breq	.+122    	; 0x32f2 <DIO_s8TogglePin+0xd4>
    3278:	50 c0       	rjmp	.+160    	; 0x331a <DIO_s8TogglePin+0xfc>
		{
	/*in case of Toggling a pin in port A*/
			case (DIO_U8_PORTA):
				ToggleBit(DDRA,Copy_u8PinID);
    327a:	aa e3       	ldi	r26, 0x3A	; 58
    327c:	b0 e0       	ldi	r27, 0x00	; 0
    327e:	ea e3       	ldi	r30, 0x3A	; 58
    3280:	f0 e0       	ldi	r31, 0x00	; 0
    3282:	80 81       	ld	r24, Z
    3284:	48 2f       	mov	r20, r24
    3286:	8b 81       	ldd	r24, Y+3	; 0x03
    3288:	28 2f       	mov	r18, r24
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	81 e0       	ldi	r24, 0x01	; 1
    328e:	90 e0       	ldi	r25, 0x00	; 0
    3290:	02 2e       	mov	r0, r18
    3292:	02 c0       	rjmp	.+4      	; 0x3298 <DIO_s8TogglePin+0x7a>
    3294:	88 0f       	add	r24, r24
    3296:	99 1f       	adc	r25, r25
    3298:	0a 94       	dec	r0
    329a:	e2 f7       	brpl	.-8      	; 0x3294 <DIO_s8TogglePin+0x76>
    329c:	84 27       	eor	r24, r20
    329e:	8c 93       	st	X, r24
    32a0:	41 c0       	rjmp	.+130    	; 0x3324 <DIO_s8TogglePin+0x106>
				break;
		/******************************************************************************/
		/*in case of Toggling a pin in port B*/
			case (DIO_U8_PORTB):
				ToggleBit(DDRB,Copy_u8PinID);
    32a2:	a7 e3       	ldi	r26, 0x37	; 55
    32a4:	b0 e0       	ldi	r27, 0x00	; 0
    32a6:	e7 e3       	ldi	r30, 0x37	; 55
    32a8:	f0 e0       	ldi	r31, 0x00	; 0
    32aa:	80 81       	ld	r24, Z
    32ac:	48 2f       	mov	r20, r24
    32ae:	8b 81       	ldd	r24, Y+3	; 0x03
    32b0:	28 2f       	mov	r18, r24
    32b2:	30 e0       	ldi	r19, 0x00	; 0
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	02 2e       	mov	r0, r18
    32ba:	02 c0       	rjmp	.+4      	; 0x32c0 <DIO_s8TogglePin+0xa2>
    32bc:	88 0f       	add	r24, r24
    32be:	99 1f       	adc	r25, r25
    32c0:	0a 94       	dec	r0
    32c2:	e2 f7       	brpl	.-8      	; 0x32bc <DIO_s8TogglePin+0x9e>
    32c4:	84 27       	eor	r24, r20
    32c6:	8c 93       	st	X, r24
    32c8:	2d c0       	rjmp	.+90     	; 0x3324 <DIO_s8TogglePin+0x106>
				break;

		/******************************************************************************/
		/*in case of Toggling a pin in port C*/
			case (DIO_U8_PORTC):
				ToggleBit(DDRC,Copy_u8PinID);
    32ca:	a4 e3       	ldi	r26, 0x34	; 52
    32cc:	b0 e0       	ldi	r27, 0x00	; 0
    32ce:	e4 e3       	ldi	r30, 0x34	; 52
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	48 2f       	mov	r20, r24
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	28 2f       	mov	r18, r24
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	02 2e       	mov	r0, r18
    32e2:	02 c0       	rjmp	.+4      	; 0x32e8 <DIO_s8TogglePin+0xca>
    32e4:	88 0f       	add	r24, r24
    32e6:	99 1f       	adc	r25, r25
    32e8:	0a 94       	dec	r0
    32ea:	e2 f7       	brpl	.-8      	; 0x32e4 <DIO_s8TogglePin+0xc6>
    32ec:	84 27       	eor	r24, r20
    32ee:	8c 93       	st	X, r24
    32f0:	19 c0       	rjmp	.+50     	; 0x3324 <DIO_s8TogglePin+0x106>
				break;
		/******************************************************************************/
		/*in case of Toggling a pin in port D*/
			case (DIO_U8_PORTD):
				ToggleBit(DDRD,Copy_u8PinID);
    32f2:	a1 e3       	ldi	r26, 0x31	; 49
    32f4:	b0 e0       	ldi	r27, 0x00	; 0
    32f6:	e1 e3       	ldi	r30, 0x31	; 49
    32f8:	f0 e0       	ldi	r31, 0x00	; 0
    32fa:	80 81       	ld	r24, Z
    32fc:	48 2f       	mov	r20, r24
    32fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3300:	28 2f       	mov	r18, r24
    3302:	30 e0       	ldi	r19, 0x00	; 0
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	02 2e       	mov	r0, r18
    330a:	02 c0       	rjmp	.+4      	; 0x3310 <DIO_s8TogglePin+0xf2>
    330c:	88 0f       	add	r24, r24
    330e:	99 1f       	adc	r25, r25
    3310:	0a 94       	dec	r0
    3312:	e2 f7       	brpl	.-8      	; 0x330c <DIO_s8TogglePin+0xee>
    3314:	84 27       	eor	r24, r20
    3316:	8c 93       	st	X, r24
    3318:	05 c0       	rjmp	.+10     	; 0x3324 <DIO_s8TogglePin+0x106>
				break;
			default:
				Local_s8ErrorState=DIO_S8_INVALID_PORT_RANGE;
    331a:	8e ef       	ldi	r24, 0xFE	; 254
    331c:	89 83       	std	Y+1, r24	; 0x01
    331e:	02 c0       	rjmp	.+4      	; 0x3324 <DIO_s8TogglePin+0x106>
				break;
		}
	}
	else
	{
		Local_s8ErrorState=DIO_S8_INVALID_PIN_RANGE;
    3320:	8b ef       	ldi	r24, 0xFB	; 251
    3322:	89 83       	std	Y+1, r24	; 0x01
	}
return Local_s8ErrorState;
    3324:	89 81       	ldd	r24, Y+1	; 0x01
}
    3326:	0f 90       	pop	r0
    3328:	0f 90       	pop	r0
    332a:	0f 90       	pop	r0
    332c:	0f 90       	pop	r0
    332e:	0f 90       	pop	r0
    3330:	cf 91       	pop	r28
    3332:	df 91       	pop	r29
    3334:	08 95       	ret

00003336 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID){
    3336:	df 93       	push	r29
    3338:	cf 93       	push	r28
    333a:	00 d0       	rcall	.+0      	; 0x333c <DIO_u8GetPinValue+0x6>
    333c:	00 d0       	rcall	.+0      	; 0x333e <DIO_u8GetPinValue+0x8>
    333e:	0f 92       	push	r0
    3340:	cd b7       	in	r28, 0x3d	; 61
    3342:	de b7       	in	r29, 0x3e	; 62
    3344:	8a 83       	std	Y+2, r24	; 0x02
    3346:	6b 83       	std	Y+3, r22	; 0x03
	u8 localPinValue=0;
    3348:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8PinID>=DIO_U8_PIN0 && Copy_u8PinID<=DIO_U8_PIN7)
    334a:	8b 81       	ldd	r24, Y+3	; 0x03
    334c:	88 30       	cpi	r24, 0x08	; 8
    334e:	08 f0       	brcs	.+2      	; 0x3352 <DIO_u8GetPinValue+0x1c>
    3350:	67 c0       	rjmp	.+206    	; 0x3420 <DIO_u8GetPinValue+0xea>
	{
		switch(Copy_u8PortID)
    3352:	8a 81       	ldd	r24, Y+2	; 0x02
    3354:	28 2f       	mov	r18, r24
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	3d 83       	std	Y+5, r19	; 0x05
    335a:	2c 83       	std	Y+4, r18	; 0x04
    335c:	4c 81       	ldd	r20, Y+4	; 0x04
    335e:	5d 81       	ldd	r21, Y+5	; 0x05
    3360:	42 30       	cpi	r20, 0x02	; 2
    3362:	51 05       	cpc	r21, r1
    3364:	41 f1       	breq	.+80     	; 0x33b6 <DIO_u8GetPinValue+0x80>
    3366:	8c 81       	ldd	r24, Y+4	; 0x04
    3368:	9d 81       	ldd	r25, Y+5	; 0x05
    336a:	83 30       	cpi	r24, 0x03	; 3
    336c:	91 05       	cpc	r25, r1
    336e:	34 f4       	brge	.+12     	; 0x337c <DIO_u8GetPinValue+0x46>
    3370:	2c 81       	ldd	r18, Y+4	; 0x04
    3372:	3d 81       	ldd	r19, Y+5	; 0x05
    3374:	21 30       	cpi	r18, 0x01	; 1
    3376:	31 05       	cpc	r19, r1
    3378:	61 f0       	breq	.+24     	; 0x3392 <DIO_u8GetPinValue+0x5c>
    337a:	52 c0       	rjmp	.+164    	; 0x3420 <DIO_u8GetPinValue+0xea>
    337c:	4c 81       	ldd	r20, Y+4	; 0x04
    337e:	5d 81       	ldd	r21, Y+5	; 0x05
    3380:	43 30       	cpi	r20, 0x03	; 3
    3382:	51 05       	cpc	r21, r1
    3384:	51 f1       	breq	.+84     	; 0x33da <DIO_u8GetPinValue+0xa4>
    3386:	8c 81       	ldd	r24, Y+4	; 0x04
    3388:	9d 81       	ldd	r25, Y+5	; 0x05
    338a:	84 30       	cpi	r24, 0x04	; 4
    338c:	91 05       	cpc	r25, r1
    338e:	b9 f1       	breq	.+110    	; 0x33fe <DIO_u8GetPinValue+0xc8>
    3390:	47 c0       	rjmp	.+142    	; 0x3420 <DIO_u8GetPinValue+0xea>
		{
		/* In case of Port A*/
			case(DIO_U8_PORTA):
				localPinValue=GetBit(PINA,Copy_u8PinID);
    3392:	e9 e3       	ldi	r30, 0x39	; 57
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	28 2f       	mov	r18, r24
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	8b 81       	ldd	r24, Y+3	; 0x03
    339e:	88 2f       	mov	r24, r24
    33a0:	90 e0       	ldi	r25, 0x00	; 0
    33a2:	a9 01       	movw	r20, r18
    33a4:	02 c0       	rjmp	.+4      	; 0x33aa <DIO_u8GetPinValue+0x74>
    33a6:	55 95       	asr	r21
    33a8:	47 95       	ror	r20
    33aa:	8a 95       	dec	r24
    33ac:	e2 f7       	brpl	.-8      	; 0x33a6 <DIO_u8GetPinValue+0x70>
    33ae:	ca 01       	movw	r24, r20
    33b0:	81 70       	andi	r24, 0x01	; 1
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	35 c0       	rjmp	.+106    	; 0x3420 <DIO_u8GetPinValue+0xea>
				break;
			case(DIO_U8_PORTB):
				localPinValue=GetBit(PINB,Copy_u8PinID);
    33b6:	e6 e3       	ldi	r30, 0x36	; 54
    33b8:	f0 e0       	ldi	r31, 0x00	; 0
    33ba:	80 81       	ld	r24, Z
    33bc:	28 2f       	mov	r18, r24
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	8b 81       	ldd	r24, Y+3	; 0x03
    33c2:	88 2f       	mov	r24, r24
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	a9 01       	movw	r20, r18
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <DIO_u8GetPinValue+0x98>
    33ca:	55 95       	asr	r21
    33cc:	47 95       	ror	r20
    33ce:	8a 95       	dec	r24
    33d0:	e2 f7       	brpl	.-8      	; 0x33ca <DIO_u8GetPinValue+0x94>
    33d2:	ca 01       	movw	r24, r20
    33d4:	81 70       	andi	r24, 0x01	; 1
    33d6:	89 83       	std	Y+1, r24	; 0x01
    33d8:	23 c0       	rjmp	.+70     	; 0x3420 <DIO_u8GetPinValue+0xea>
				break;
			case(DIO_U8_PORTC):
				localPinValue=GetBit(PINC,Copy_u8PinID);
    33da:	e3 e3       	ldi	r30, 0x33	; 51
    33dc:	f0 e0       	ldi	r31, 0x00	; 0
    33de:	80 81       	ld	r24, Z
    33e0:	28 2f       	mov	r18, r24
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	8b 81       	ldd	r24, Y+3	; 0x03
    33e6:	88 2f       	mov	r24, r24
    33e8:	90 e0       	ldi	r25, 0x00	; 0
    33ea:	a9 01       	movw	r20, r18
    33ec:	02 c0       	rjmp	.+4      	; 0x33f2 <DIO_u8GetPinValue+0xbc>
    33ee:	55 95       	asr	r21
    33f0:	47 95       	ror	r20
    33f2:	8a 95       	dec	r24
    33f4:	e2 f7       	brpl	.-8      	; 0x33ee <DIO_u8GetPinValue+0xb8>
    33f6:	ca 01       	movw	r24, r20
    33f8:	81 70       	andi	r24, 0x01	; 1
    33fa:	89 83       	std	Y+1, r24	; 0x01
    33fc:	11 c0       	rjmp	.+34     	; 0x3420 <DIO_u8GetPinValue+0xea>
				break;
			case(DIO_U8_PORTD):
				localPinValue=GetBit(PIND,Copy_u8PinID);
    33fe:	e0 e3       	ldi	r30, 0x30	; 48
    3400:	f0 e0       	ldi	r31, 0x00	; 0
    3402:	80 81       	ld	r24, Z
    3404:	28 2f       	mov	r18, r24
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	88 2f       	mov	r24, r24
    340c:	90 e0       	ldi	r25, 0x00	; 0
    340e:	a9 01       	movw	r20, r18
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <DIO_u8GetPinValue+0xe0>
    3412:	55 95       	asr	r21
    3414:	47 95       	ror	r20
    3416:	8a 95       	dec	r24
    3418:	e2 f7       	brpl	.-8      	; 0x3412 <DIO_u8GetPinValue+0xdc>
    341a:	ca 01       	movw	r24, r20
    341c:	81 70       	andi	r24, 0x01	; 1
    341e:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		// do nothing
	}
	return localPinValue;
    3420:	89 81       	ldd	r24, Y+1	; 0x01
}
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	0f 90       	pop	r0
    342c:	cf 91       	pop	r28
    342e:	df 91       	pop	r29
    3430:	08 95       	ret

00003432 <LCD_VoidInit>:





void LCD_VoidInit(void){
    3432:	0f 93       	push	r16
    3434:	1f 93       	push	r17
    3436:	df 93       	push	r29
    3438:	cf 93       	push	r28
    343a:	cd b7       	in	r28, 0x3d	; 61
    343c:	de b7       	in	r29, 0x3e	; 62
    343e:	ca 55       	subi	r28, 0x5A	; 90
    3440:	d0 40       	sbci	r29, 0x00	; 0
    3442:	0f b6       	in	r0, 0x3f	; 63
    3444:	f8 94       	cli
    3446:	de bf       	out	0x3e, r29	; 62
    3448:	0f be       	out	0x3f, r0	; 63
    344a:	cd bf       	out	0x3d, r28	; 61
	/*Setting the data port to output*/
	DIO_s8SetPortDirection(LCD_DATA_Port,DIO_U8_PORT_DIR_OUTPUT);//Setting data pins to output
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	61 e0       	ldi	r22, 0x01	; 1
    3450:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <DIO_s8SetPortDirection>

	/*SETTING PINS RS/RW/EN to output*/
	DIO_s8SetPinDirection(LCD_CTRL_Port,LCD_U8_RS_PIN,DIO_U8_PIN_DIR_OUTPUT);
    3454:	84 e0       	ldi	r24, 0x04	; 4
    3456:	67 e0       	ldi	r22, 0x07	; 7
    3458:	41 e0       	ldi	r20, 0x01	; 1
    345a:	0e 94 24 15 	call	0x2a48	; 0x2a48 <DIO_s8SetPinDirection>
	DIO_s8SetPinDirection(LCD_CTRL_Port,LCD_U8_RW_PIN,DIO_U8_PIN_DIR_OUTPUT);
    345e:	84 e0       	ldi	r24, 0x04	; 4
    3460:	66 e0       	ldi	r22, 0x06	; 6
    3462:	41 e0       	ldi	r20, 0x01	; 1
    3464:	0e 94 24 15 	call	0x2a48	; 0x2a48 <DIO_s8SetPinDirection>
	DIO_s8SetPinDirection(LCD_CTRL_Port,LCD_U8_EN_PIN,DIO_U8_PIN_DIR_OUTPUT);
    3468:	84 e0       	ldi	r24, 0x04	; 4
    346a:	65 e0       	ldi	r22, 0x05	; 5
    346c:	41 e0       	ldi	r20, 0x01	; 1
    346e:	0e 94 24 15 	call	0x2a48	; 0x2a48 <DIO_s8SetPinDirection>
    3472:	fe 01       	movw	r30, r28
    3474:	e9 5a       	subi	r30, 0xA9	; 169
    3476:	ff 4f       	sbci	r31, 0xFF	; 255
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	a8 e4       	ldi	r26, 0x48	; 72
    347e:	b2 e4       	ldi	r27, 0x42	; 66
    3480:	80 83       	st	Z, r24
    3482:	91 83       	std	Z+1, r25	; 0x01
    3484:	a2 83       	std	Z+2, r26	; 0x02
    3486:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3488:	8e 01       	movw	r16, r28
    348a:	0d 5a       	subi	r16, 0xAD	; 173
    348c:	1f 4f       	sbci	r17, 0xFF	; 255
    348e:	fe 01       	movw	r30, r28
    3490:	e9 5a       	subi	r30, 0xA9	; 169
    3492:	ff 4f       	sbci	r31, 0xFF	; 255
    3494:	60 81       	ld	r22, Z
    3496:	71 81       	ldd	r23, Z+1	; 0x01
    3498:	82 81       	ldd	r24, Z+2	; 0x02
    349a:	93 81       	ldd	r25, Z+3	; 0x03
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	30 e0       	ldi	r19, 0x00	; 0
    34a0:	4a ef       	ldi	r20, 0xFA	; 250
    34a2:	54 e4       	ldi	r21, 0x44	; 68
    34a4:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    34a8:	dc 01       	movw	r26, r24
    34aa:	cb 01       	movw	r24, r22
    34ac:	f8 01       	movw	r30, r16
    34ae:	80 83       	st	Z, r24
    34b0:	91 83       	std	Z+1, r25	; 0x01
    34b2:	a2 83       	std	Z+2, r26	; 0x02
    34b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    34b6:	fe 01       	movw	r30, r28
    34b8:	ed 5a       	subi	r30, 0xAD	; 173
    34ba:	ff 4f       	sbci	r31, 0xFF	; 255
    34bc:	60 81       	ld	r22, Z
    34be:	71 81       	ldd	r23, Z+1	; 0x01
    34c0:	82 81       	ldd	r24, Z+2	; 0x02
    34c2:	93 81       	ldd	r25, Z+3	; 0x03
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	40 e8       	ldi	r20, 0x80	; 128
    34ca:	5f e3       	ldi	r21, 0x3F	; 63
    34cc:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    34d0:	88 23       	and	r24, r24
    34d2:	44 f4       	brge	.+16     	; 0x34e4 <LCD_VoidInit+0xb2>
		__ticks = 1;
    34d4:	fe 01       	movw	r30, r28
    34d6:	ef 5a       	subi	r30, 0xAF	; 175
    34d8:	ff 4f       	sbci	r31, 0xFF	; 255
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	91 83       	std	Z+1, r25	; 0x01
    34e0:	80 83       	st	Z, r24
    34e2:	64 c0       	rjmp	.+200    	; 0x35ac <LCD_VoidInit+0x17a>
	else if (__tmp > 65535)
    34e4:	fe 01       	movw	r30, r28
    34e6:	ed 5a       	subi	r30, 0xAD	; 173
    34e8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ea:	60 81       	ld	r22, Z
    34ec:	71 81       	ldd	r23, Z+1	; 0x01
    34ee:	82 81       	ldd	r24, Z+2	; 0x02
    34f0:	93 81       	ldd	r25, Z+3	; 0x03
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	3f ef       	ldi	r19, 0xFF	; 255
    34f6:	4f e7       	ldi	r20, 0x7F	; 127
    34f8:	57 e4       	ldi	r21, 0x47	; 71
    34fa:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    34fe:	18 16       	cp	r1, r24
    3500:	0c f0       	brlt	.+2      	; 0x3504 <LCD_VoidInit+0xd2>
    3502:	43 c0       	rjmp	.+134    	; 0x358a <LCD_VoidInit+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3504:	fe 01       	movw	r30, r28
    3506:	e9 5a       	subi	r30, 0xA9	; 169
    3508:	ff 4f       	sbci	r31, 0xFF	; 255
    350a:	60 81       	ld	r22, Z
    350c:	71 81       	ldd	r23, Z+1	; 0x01
    350e:	82 81       	ldd	r24, Z+2	; 0x02
    3510:	93 81       	ldd	r25, Z+3	; 0x03
    3512:	20 e0       	ldi	r18, 0x00	; 0
    3514:	30 e0       	ldi	r19, 0x00	; 0
    3516:	40 e2       	ldi	r20, 0x20	; 32
    3518:	51 e4       	ldi	r21, 0x41	; 65
    351a:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	8e 01       	movw	r16, r28
    3524:	0f 5a       	subi	r16, 0xAF	; 175
    3526:	1f 4f       	sbci	r17, 0xFF	; 255
    3528:	bc 01       	movw	r22, r24
    352a:	cd 01       	movw	r24, r26
    352c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3530:	dc 01       	movw	r26, r24
    3532:	cb 01       	movw	r24, r22
    3534:	f8 01       	movw	r30, r16
    3536:	91 83       	std	Z+1, r25	; 0x01
    3538:	80 83       	st	Z, r24
    353a:	1f c0       	rjmp	.+62     	; 0x357a <LCD_VoidInit+0x148>
    353c:	fe 01       	movw	r30, r28
    353e:	e1 5b       	subi	r30, 0xB1	; 177
    3540:	ff 4f       	sbci	r31, 0xFF	; 255
    3542:	88 ec       	ldi	r24, 0xC8	; 200
    3544:	90 e0       	ldi	r25, 0x00	; 0
    3546:	91 83       	std	Z+1, r25	; 0x01
    3548:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    354a:	fe 01       	movw	r30, r28
    354c:	e1 5b       	subi	r30, 0xB1	; 177
    354e:	ff 4f       	sbci	r31, 0xFF	; 255
    3550:	80 81       	ld	r24, Z
    3552:	91 81       	ldd	r25, Z+1	; 0x01
    3554:	01 97       	sbiw	r24, 0x01	; 1
    3556:	f1 f7       	brne	.-4      	; 0x3554 <LCD_VoidInit+0x122>
    3558:	fe 01       	movw	r30, r28
    355a:	e1 5b       	subi	r30, 0xB1	; 177
    355c:	ff 4f       	sbci	r31, 0xFF	; 255
    355e:	91 83       	std	Z+1, r25	; 0x01
    3560:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3562:	de 01       	movw	r26, r28
    3564:	af 5a       	subi	r26, 0xAF	; 175
    3566:	bf 4f       	sbci	r27, 0xFF	; 255
    3568:	fe 01       	movw	r30, r28
    356a:	ef 5a       	subi	r30, 0xAF	; 175
    356c:	ff 4f       	sbci	r31, 0xFF	; 255
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	01 97       	sbiw	r24, 0x01	; 1
    3574:	11 96       	adiw	r26, 0x01	; 1
    3576:	9c 93       	st	X, r25
    3578:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    357a:	fe 01       	movw	r30, r28
    357c:	ef 5a       	subi	r30, 0xAF	; 175
    357e:	ff 4f       	sbci	r31, 0xFF	; 255
    3580:	80 81       	ld	r24, Z
    3582:	91 81       	ldd	r25, Z+1	; 0x01
    3584:	00 97       	sbiw	r24, 0x00	; 0
    3586:	d1 f6       	brne	.-76     	; 0x353c <LCD_VoidInit+0x10a>
    3588:	27 c0       	rjmp	.+78     	; 0x35d8 <LCD_VoidInit+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    358a:	8e 01       	movw	r16, r28
    358c:	0f 5a       	subi	r16, 0xAF	; 175
    358e:	1f 4f       	sbci	r17, 0xFF	; 255
    3590:	fe 01       	movw	r30, r28
    3592:	ed 5a       	subi	r30, 0xAD	; 173
    3594:	ff 4f       	sbci	r31, 0xFF	; 255
    3596:	60 81       	ld	r22, Z
    3598:	71 81       	ldd	r23, Z+1	; 0x01
    359a:	82 81       	ldd	r24, Z+2	; 0x02
    359c:	93 81       	ldd	r25, Z+3	; 0x03
    359e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    35a2:	dc 01       	movw	r26, r24
    35a4:	cb 01       	movw	r24, r22
    35a6:	f8 01       	movw	r30, r16
    35a8:	91 83       	std	Z+1, r25	; 0x01
    35aa:	80 83       	st	Z, r24
    35ac:	de 01       	movw	r26, r28
    35ae:	a3 5b       	subi	r26, 0xB3	; 179
    35b0:	bf 4f       	sbci	r27, 0xFF	; 255
    35b2:	fe 01       	movw	r30, r28
    35b4:	ef 5a       	subi	r30, 0xAF	; 175
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	80 81       	ld	r24, Z
    35ba:	91 81       	ldd	r25, Z+1	; 0x01
    35bc:	8d 93       	st	X+, r24
    35be:	9c 93       	st	X, r25
    35c0:	fe 01       	movw	r30, r28
    35c2:	e3 5b       	subi	r30, 0xB3	; 179
    35c4:	ff 4f       	sbci	r31, 0xFF	; 255
    35c6:	80 81       	ld	r24, Z
    35c8:	91 81       	ldd	r25, Z+1	; 0x01
    35ca:	01 97       	sbiw	r24, 0x01	; 1
    35cc:	f1 f7       	brne	.-4      	; 0x35ca <LCD_VoidInit+0x198>
    35ce:	fe 01       	movw	r30, r28
    35d0:	e3 5b       	subi	r30, 0xB3	; 179
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	80 83       	st	Z, r24
	_delay_ms(50);
#if LCD_MODE==LCD_8_BIT_MODE

	/*Send Function Set Command    */
	LCD_VoidSendCommand(LCD_FunctionSet8bit);
    35d8:	8c e3       	ldi	r24, 0x3C	; 60
    35da:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
    35de:	fe 01       	movw	r30, r28
    35e0:	e7 5b       	subi	r30, 0xB7	; 183
    35e2:	ff 4f       	sbci	r31, 0xFF	; 255
    35e4:	80 e0       	ldi	r24, 0x00	; 0
    35e6:	90 e0       	ldi	r25, 0x00	; 0
    35e8:	a8 e4       	ldi	r26, 0x48	; 72
    35ea:	b2 e4       	ldi	r27, 0x42	; 66
    35ec:	80 83       	st	Z, r24
    35ee:	91 83       	std	Z+1, r25	; 0x01
    35f0:	a2 83       	std	Z+2, r26	; 0x02
    35f2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    35f4:	8e 01       	movw	r16, r28
    35f6:	0b 5b       	subi	r16, 0xBB	; 187
    35f8:	1f 4f       	sbci	r17, 0xFF	; 255
    35fa:	fe 01       	movw	r30, r28
    35fc:	e7 5b       	subi	r30, 0xB7	; 183
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	60 81       	ld	r22, Z
    3602:	71 81       	ldd	r23, Z+1	; 0x01
    3604:	82 81       	ldd	r24, Z+2	; 0x02
    3606:	93 81       	ldd	r25, Z+3	; 0x03
    3608:	2b ea       	ldi	r18, 0xAB	; 171
    360a:	3a ea       	ldi	r19, 0xAA	; 170
    360c:	4a e2       	ldi	r20, 0x2A	; 42
    360e:	50 e4       	ldi	r21, 0x40	; 64
    3610:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3614:	dc 01       	movw	r26, r24
    3616:	cb 01       	movw	r24, r22
    3618:	f8 01       	movw	r30, r16
    361a:	80 83       	st	Z, r24
    361c:	91 83       	std	Z+1, r25	; 0x01
    361e:	a2 83       	std	Z+2, r26	; 0x02
    3620:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3622:	fe 01       	movw	r30, r28
    3624:	eb 5b       	subi	r30, 0xBB	; 187
    3626:	ff 4f       	sbci	r31, 0xFF	; 255
    3628:	60 81       	ld	r22, Z
    362a:	71 81       	ldd	r23, Z+1	; 0x01
    362c:	82 81       	ldd	r24, Z+2	; 0x02
    362e:	93 81       	ldd	r25, Z+3	; 0x03
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	40 e8       	ldi	r20, 0x80	; 128
    3636:	5f e3       	ldi	r21, 0x3F	; 63
    3638:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    363c:	88 23       	and	r24, r24
    363e:	34 f4       	brge	.+12     	; 0x364c <LCD_VoidInit+0x21a>
		__ticks = 1;
    3640:	fe 01       	movw	r30, r28
    3642:	ec 5b       	subi	r30, 0xBC	; 188
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	81 e0       	ldi	r24, 0x01	; 1
    3648:	80 83       	st	Z, r24
    364a:	a7 c0       	rjmp	.+334    	; 0x379a <LCD_VoidInit+0x368>
	else if (__tmp > 255)
    364c:	fe 01       	movw	r30, r28
    364e:	eb 5b       	subi	r30, 0xBB	; 187
    3650:	ff 4f       	sbci	r31, 0xFF	; 255
    3652:	60 81       	ld	r22, Z
    3654:	71 81       	ldd	r23, Z+1	; 0x01
    3656:	82 81       	ldd	r24, Z+2	; 0x02
    3658:	93 81       	ldd	r25, Z+3	; 0x03
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	4f e7       	ldi	r20, 0x7F	; 127
    3660:	53 e4       	ldi	r21, 0x43	; 67
    3662:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    3666:	18 16       	cp	r1, r24
    3668:	0c f0       	brlt	.+2      	; 0x366c <LCD_VoidInit+0x23a>
    366a:	87 c0       	rjmp	.+270    	; 0x377a <LCD_VoidInit+0x348>
	{
		_delay_ms(__us / 1000.0);
    366c:	fe 01       	movw	r30, r28
    366e:	e7 5b       	subi	r30, 0xB7	; 183
    3670:	ff 4f       	sbci	r31, 0xFF	; 255
    3672:	60 81       	ld	r22, Z
    3674:	71 81       	ldd	r23, Z+1	; 0x01
    3676:	82 81       	ldd	r24, Z+2	; 0x02
    3678:	93 81       	ldd	r25, Z+3	; 0x03
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	4a e7       	ldi	r20, 0x7A	; 122
    3680:	54 e4       	ldi	r21, 0x44	; 68
    3682:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__divsf3>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	fe 01       	movw	r30, r28
    368c:	e0 5c       	subi	r30, 0xC0	; 192
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	80 83       	st	Z, r24
    3692:	91 83       	std	Z+1, r25	; 0x01
    3694:	a2 83       	std	Z+2, r26	; 0x02
    3696:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3698:	fe 01       	movw	r30, r28
    369a:	e0 5c       	subi	r30, 0xC0	; 192
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	60 81       	ld	r22, Z
    36a0:	71 81       	ldd	r23, Z+1	; 0x01
    36a2:	82 81       	ldd	r24, Z+2	; 0x02
    36a4:	93 81       	ldd	r25, Z+3	; 0x03
    36a6:	20 e0       	ldi	r18, 0x00	; 0
    36a8:	30 e0       	ldi	r19, 0x00	; 0
    36aa:	4a ef       	ldi	r20, 0xFA	; 250
    36ac:	54 e4       	ldi	r21, 0x44	; 68
    36ae:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	8c af       	std	Y+60, r24	; 0x3c
    36b8:	9d af       	std	Y+61, r25	; 0x3d
    36ba:	ae af       	std	Y+62, r26	; 0x3e
    36bc:	bf af       	std	Y+63, r27	; 0x3f
	if (__tmp < 1.0)
    36be:	6c ad       	ldd	r22, Y+60	; 0x3c
    36c0:	7d ad       	ldd	r23, Y+61	; 0x3d
    36c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    36c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    36c6:	20 e0       	ldi	r18, 0x00	; 0
    36c8:	30 e0       	ldi	r19, 0x00	; 0
    36ca:	40 e8       	ldi	r20, 0x80	; 128
    36cc:	5f e3       	ldi	r21, 0x3F	; 63
    36ce:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    36d2:	88 23       	and	r24, r24
    36d4:	2c f4       	brge	.+10     	; 0x36e0 <LCD_VoidInit+0x2ae>
		__ticks = 1;
    36d6:	81 e0       	ldi	r24, 0x01	; 1
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	9b af       	std	Y+59, r25	; 0x3b
    36dc:	8a af       	std	Y+58, r24	; 0x3a
    36de:	42 c0       	rjmp	.+132    	; 0x3764 <LCD_VoidInit+0x332>
	else if (__tmp > 65535)
    36e0:	6c ad       	ldd	r22, Y+60	; 0x3c
    36e2:	7d ad       	ldd	r23, Y+61	; 0x3d
    36e4:	8e ad       	ldd	r24, Y+62	; 0x3e
    36e6:	9f ad       	ldd	r25, Y+63	; 0x3f
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	3f ef       	ldi	r19, 0xFF	; 255
    36ec:	4f e7       	ldi	r20, 0x7F	; 127
    36ee:	57 e4       	ldi	r21, 0x47	; 71
    36f0:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    36f4:	18 16       	cp	r1, r24
    36f6:	64 f5       	brge	.+88     	; 0x3750 <LCD_VoidInit+0x31e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36f8:	fe 01       	movw	r30, r28
    36fa:	e0 5c       	subi	r30, 0xC0	; 192
    36fc:	ff 4f       	sbci	r31, 0xFF	; 255
    36fe:	60 81       	ld	r22, Z
    3700:	71 81       	ldd	r23, Z+1	; 0x01
    3702:	82 81       	ldd	r24, Z+2	; 0x02
    3704:	93 81       	ldd	r25, Z+3	; 0x03
    3706:	20 e0       	ldi	r18, 0x00	; 0
    3708:	30 e0       	ldi	r19, 0x00	; 0
    370a:	40 e2       	ldi	r20, 0x20	; 32
    370c:	51 e4       	ldi	r21, 0x41	; 65
    370e:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3712:	dc 01       	movw	r26, r24
    3714:	cb 01       	movw	r24, r22
    3716:	bc 01       	movw	r22, r24
    3718:	cd 01       	movw	r24, r26
    371a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	9b af       	std	Y+59, r25	; 0x3b
    3724:	8a af       	std	Y+58, r24	; 0x3a
    3726:	0f c0       	rjmp	.+30     	; 0x3746 <LCD_VoidInit+0x314>
    3728:	88 ec       	ldi	r24, 0xC8	; 200
    372a:	90 e0       	ldi	r25, 0x00	; 0
    372c:	99 af       	std	Y+57, r25	; 0x39
    372e:	88 af       	std	Y+56, r24	; 0x38
    3730:	88 ad       	ldd	r24, Y+56	; 0x38
    3732:	99 ad       	ldd	r25, Y+57	; 0x39
    3734:	01 97       	sbiw	r24, 0x01	; 1
    3736:	f1 f7       	brne	.-4      	; 0x3734 <LCD_VoidInit+0x302>
    3738:	99 af       	std	Y+57, r25	; 0x39
    373a:	88 af       	std	Y+56, r24	; 0x38
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    373c:	8a ad       	ldd	r24, Y+58	; 0x3a
    373e:	9b ad       	ldd	r25, Y+59	; 0x3b
    3740:	01 97       	sbiw	r24, 0x01	; 1
    3742:	9b af       	std	Y+59, r25	; 0x3b
    3744:	8a af       	std	Y+58, r24	; 0x3a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3746:	8a ad       	ldd	r24, Y+58	; 0x3a
    3748:	9b ad       	ldd	r25, Y+59	; 0x3b
    374a:	00 97       	sbiw	r24, 0x00	; 0
    374c:	69 f7       	brne	.-38     	; 0x3728 <LCD_VoidInit+0x2f6>
    374e:	2e c0       	rjmp	.+92     	; 0x37ac <LCD_VoidInit+0x37a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3750:	6c ad       	ldd	r22, Y+60	; 0x3c
    3752:	7d ad       	ldd	r23, Y+61	; 0x3d
    3754:	8e ad       	ldd	r24, Y+62	; 0x3e
    3756:	9f ad       	ldd	r25, Y+63	; 0x3f
    3758:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	9b af       	std	Y+59, r25	; 0x3b
    3762:	8a af       	std	Y+58, r24	; 0x3a
    3764:	8a ad       	ldd	r24, Y+58	; 0x3a
    3766:	9b ad       	ldd	r25, Y+59	; 0x3b
    3768:	9f ab       	std	Y+55, r25	; 0x37
    376a:	8e ab       	std	Y+54, r24	; 0x36
    376c:	8e a9       	ldd	r24, Y+54	; 0x36
    376e:	9f a9       	ldd	r25, Y+55	; 0x37
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <LCD_VoidInit+0x33e>
    3774:	9f ab       	std	Y+55, r25	; 0x37
    3776:	8e ab       	std	Y+54, r24	; 0x36
    3778:	19 c0       	rjmp	.+50     	; 0x37ac <LCD_VoidInit+0x37a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    377a:	8e 01       	movw	r16, r28
    377c:	0c 5b       	subi	r16, 0xBC	; 188
    377e:	1f 4f       	sbci	r17, 0xFF	; 255
    3780:	fe 01       	movw	r30, r28
    3782:	eb 5b       	subi	r30, 0xBB	; 187
    3784:	ff 4f       	sbci	r31, 0xFF	; 255
    3786:	60 81       	ld	r22, Z
    3788:	71 81       	ldd	r23, Z+1	; 0x01
    378a:	82 81       	ldd	r24, Z+2	; 0x02
    378c:	93 81       	ldd	r25, Z+3	; 0x03
    378e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3792:	dc 01       	movw	r26, r24
    3794:	cb 01       	movw	r24, r22
    3796:	f8 01       	movw	r30, r16
    3798:	80 83       	st	Z, r24
    379a:	fe 01       	movw	r30, r28
    379c:	ec 5b       	subi	r30, 0xBC	; 188
    379e:	ff 4f       	sbci	r31, 0xFF	; 255
    37a0:	80 81       	ld	r24, Z
    37a2:	8d ab       	std	Y+53, r24	; 0x35
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    37a4:	8d a9       	ldd	r24, Y+53	; 0x35
    37a6:	8a 95       	dec	r24
    37a8:	f1 f7       	brne	.-4      	; 0x37a6 <LCD_VoidInit+0x374>
    37aa:	8d ab       	std	Y+53, r24	; 0x35
	_delay_us(50);
	LCD_VoidSendCommand(LCD_DisplayOn);
    37ac:	8f e0       	ldi	r24, 0x0F	; 15
    37ae:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	90 e0       	ldi	r25, 0x00	; 0
    37b6:	a8 e4       	ldi	r26, 0x48	; 72
    37b8:	b2 e4       	ldi	r27, 0x42	; 66
    37ba:	89 ab       	std	Y+49, r24	; 0x31
    37bc:	9a ab       	std	Y+50, r25	; 0x32
    37be:	ab ab       	std	Y+51, r26	; 0x33
    37c0:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    37c2:	69 a9       	ldd	r22, Y+49	; 0x31
    37c4:	7a a9       	ldd	r23, Y+50	; 0x32
    37c6:	8b a9       	ldd	r24, Y+51	; 0x33
    37c8:	9c a9       	ldd	r25, Y+52	; 0x34
    37ca:	2b ea       	ldi	r18, 0xAB	; 171
    37cc:	3a ea       	ldi	r19, 0xAA	; 170
    37ce:	4a e2       	ldi	r20, 0x2A	; 42
    37d0:	50 e4       	ldi	r21, 0x40	; 64
    37d2:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    37d6:	dc 01       	movw	r26, r24
    37d8:	cb 01       	movw	r24, r22
    37da:	8d a7       	std	Y+45, r24	; 0x2d
    37dc:	9e a7       	std	Y+46, r25	; 0x2e
    37de:	af a7       	std	Y+47, r26	; 0x2f
    37e0:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    37e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    37e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    37e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    37e8:	98 a9       	ldd	r25, Y+48	; 0x30
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	30 e0       	ldi	r19, 0x00	; 0
    37ee:	40 e8       	ldi	r20, 0x80	; 128
    37f0:	5f e3       	ldi	r21, 0x3F	; 63
    37f2:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    37f6:	88 23       	and	r24, r24
    37f8:	1c f4       	brge	.+6      	; 0x3800 <LCD_VoidInit+0x3ce>
		__ticks = 1;
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	8c a7       	std	Y+44, r24	; 0x2c
    37fe:	91 c0       	rjmp	.+290    	; 0x3922 <LCD_VoidInit+0x4f0>
	else if (__tmp > 255)
    3800:	6d a5       	ldd	r22, Y+45	; 0x2d
    3802:	7e a5       	ldd	r23, Y+46	; 0x2e
    3804:	8f a5       	ldd	r24, Y+47	; 0x2f
    3806:	98 a9       	ldd	r25, Y+48	; 0x30
    3808:	20 e0       	ldi	r18, 0x00	; 0
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	4f e7       	ldi	r20, 0x7F	; 127
    380e:	53 e4       	ldi	r21, 0x43	; 67
    3810:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    3814:	18 16       	cp	r1, r24
    3816:	0c f0       	brlt	.+2      	; 0x381a <LCD_VoidInit+0x3e8>
    3818:	7b c0       	rjmp	.+246    	; 0x3910 <LCD_VoidInit+0x4de>
	{
		_delay_ms(__us / 1000.0);
    381a:	69 a9       	ldd	r22, Y+49	; 0x31
    381c:	7a a9       	ldd	r23, Y+50	; 0x32
    381e:	8b a9       	ldd	r24, Y+51	; 0x33
    3820:	9c a9       	ldd	r25, Y+52	; 0x34
    3822:	20 e0       	ldi	r18, 0x00	; 0
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	4a e7       	ldi	r20, 0x7A	; 122
    3828:	54 e4       	ldi	r21, 0x44	; 68
    382a:	0e 94 8c 0a 	call	0x1518	; 0x1518 <__divsf3>
    382e:	dc 01       	movw	r26, r24
    3830:	cb 01       	movw	r24, r22
    3832:	88 a7       	std	Y+40, r24	; 0x28
    3834:	99 a7       	std	Y+41, r25	; 0x29
    3836:	aa a7       	std	Y+42, r26	; 0x2a
    3838:	bb a7       	std	Y+43, r27	; 0x2b
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    383a:	68 a5       	ldd	r22, Y+40	; 0x28
    383c:	79 a5       	ldd	r23, Y+41	; 0x29
    383e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3840:	9b a5       	ldd	r25, Y+43	; 0x2b
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	30 e0       	ldi	r19, 0x00	; 0
    3846:	4a ef       	ldi	r20, 0xFA	; 250
    3848:	54 e4       	ldi	r21, 0x44	; 68
    384a:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    384e:	dc 01       	movw	r26, r24
    3850:	cb 01       	movw	r24, r22
    3852:	8c a3       	std	Y+36, r24	; 0x24
    3854:	9d a3       	std	Y+37, r25	; 0x25
    3856:	ae a3       	std	Y+38, r26	; 0x26
    3858:	bf a3       	std	Y+39, r27	; 0x27
	if (__tmp < 1.0)
    385a:	6c a1       	ldd	r22, Y+36	; 0x24
    385c:	7d a1       	ldd	r23, Y+37	; 0x25
    385e:	8e a1       	ldd	r24, Y+38	; 0x26
    3860:	9f a1       	ldd	r25, Y+39	; 0x27
    3862:	20 e0       	ldi	r18, 0x00	; 0
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	40 e8       	ldi	r20, 0x80	; 128
    3868:	5f e3       	ldi	r21, 0x3F	; 63
    386a:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    386e:	88 23       	and	r24, r24
    3870:	2c f4       	brge	.+10     	; 0x387c <LCD_VoidInit+0x44a>
		__ticks = 1;
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	90 e0       	ldi	r25, 0x00	; 0
    3876:	9b a3       	std	Y+35, r25	; 0x23
    3878:	8a a3       	std	Y+34, r24	; 0x22
    387a:	3f c0       	rjmp	.+126    	; 0x38fa <LCD_VoidInit+0x4c8>
	else if (__tmp > 65535)
    387c:	6c a1       	ldd	r22, Y+36	; 0x24
    387e:	7d a1       	ldd	r23, Y+37	; 0x25
    3880:	8e a1       	ldd	r24, Y+38	; 0x26
    3882:	9f a1       	ldd	r25, Y+39	; 0x27
    3884:	20 e0       	ldi	r18, 0x00	; 0
    3886:	3f ef       	ldi	r19, 0xFF	; 255
    3888:	4f e7       	ldi	r20, 0x7F	; 127
    388a:	57 e4       	ldi	r21, 0x47	; 71
    388c:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    3890:	18 16       	cp	r1, r24
    3892:	4c f5       	brge	.+82     	; 0x38e6 <LCD_VoidInit+0x4b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3894:	68 a5       	ldd	r22, Y+40	; 0x28
    3896:	79 a5       	ldd	r23, Y+41	; 0x29
    3898:	8a a5       	ldd	r24, Y+42	; 0x2a
    389a:	9b a5       	ldd	r25, Y+43	; 0x2b
    389c:	20 e0       	ldi	r18, 0x00	; 0
    389e:	30 e0       	ldi	r19, 0x00	; 0
    38a0:	40 e2       	ldi	r20, 0x20	; 32
    38a2:	51 e4       	ldi	r21, 0x41	; 65
    38a4:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    38a8:	dc 01       	movw	r26, r24
    38aa:	cb 01       	movw	r24, r22
    38ac:	bc 01       	movw	r22, r24
    38ae:	cd 01       	movw	r24, r26
    38b0:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	9b a3       	std	Y+35, r25	; 0x23
    38ba:	8a a3       	std	Y+34, r24	; 0x22
    38bc:	0f c0       	rjmp	.+30     	; 0x38dc <LCD_VoidInit+0x4aa>
    38be:	88 ec       	ldi	r24, 0xC8	; 200
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	99 a3       	std	Y+33, r25	; 0x21
    38c4:	88 a3       	std	Y+32, r24	; 0x20
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38c6:	88 a1       	ldd	r24, Y+32	; 0x20
    38c8:	99 a1       	ldd	r25, Y+33	; 0x21
    38ca:	01 97       	sbiw	r24, 0x01	; 1
    38cc:	f1 f7       	brne	.-4      	; 0x38ca <LCD_VoidInit+0x498>
    38ce:	99 a3       	std	Y+33, r25	; 0x21
    38d0:	88 a3       	std	Y+32, r24	; 0x20
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38d2:	8a a1       	ldd	r24, Y+34	; 0x22
    38d4:	9b a1       	ldd	r25, Y+35	; 0x23
    38d6:	01 97       	sbiw	r24, 0x01	; 1
    38d8:	9b a3       	std	Y+35, r25	; 0x23
    38da:	8a a3       	std	Y+34, r24	; 0x22
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38dc:	8a a1       	ldd	r24, Y+34	; 0x22
    38de:	9b a1       	ldd	r25, Y+35	; 0x23
    38e0:	00 97       	sbiw	r24, 0x00	; 0
    38e2:	69 f7       	brne	.-38     	; 0x38be <LCD_VoidInit+0x48c>
    38e4:	24 c0       	rjmp	.+72     	; 0x392e <LCD_VoidInit+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38e6:	6c a1       	ldd	r22, Y+36	; 0x24
    38e8:	7d a1       	ldd	r23, Y+37	; 0x25
    38ea:	8e a1       	ldd	r24, Y+38	; 0x26
    38ec:	9f a1       	ldd	r25, Y+39	; 0x27
    38ee:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	9b a3       	std	Y+35, r25	; 0x23
    38f8:	8a a3       	std	Y+34, r24	; 0x22
    38fa:	8a a1       	ldd	r24, Y+34	; 0x22
    38fc:	9b a1       	ldd	r25, Y+35	; 0x23
    38fe:	9f 8f       	std	Y+31, r25	; 0x1f
    3900:	8e 8f       	std	Y+30, r24	; 0x1e
    3902:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3904:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	f1 f7       	brne	.-4      	; 0x3906 <LCD_VoidInit+0x4d4>
    390a:	9f 8f       	std	Y+31, r25	; 0x1f
    390c:	8e 8f       	std	Y+30, r24	; 0x1e
    390e:	0f c0       	rjmp	.+30     	; 0x392e <LCD_VoidInit+0x4fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3910:	6d a5       	ldd	r22, Y+45	; 0x2d
    3912:	7e a5       	ldd	r23, Y+46	; 0x2e
    3914:	8f a5       	ldd	r24, Y+47	; 0x2f
    3916:	98 a9       	ldd	r25, Y+48	; 0x30
    3918:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    391c:	dc 01       	movw	r26, r24
    391e:	cb 01       	movw	r24, r22
    3920:	8c a7       	std	Y+44, r24	; 0x2c
    3922:	8c a5       	ldd	r24, Y+44	; 0x2c
    3924:	8d 8f       	std	Y+29, r24	; 0x1d
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3926:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3928:	8a 95       	dec	r24
    392a:	f1 f7       	brne	.-4      	; 0x3928 <LCD_VoidInit+0x4f6>
    392c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_us(50);
	LCD_VoidSendCommand(LCD_DisplayClear);
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	a0 e4       	ldi	r26, 0x40	; 64
    393a:	b0 e4       	ldi	r27, 0x40	; 64
    393c:	89 8f       	std	Y+25, r24	; 0x19
    393e:	9a 8f       	std	Y+26, r25	; 0x1a
    3940:	ab 8f       	std	Y+27, r26	; 0x1b
    3942:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3944:	69 8d       	ldd	r22, Y+25	; 0x19
    3946:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3948:	8b 8d       	ldd	r24, Y+27	; 0x1b
    394a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	4a ef       	ldi	r20, 0xFA	; 250
    3952:	54 e4       	ldi	r21, 0x44	; 68
    3954:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	8d 8b       	std	Y+21, r24	; 0x15
    395e:	9e 8b       	std	Y+22, r25	; 0x16
    3960:	af 8b       	std	Y+23, r26	; 0x17
    3962:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3964:	6d 89       	ldd	r22, Y+21	; 0x15
    3966:	7e 89       	ldd	r23, Y+22	; 0x16
    3968:	8f 89       	ldd	r24, Y+23	; 0x17
    396a:	98 8d       	ldd	r25, Y+24	; 0x18
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	40 e8       	ldi	r20, 0x80	; 128
    3972:	5f e3       	ldi	r21, 0x3F	; 63
    3974:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    3978:	88 23       	and	r24, r24
    397a:	2c f4       	brge	.+10     	; 0x3986 <LCD_VoidInit+0x554>
		__ticks = 1;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	9c 8b       	std	Y+20, r25	; 0x14
    3982:	8b 8b       	std	Y+19, r24	; 0x13
    3984:	3f c0       	rjmp	.+126    	; 0x3a04 <LCD_VoidInit+0x5d2>
	else if (__tmp > 65535)
    3986:	6d 89       	ldd	r22, Y+21	; 0x15
    3988:	7e 89       	ldd	r23, Y+22	; 0x16
    398a:	8f 89       	ldd	r24, Y+23	; 0x17
    398c:	98 8d       	ldd	r25, Y+24	; 0x18
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	3f ef       	ldi	r19, 0xFF	; 255
    3992:	4f e7       	ldi	r20, 0x7F	; 127
    3994:	57 e4       	ldi	r21, 0x47	; 71
    3996:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    399a:	18 16       	cp	r1, r24
    399c:	4c f5       	brge	.+82     	; 0x39f0 <LCD_VoidInit+0x5be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399e:	69 8d       	ldd	r22, Y+25	; 0x19
    39a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e2       	ldi	r20, 0x20	; 32
    39ac:	51 e4       	ldi	r21, 0x41	; 65
    39ae:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	bc 01       	movw	r22, r24
    39b8:	cd 01       	movw	r24, r26
    39ba:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	9c 8b       	std	Y+20, r25	; 0x14
    39c4:	8b 8b       	std	Y+19, r24	; 0x13
    39c6:	0f c0       	rjmp	.+30     	; 0x39e6 <LCD_VoidInit+0x5b4>
    39c8:	88 ec       	ldi	r24, 0xC8	; 200
    39ca:	90 e0       	ldi	r25, 0x00	; 0
    39cc:	9a 8b       	std	Y+18, r25	; 0x12
    39ce:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    39d0:	89 89       	ldd	r24, Y+17	; 0x11
    39d2:	9a 89       	ldd	r25, Y+18	; 0x12
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <LCD_VoidInit+0x5a2>
    39d8:	9a 8b       	std	Y+18, r25	; 0x12
    39da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39dc:	8b 89       	ldd	r24, Y+19	; 0x13
    39de:	9c 89       	ldd	r25, Y+20	; 0x14
    39e0:	01 97       	sbiw	r24, 0x01	; 1
    39e2:	9c 8b       	std	Y+20, r25	; 0x14
    39e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e6:	8b 89       	ldd	r24, Y+19	; 0x13
    39e8:	9c 89       	ldd	r25, Y+20	; 0x14
    39ea:	00 97       	sbiw	r24, 0x00	; 0
    39ec:	69 f7       	brne	.-38     	; 0x39c8 <LCD_VoidInit+0x596>
    39ee:	14 c0       	rjmp	.+40     	; 0x3a18 <LCD_VoidInit+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f0:	6d 89       	ldd	r22, Y+21	; 0x15
    39f2:	7e 89       	ldd	r23, Y+22	; 0x16
    39f4:	8f 89       	ldd	r24, Y+23	; 0x17
    39f6:	98 8d       	ldd	r25, Y+24	; 0x18
    39f8:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	9c 8b       	std	Y+20, r25	; 0x14
    3a02:	8b 8b       	std	Y+19, r24	; 0x13
    3a04:	8b 89       	ldd	r24, Y+19	; 0x13
    3a06:	9c 89       	ldd	r25, Y+20	; 0x14
    3a08:	98 8b       	std	Y+16, r25	; 0x10
    3a0a:	8f 87       	std	Y+15, r24	; 0x0f
    3a0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a0e:	98 89       	ldd	r25, Y+16	; 0x10
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	f1 f7       	brne	.-4      	; 0x3a10 <LCD_VoidInit+0x5de>
    3a14:	98 8b       	std	Y+16, r25	; 0x10
    3a16:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);
	LCD_VoidSendCommand(LCD_EntryInc_MODE);
    3a18:	86 e0       	ldi	r24, 0x06	; 6
    3a1a:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
    3a1e:	80 e0       	ldi	r24, 0x00	; 0
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	a8 e4       	ldi	r26, 0x48	; 72
    3a24:	b2 e4       	ldi	r27, 0x42	; 66
    3a26:	8b 87       	std	Y+11, r24	; 0x0b
    3a28:	9c 87       	std	Y+12, r25	; 0x0c
    3a2a:	ad 87       	std	Y+13, r26	; 0x0d
    3a2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a30:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a32:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a34:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	4a ef       	ldi	r20, 0xFA	; 250
    3a3c:	54 e4       	ldi	r21, 0x44	; 68
    3a3e:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	8f 83       	std	Y+7, r24	; 0x07
    3a48:	98 87       	std	Y+8, r25	; 0x08
    3a4a:	a9 87       	std	Y+9, r26	; 0x09
    3a4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    3a50:	78 85       	ldd	r23, Y+8	; 0x08
    3a52:	89 85       	ldd	r24, Y+9	; 0x09
    3a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	40 e8       	ldi	r20, 0x80	; 128
    3a5c:	5f e3       	ldi	r21, 0x3F	; 63
    3a5e:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    3a62:	88 23       	and	r24, r24
    3a64:	2c f4       	brge	.+10     	; 0x3a70 <LCD_VoidInit+0x63e>
		__ticks = 1;
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	9e 83       	std	Y+6, r25	; 0x06
    3a6c:	8d 83       	std	Y+5, r24	; 0x05
    3a6e:	3f c0       	rjmp	.+126    	; 0x3aee <LCD_VoidInit+0x6bc>
	else if (__tmp > 65535)
    3a70:	6f 81       	ldd	r22, Y+7	; 0x07
    3a72:	78 85       	ldd	r23, Y+8	; 0x08
    3a74:	89 85       	ldd	r24, Y+9	; 0x09
    3a76:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a78:	20 e0       	ldi	r18, 0x00	; 0
    3a7a:	3f ef       	ldi	r19, 0xFF	; 255
    3a7c:	4f e7       	ldi	r20, 0x7F	; 127
    3a7e:	57 e4       	ldi	r21, 0x47	; 71
    3a80:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    3a84:	18 16       	cp	r1, r24
    3a86:	4c f5       	brge	.+82     	; 0x3ada <LCD_VoidInit+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a88:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a90:	20 e0       	ldi	r18, 0x00	; 0
    3a92:	30 e0       	ldi	r19, 0x00	; 0
    3a94:	40 e2       	ldi	r20, 0x20	; 32
    3a96:	51 e4       	ldi	r21, 0x41	; 65
    3a98:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3a9c:	dc 01       	movw	r26, r24
    3a9e:	cb 01       	movw	r24, r22
    3aa0:	bc 01       	movw	r22, r24
    3aa2:	cd 01       	movw	r24, r26
    3aa4:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	9e 83       	std	Y+6, r25	; 0x06
    3aae:	8d 83       	std	Y+5, r24	; 0x05
    3ab0:	0f c0       	rjmp	.+30     	; 0x3ad0 <LCD_VoidInit+0x69e>
    3ab2:	88 ec       	ldi	r24, 0xC8	; 200
    3ab4:	90 e0       	ldi	r25, 0x00	; 0
    3ab6:	9c 83       	std	Y+4, r25	; 0x04
    3ab8:	8b 83       	std	Y+3, r24	; 0x03
    3aba:	8b 81       	ldd	r24, Y+3	; 0x03
    3abc:	9c 81       	ldd	r25, Y+4	; 0x04
    3abe:	01 97       	sbiw	r24, 0x01	; 1
    3ac0:	f1 f7       	brne	.-4      	; 0x3abe <LCD_VoidInit+0x68c>
    3ac2:	9c 83       	std	Y+4, r25	; 0x04
    3ac4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac8:	9e 81       	ldd	r25, Y+6	; 0x06
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	9e 83       	std	Y+6, r25	; 0x06
    3ace:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ad2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad4:	00 97       	sbiw	r24, 0x00	; 0
    3ad6:	69 f7       	brne	.-38     	; 0x3ab2 <LCD_VoidInit+0x680>
    3ad8:	14 c0       	rjmp	.+40     	; 0x3b02 <LCD_VoidInit+0x6d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ada:	6f 81       	ldd	r22, Y+7	; 0x07
    3adc:	78 85       	ldd	r23, Y+8	; 0x08
    3ade:	89 85       	ldd	r24, Y+9	; 0x09
    3ae0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ae2:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3ae6:	dc 01       	movw	r26, r24
    3ae8:	cb 01       	movw	r24, r22
    3aea:	9e 83       	std	Y+6, r25	; 0x06
    3aec:	8d 83       	std	Y+5, r24	; 0x05
    3aee:	8d 81       	ldd	r24, Y+5	; 0x05
    3af0:	9e 81       	ldd	r25, Y+6	; 0x06
    3af2:	9a 83       	std	Y+2, r25	; 0x02
    3af4:	89 83       	std	Y+1, r24	; 0x01
    3af6:	89 81       	ldd	r24, Y+1	; 0x01
    3af8:	9a 81       	ldd	r25, Y+2	; 0x02
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <LCD_VoidInit+0x6c8>
    3afe:	9a 83       	std	Y+2, r25	; 0x02
    3b00:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(LCD_DisplayClear); //Display clear
	_delay_ms(8);
	LCD_VoidSendCommand(LCD_EntryMode);//EntryMode Set
	_delay_ms(50);
#endif
}
    3b02:	c6 5a       	subi	r28, 0xA6	; 166
    3b04:	df 4f       	sbci	r29, 0xFF	; 255
    3b06:	0f b6       	in	r0, 0x3f	; 63
    3b08:	f8 94       	cli
    3b0a:	de bf       	out	0x3e, r29	; 62
    3b0c:	0f be       	out	0x3f, r0	; 63
    3b0e:	cd bf       	out	0x3d, r28	; 61
    3b10:	cf 91       	pop	r28
    3b12:	df 91       	pop	r29
    3b14:	1f 91       	pop	r17
    3b16:	0f 91       	pop	r16
    3b18:	08 95       	ret

00003b1a <LCD_VoidSendCommand>:

void LCD_VoidSendCommand(u8 u8Copy_LCD_Command){
    3b1a:	df 93       	push	r29
    3b1c:	cf 93       	push	r28
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	6d 97       	sbiw	r28, 0x1d	; 29
    3b24:	0f b6       	in	r0, 0x3f	; 63
    3b26:	f8 94       	cli
    3b28:	de bf       	out	0x3e, r29	; 62
    3b2a:	0f be       	out	0x3f, r0	; 63
    3b2c:	cd bf       	out	0x3d, r28	; 61
    3b2e:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_RS_PIN,DIO_U8_PIN_LOW); //Setting RS to zero Instruction Register
    3b30:	84 e0       	ldi	r24, 0x04	; 4
    3b32:	67 e0       	ldi	r22, 0x07	; 7
    3b34:	40 e0       	ldi	r20, 0x00	; 0
    3b36:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_s8SetPinValue>
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_RW_PIN,DIO_U8_PIN_LOW); //Setting RW to zero
    3b3a:	84 e0       	ldi	r24, 0x04	; 4
    3b3c:	66 e0       	ldi	r22, 0x06	; 6
    3b3e:	40 e0       	ldi	r20, 0x00	; 0
    3b40:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_s8SetPinValue>
	/*Send the command to Instruction register (IR)
	 * After data is sent to IR,Data is Read from Ram
	 *  then transfered automatically to Data Register
	 *  (Reading from Data Register completes the instruction write operation
	 */
	DIO_u8SetPortValue(LCD_DATA_Port, u8Copy_LCD_Command);
    3b44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b46:	28 2f       	mov	r18, r24
    3b48:	30 e0       	ldi	r19, 0x00	; 0
    3b4a:	40 e0       	ldi	r20, 0x00	; 0
    3b4c:	50 e0       	ldi	r21, 0x00	; 0
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	ba 01       	movw	r22, r20
    3b52:	a9 01       	movw	r20, r18
    3b54:	0e 94 bf 18 	call	0x317e	; 0x317e <DIO_u8SetPortValue>

	/* In order to read, Set enable to high then to low
	 * , read happens during the falling edge of enable signal
	 */
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_EN_PIN,DIO_U8_PIN_HIGH);
    3b58:	84 e0       	ldi	r24, 0x04	; 4
    3b5a:	65 e0       	ldi	r22, 0x05	; 5
    3b5c:	41 e0       	ldi	r20, 0x01	; 1
    3b5e:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_s8SetPinValue>
    3b62:	80 e0       	ldi	r24, 0x00	; 0
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	a0 e0       	ldi	r26, 0x00	; 0
    3b68:	b0 e4       	ldi	r27, 0x40	; 64
    3b6a:	89 8f       	std	Y+25, r24	; 0x19
    3b6c:	9a 8f       	std	Y+26, r25	; 0x1a
    3b6e:	ab 8f       	std	Y+27, r26	; 0x1b
    3b70:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b72:	69 8d       	ldd	r22, Y+25	; 0x19
    3b74:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b7a:	20 e0       	ldi	r18, 0x00	; 0
    3b7c:	30 e0       	ldi	r19, 0x00	; 0
    3b7e:	4a ef       	ldi	r20, 0xFA	; 250
    3b80:	54 e4       	ldi	r21, 0x44	; 68
    3b82:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3b86:	dc 01       	movw	r26, r24
    3b88:	cb 01       	movw	r24, r22
    3b8a:	8d 8b       	std	Y+21, r24	; 0x15
    3b8c:	9e 8b       	std	Y+22, r25	; 0x16
    3b8e:	af 8b       	std	Y+23, r26	; 0x17
    3b90:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b92:	6d 89       	ldd	r22, Y+21	; 0x15
    3b94:	7e 89       	ldd	r23, Y+22	; 0x16
    3b96:	8f 89       	ldd	r24, Y+23	; 0x17
    3b98:	98 8d       	ldd	r25, Y+24	; 0x18
    3b9a:	20 e0       	ldi	r18, 0x00	; 0
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	40 e8       	ldi	r20, 0x80	; 128
    3ba0:	5f e3       	ldi	r21, 0x3F	; 63
    3ba2:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    3ba6:	88 23       	and	r24, r24
    3ba8:	2c f4       	brge	.+10     	; 0x3bb4 <LCD_VoidSendCommand+0x9a>
		__ticks = 1;
    3baa:	81 e0       	ldi	r24, 0x01	; 1
    3bac:	90 e0       	ldi	r25, 0x00	; 0
    3bae:	9c 8b       	std	Y+20, r25	; 0x14
    3bb0:	8b 8b       	std	Y+19, r24	; 0x13
    3bb2:	3f c0       	rjmp	.+126    	; 0x3c32 <LCD_VoidSendCommand+0x118>
	else if (__tmp > 65535)
    3bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    3bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bba:	98 8d       	ldd	r25, Y+24	; 0x18
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	3f ef       	ldi	r19, 0xFF	; 255
    3bc0:	4f e7       	ldi	r20, 0x7F	; 127
    3bc2:	57 e4       	ldi	r21, 0x47	; 71
    3bc4:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    3bc8:	18 16       	cp	r1, r24
    3bca:	4c f5       	brge	.+82     	; 0x3c1e <LCD_VoidSendCommand+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bcc:	69 8d       	ldd	r22, Y+25	; 0x19
    3bce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bd0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bd2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bd4:	20 e0       	ldi	r18, 0x00	; 0
    3bd6:	30 e0       	ldi	r19, 0x00	; 0
    3bd8:	40 e2       	ldi	r20, 0x20	; 32
    3bda:	51 e4       	ldi	r21, 0x41	; 65
    3bdc:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	bc 01       	movw	r22, r24
    3be6:	cd 01       	movw	r24, r26
    3be8:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3bec:	dc 01       	movw	r26, r24
    3bee:	cb 01       	movw	r24, r22
    3bf0:	9c 8b       	std	Y+20, r25	; 0x14
    3bf2:	8b 8b       	std	Y+19, r24	; 0x13
    3bf4:	0f c0       	rjmp	.+30     	; 0x3c14 <LCD_VoidSendCommand+0xfa>
    3bf6:	88 ec       	ldi	r24, 0xC8	; 200
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	9a 8b       	std	Y+18, r25	; 0x12
    3bfc:	89 8b       	std	Y+17, r24	; 0x11
    3bfe:	89 89       	ldd	r24, Y+17	; 0x11
    3c00:	9a 89       	ldd	r25, Y+18	; 0x12
    3c02:	01 97       	sbiw	r24, 0x01	; 1
    3c04:	f1 f7       	brne	.-4      	; 0x3c02 <LCD_VoidSendCommand+0xe8>
    3c06:	9a 8b       	std	Y+18, r25	; 0x12
    3c08:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c0e:	01 97       	sbiw	r24, 0x01	; 1
    3c10:	9c 8b       	std	Y+20, r25	; 0x14
    3c12:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c14:	8b 89       	ldd	r24, Y+19	; 0x13
    3c16:	9c 89       	ldd	r25, Y+20	; 0x14
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	69 f7       	brne	.-38     	; 0x3bf6 <LCD_VoidSendCommand+0xdc>
    3c1c:	14 c0       	rjmp	.+40     	; 0x3c46 <LCD_VoidSendCommand+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c1e:	6d 89       	ldd	r22, Y+21	; 0x15
    3c20:	7e 89       	ldd	r23, Y+22	; 0x16
    3c22:	8f 89       	ldd	r24, Y+23	; 0x17
    3c24:	98 8d       	ldd	r25, Y+24	; 0x18
    3c26:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3c2a:	dc 01       	movw	r26, r24
    3c2c:	cb 01       	movw	r24, r22
    3c2e:	9c 8b       	std	Y+20, r25	; 0x14
    3c30:	8b 8b       	std	Y+19, r24	; 0x13
    3c32:	8b 89       	ldd	r24, Y+19	; 0x13
    3c34:	9c 89       	ldd	r25, Y+20	; 0x14
    3c36:	98 8b       	std	Y+16, r25	; 0x10
    3c38:	8f 87       	std	Y+15, r24	; 0x0f
    3c3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c3c:	98 89       	ldd	r25, Y+16	; 0x10
    3c3e:	01 97       	sbiw	r24, 0x01	; 1
    3c40:	f1 f7       	brne	.-4      	; 0x3c3e <LCD_VoidSendCommand+0x124>
    3c42:	98 8b       	std	Y+16, r25	; 0x10
    3c44:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_EN_PIN,DIO_U8_PIN_LOW);
    3c46:	84 e0       	ldi	r24, 0x04	; 4
    3c48:	65 e0       	ldi	r22, 0x05	; 5
    3c4a:	40 e0       	ldi	r20, 0x00	; 0
    3c4c:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_s8SetPinValue>
    3c50:	80 e0       	ldi	r24, 0x00	; 0
    3c52:	90 e0       	ldi	r25, 0x00	; 0
    3c54:	a0 e0       	ldi	r26, 0x00	; 0
    3c56:	b0 e4       	ldi	r27, 0x40	; 64
    3c58:	8b 87       	std	Y+11, r24	; 0x0b
    3c5a:	9c 87       	std	Y+12, r25	; 0x0c
    3c5c:	ad 87       	std	Y+13, r26	; 0x0d
    3c5e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c60:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c62:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c64:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c66:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c68:	20 e0       	ldi	r18, 0x00	; 0
    3c6a:	30 e0       	ldi	r19, 0x00	; 0
    3c6c:	4a ef       	ldi	r20, 0xFA	; 250
    3c6e:	54 e4       	ldi	r21, 0x44	; 68
    3c70:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3c74:	dc 01       	movw	r26, r24
    3c76:	cb 01       	movw	r24, r22
    3c78:	8f 83       	std	Y+7, r24	; 0x07
    3c7a:	98 87       	std	Y+8, r25	; 0x08
    3c7c:	a9 87       	std	Y+9, r26	; 0x09
    3c7e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c80:	6f 81       	ldd	r22, Y+7	; 0x07
    3c82:	78 85       	ldd	r23, Y+8	; 0x08
    3c84:	89 85       	ldd	r24, Y+9	; 0x09
    3c86:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c88:	20 e0       	ldi	r18, 0x00	; 0
    3c8a:	30 e0       	ldi	r19, 0x00	; 0
    3c8c:	40 e8       	ldi	r20, 0x80	; 128
    3c8e:	5f e3       	ldi	r21, 0x3F	; 63
    3c90:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    3c94:	88 23       	and	r24, r24
    3c96:	2c f4       	brge	.+10     	; 0x3ca2 <LCD_VoidSendCommand+0x188>
		__ticks = 1;
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	9e 83       	std	Y+6, r25	; 0x06
    3c9e:	8d 83       	std	Y+5, r24	; 0x05
    3ca0:	3f c0       	rjmp	.+126    	; 0x3d20 <LCD_VoidSendCommand+0x206>
	else if (__tmp > 65535)
    3ca2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca4:	78 85       	ldd	r23, Y+8	; 0x08
    3ca6:	89 85       	ldd	r24, Y+9	; 0x09
    3ca8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3caa:	20 e0       	ldi	r18, 0x00	; 0
    3cac:	3f ef       	ldi	r19, 0xFF	; 255
    3cae:	4f e7       	ldi	r20, 0x7F	; 127
    3cb0:	57 e4       	ldi	r21, 0x47	; 71
    3cb2:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    3cb6:	18 16       	cp	r1, r24
    3cb8:	4c f5       	brge	.+82     	; 0x3d0c <LCD_VoidSendCommand+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cba:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cbc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cbe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cc0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cc2:	20 e0       	ldi	r18, 0x00	; 0
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	40 e2       	ldi	r20, 0x20	; 32
    3cc8:	51 e4       	ldi	r21, 0x41	; 65
    3cca:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	bc 01       	movw	r22, r24
    3cd4:	cd 01       	movw	r24, r26
    3cd6:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3cda:	dc 01       	movw	r26, r24
    3cdc:	cb 01       	movw	r24, r22
    3cde:	9e 83       	std	Y+6, r25	; 0x06
    3ce0:	8d 83       	std	Y+5, r24	; 0x05
    3ce2:	0f c0       	rjmp	.+30     	; 0x3d02 <LCD_VoidSendCommand+0x1e8>
    3ce4:	88 ec       	ldi	r24, 0xC8	; 200
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	9c 83       	std	Y+4, r25	; 0x04
    3cea:	8b 83       	std	Y+3, r24	; 0x03
    3cec:	8b 81       	ldd	r24, Y+3	; 0x03
    3cee:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf0:	01 97       	sbiw	r24, 0x01	; 1
    3cf2:	f1 f7       	brne	.-4      	; 0x3cf0 <LCD_VoidSendCommand+0x1d6>
    3cf4:	9c 83       	std	Y+4, r25	; 0x04
    3cf6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfc:	01 97       	sbiw	r24, 0x01	; 1
    3cfe:	9e 83       	std	Y+6, r25	; 0x06
    3d00:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d02:	8d 81       	ldd	r24, Y+5	; 0x05
    3d04:	9e 81       	ldd	r25, Y+6	; 0x06
    3d06:	00 97       	sbiw	r24, 0x00	; 0
    3d08:	69 f7       	brne	.-38     	; 0x3ce4 <LCD_VoidSendCommand+0x1ca>
    3d0a:	14 c0       	rjmp	.+40     	; 0x3d34 <LCD_VoidSendCommand+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d0c:	6f 81       	ldd	r22, Y+7	; 0x07
    3d0e:	78 85       	ldd	r23, Y+8	; 0x08
    3d10:	89 85       	ldd	r24, Y+9	; 0x09
    3d12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d14:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3d18:	dc 01       	movw	r26, r24
    3d1a:	cb 01       	movw	r24, r22
    3d1c:	9e 83       	std	Y+6, r25	; 0x06
    3d1e:	8d 83       	std	Y+5, r24	; 0x05
    3d20:	8d 81       	ldd	r24, Y+5	; 0x05
    3d22:	9e 81       	ldd	r25, Y+6	; 0x06
    3d24:	9a 83       	std	Y+2, r25	; 0x02
    3d26:	89 83       	std	Y+1, r24	; 0x01
    3d28:	89 81       	ldd	r24, Y+1	; 0x01
    3d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d2c:	01 97       	sbiw	r24, 0x01	; 1
    3d2e:	f1 f7       	brne	.-4      	; 0x3d2c <LCD_VoidSendCommand+0x212>
    3d30:	9a 83       	std	Y+2, r25	; 0x02
    3d32:	89 83       	std	Y+1, r24	; 0x01
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_EN_PIN,DIO_U8_PIN_HIGH);
	_delay_ms(2);
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_EN_PIN,DIO_U8_PIN_LOW);
	_delay_ms(2);
#endif
}
    3d34:	6d 96       	adiw	r28, 0x1d	; 29
    3d36:	0f b6       	in	r0, 0x3f	; 63
    3d38:	f8 94       	cli
    3d3a:	de bf       	out	0x3e, r29	; 62
    3d3c:	0f be       	out	0x3f, r0	; 63
    3d3e:	cd bf       	out	0x3d, r28	; 61
    3d40:	cf 91       	pop	r28
    3d42:	df 91       	pop	r29
    3d44:	08 95       	ret

00003d46 <LCD_VoidSendCharactar>:

void LCD_VoidSendCharactar(u8 u8Copy_LCD_Character){
    3d46:	df 93       	push	r29
    3d48:	cf 93       	push	r28
    3d4a:	cd b7       	in	r28, 0x3d	; 61
    3d4c:	de b7       	in	r29, 0x3e	; 62
    3d4e:	2f 97       	sbiw	r28, 0x0f	; 15
    3d50:	0f b6       	in	r0, 0x3f	; 63
    3d52:	f8 94       	cli
    3d54:	de bf       	out	0x3e, r29	; 62
    3d56:	0f be       	out	0x3f, r0	; 63
    3d58:	cd bf       	out	0x3d, r28	; 61
    3d5a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_RS_PIN,DIO_U8_PIN_HIGH); //Setting RS to ONE Data Register
    3d5c:	84 e0       	ldi	r24, 0x04	; 4
    3d5e:	67 e0       	ldi	r22, 0x07	; 7
    3d60:	41 e0       	ldi	r20, 0x01	; 1
    3d62:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_s8SetPinValue>
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_RW_PIN,DIO_U8_PIN_LOW); //Setting RW to zero (Write)
    3d66:	84 e0       	ldi	r24, 0x04	; 4
    3d68:	66 e0       	ldi	r22, 0x06	; 6
    3d6a:	40 e0       	ldi	r20, 0x00	; 0
    3d6c:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_s8SetPinValue>

#if LCD_MODE==LCD_8_BIT_MODE

	DIO_u8SetPortValue(LCD_DATA_Port, u8Copy_LCD_Character);		//Sending the Character
    3d70:	8f 85       	ldd	r24, Y+15	; 0x0f
    3d72:	28 2f       	mov	r18, r24
    3d74:	30 e0       	ldi	r19, 0x00	; 0
    3d76:	40 e0       	ldi	r20, 0x00	; 0
    3d78:	50 e0       	ldi	r21, 0x00	; 0
    3d7a:	81 e0       	ldi	r24, 0x01	; 1
    3d7c:	ba 01       	movw	r22, r20
    3d7e:	a9 01       	movw	r20, r18
    3d80:	0e 94 bf 18 	call	0x317e	; 0x317e <DIO_u8SetPortValue>
	/* In order to read from Data Register, Set enable to high then to low
	 * , read happens during the falling edge of enable signal
	 */
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_EN_PIN,DIO_U8_PIN_HIGH);
    3d84:	84 e0       	ldi	r24, 0x04	; 4
    3d86:	65 e0       	ldi	r22, 0x05	; 5
    3d88:	41 e0       	ldi	r20, 0x01	; 1
    3d8a:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_s8SetPinValue>
    3d8e:	80 e0       	ldi	r24, 0x00	; 0
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	a0 e8       	ldi	r26, 0x80	; 128
    3d94:	bf e3       	ldi	r27, 0x3F	; 63
    3d96:	8b 87       	std	Y+11, r24	; 0x0b
    3d98:	9c 87       	std	Y+12, r25	; 0x0c
    3d9a:	ad 87       	std	Y+13, r26	; 0x0d
    3d9c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d9e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3da0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da6:	20 e0       	ldi	r18, 0x00	; 0
    3da8:	30 e0       	ldi	r19, 0x00	; 0
    3daa:	4a ef       	ldi	r20, 0xFA	; 250
    3dac:	54 e4       	ldi	r21, 0x44	; 68
    3dae:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3db2:	dc 01       	movw	r26, r24
    3db4:	cb 01       	movw	r24, r22
    3db6:	8f 83       	std	Y+7, r24	; 0x07
    3db8:	98 87       	std	Y+8, r25	; 0x08
    3dba:	a9 87       	std	Y+9, r26	; 0x09
    3dbc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3dbe:	6f 81       	ldd	r22, Y+7	; 0x07
    3dc0:	78 85       	ldd	r23, Y+8	; 0x08
    3dc2:	89 85       	ldd	r24, Y+9	; 0x09
    3dc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3dc6:	20 e0       	ldi	r18, 0x00	; 0
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	40 e8       	ldi	r20, 0x80	; 128
    3dcc:	5f e3       	ldi	r21, 0x3F	; 63
    3dce:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    3dd2:	88 23       	and	r24, r24
    3dd4:	2c f4       	brge	.+10     	; 0x3de0 <LCD_VoidSendCharactar+0x9a>
		__ticks = 1;
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	9e 83       	std	Y+6, r25	; 0x06
    3ddc:	8d 83       	std	Y+5, r24	; 0x05
    3dde:	3f c0       	rjmp	.+126    	; 0x3e5e <LCD_VoidSendCharactar+0x118>
	else if (__tmp > 65535)
    3de0:	6f 81       	ldd	r22, Y+7	; 0x07
    3de2:	78 85       	ldd	r23, Y+8	; 0x08
    3de4:	89 85       	ldd	r24, Y+9	; 0x09
    3de6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	3f ef       	ldi	r19, 0xFF	; 255
    3dec:	4f e7       	ldi	r20, 0x7F	; 127
    3dee:	57 e4       	ldi	r21, 0x47	; 71
    3df0:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    3df4:	18 16       	cp	r1, r24
    3df6:	4c f5       	brge	.+82     	; 0x3e4a <LCD_VoidSendCharactar+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3df8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dfa:	7c 85       	ldd	r23, Y+12	; 0x0c
    3dfc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3dfe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e00:	20 e0       	ldi	r18, 0x00	; 0
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	40 e2       	ldi	r20, 0x20	; 32
    3e06:	51 e4       	ldi	r21, 0x41	; 65
    3e08:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	cb 01       	movw	r24, r22
    3e10:	bc 01       	movw	r22, r24
    3e12:	cd 01       	movw	r24, r26
    3e14:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3e18:	dc 01       	movw	r26, r24
    3e1a:	cb 01       	movw	r24, r22
    3e1c:	9e 83       	std	Y+6, r25	; 0x06
    3e1e:	8d 83       	std	Y+5, r24	; 0x05
    3e20:	0f c0       	rjmp	.+30     	; 0x3e40 <LCD_VoidSendCharactar+0xfa>
    3e22:	88 ec       	ldi	r24, 0xC8	; 200
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	9c 83       	std	Y+4, r25	; 0x04
    3e28:	8b 83       	std	Y+3, r24	; 0x03
    3e2a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e2c:	9c 81       	ldd	r25, Y+4	; 0x04
    3e2e:	01 97       	sbiw	r24, 0x01	; 1
    3e30:	f1 f7       	brne	.-4      	; 0x3e2e <LCD_VoidSendCharactar+0xe8>
    3e32:	9c 83       	std	Y+4, r25	; 0x04
    3e34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e36:	8d 81       	ldd	r24, Y+5	; 0x05
    3e38:	9e 81       	ldd	r25, Y+6	; 0x06
    3e3a:	01 97       	sbiw	r24, 0x01	; 1
    3e3c:	9e 83       	std	Y+6, r25	; 0x06
    3e3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e40:	8d 81       	ldd	r24, Y+5	; 0x05
    3e42:	9e 81       	ldd	r25, Y+6	; 0x06
    3e44:	00 97       	sbiw	r24, 0x00	; 0
    3e46:	69 f7       	brne	.-38     	; 0x3e22 <LCD_VoidSendCharactar+0xdc>
    3e48:	14 c0       	rjmp	.+40     	; 0x3e72 <LCD_VoidSendCharactar+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3e4c:	78 85       	ldd	r23, Y+8	; 0x08
    3e4e:	89 85       	ldd	r24, Y+9	; 0x09
    3e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e52:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3e56:	dc 01       	movw	r26, r24
    3e58:	cb 01       	movw	r24, r22
    3e5a:	9e 83       	std	Y+6, r25	; 0x06
    3e5c:	8d 83       	std	Y+5, r24	; 0x05
    3e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e60:	9e 81       	ldd	r25, Y+6	; 0x06
    3e62:	9a 83       	std	Y+2, r25	; 0x02
    3e64:	89 83       	std	Y+1, r24	; 0x01
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	f1 f7       	brne	.-4      	; 0x3e6a <LCD_VoidSendCharactar+0x124>
    3e6e:	9a 83       	std	Y+2, r25	; 0x02
    3e70:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_EN_PIN,DIO_U8_PIN_LOW);
    3e72:	84 e0       	ldi	r24, 0x04	; 4
    3e74:	65 e0       	ldi	r22, 0x05	; 5
    3e76:	40 e0       	ldi	r20, 0x00	; 0
    3e78:	0e 94 09 17 	call	0x2e12	; 0x2e12 <DIO_s8SetPinValue>
	/* Enable Pulse */
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_EN_PIN,DIO_U8_PIN_HIGH);
	_delay_ms(1);
	DIO_s8SetPinValue(LCD_CTRL_Port,LCD_U8_EN_PIN,DIO_U8_PIN_LOW);
#endif
}
    3e7c:	2f 96       	adiw	r28, 0x0f	; 15
    3e7e:	0f b6       	in	r0, 0x3f	; 63
    3e80:	f8 94       	cli
    3e82:	de bf       	out	0x3e, r29	; 62
    3e84:	0f be       	out	0x3f, r0	; 63
    3e86:	cd bf       	out	0x3d, r28	; 61
    3e88:	cf 91       	pop	r28
    3e8a:	df 91       	pop	r29
    3e8c:	08 95       	ret

00003e8e <LCD_VoidSendString>:

void LCD_VoidSendString(pstring u8Copy_LCD_String){
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	00 d0       	rcall	.+0      	; 0x3e94 <LCD_VoidSendString+0x6>
    3e94:	0f 92       	push	r0
    3e96:	cd b7       	in	r28, 0x3d	; 61
    3e98:	de b7       	in	r29, 0x3e	; 62
    3e9a:	9b 83       	std	Y+3, r25	; 0x03
    3e9c:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8_Counter=0;
    3e9e:	19 82       	std	Y+1, r1	; 0x01
    3ea0:	0e c0       	rjmp	.+28     	; 0x3ebe <LCD_VoidSendString+0x30>
	while(*(u8Copy_LCD_String+local_u8_Counter)!='\0'){
		LCD_VoidSendCharactar(*(u8Copy_LCD_String+local_u8_Counter));
    3ea2:	89 81       	ldd	r24, Y+1	; 0x01
    3ea4:	28 2f       	mov	r18, r24
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    3eac:	fc 01       	movw	r30, r24
    3eae:	e2 0f       	add	r30, r18
    3eb0:	f3 1f       	adc	r31, r19
    3eb2:	80 81       	ld	r24, Z
    3eb4:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <LCD_VoidSendCharactar>
		local_u8_Counter++;
    3eb8:	89 81       	ldd	r24, Y+1	; 0x01
    3eba:	8f 5f       	subi	r24, 0xFF	; 255
    3ebc:	89 83       	std	Y+1, r24	; 0x01
#endif
}

void LCD_VoidSendString(pstring u8Copy_LCD_String){
	u8 local_u8_Counter=0;
	while(*(u8Copy_LCD_String+local_u8_Counter)!='\0'){
    3ebe:	89 81       	ldd	r24, Y+1	; 0x01
    3ec0:	28 2f       	mov	r18, r24
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    3ec8:	fc 01       	movw	r30, r24
    3eca:	e2 0f       	add	r30, r18
    3ecc:	f3 1f       	adc	r31, r19
    3ece:	80 81       	ld	r24, Z
    3ed0:	88 23       	and	r24, r24
    3ed2:	39 f7       	brne	.-50     	; 0x3ea2 <LCD_VoidSendString+0x14>
		LCD_VoidSendCharactar(*(u8Copy_LCD_String+local_u8_Counter));
		local_u8_Counter++;
	}

}
    3ed4:	0f 90       	pop	r0
    3ed6:	0f 90       	pop	r0
    3ed8:	0f 90       	pop	r0
    3eda:	cf 91       	pop	r28
    3edc:	df 91       	pop	r29
    3ede:	08 95       	ret

00003ee0 <LCD_VoidSetCursorPos>:


void LCD_VoidSetCursorPos(u8 u8Copy_LCD_ROW,s8 u8Copy_LCD_COL){
    3ee0:	df 93       	push	r29
    3ee2:	cf 93       	push	r28
    3ee4:	00 d0       	rcall	.+0      	; 0x3ee6 <LCD_VoidSetCursorPos+0x6>
    3ee6:	0f 92       	push	r0
    3ee8:	cd b7       	in	r28, 0x3d	; 61
    3eea:	de b7       	in	r29, 0x3e	; 62
    3eec:	8a 83       	std	Y+2, r24	; 0x02
    3eee:	6b 83       	std	Y+3, r22	; 0x03
//	s8 s8Local_Erorr_State=0;
	u8 u8Local_DDRAM_address=0;
    3ef0:	19 82       	std	Y+1, r1	; 0x01

	if(((u8Copy_LCD_ROW == 1) || (u8Copy_LCD_ROW == 2)) && ((u8Copy_LCD_COL > 0) && (u8Copy_LCD_COL < 16)))
    3ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    3ef4:	81 30       	cpi	r24, 0x01	; 1
    3ef6:	19 f0       	breq	.+6      	; 0x3efe <LCD_VoidSetCursorPos+0x1e>
    3ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    3efa:	82 30       	cpi	r24, 0x02	; 2
    3efc:	99 f4       	brne	.+38     	; 0x3f24 <LCD_VoidSetCursorPos+0x44>
    3efe:	8b 81       	ldd	r24, Y+3	; 0x03
    3f00:	18 16       	cp	r1, r24
    3f02:	84 f4       	brge	.+32     	; 0x3f24 <LCD_VoidSetCursorPos+0x44>
    3f04:	8b 81       	ldd	r24, Y+3	; 0x03
    3f06:	80 31       	cpi	r24, 0x10	; 16
    3f08:	6c f4       	brge	.+26     	; 0x3f24 <LCD_VoidSetCursorPos+0x44>
	{
		if(u8Copy_LCD_ROW==1){//First Row, Start at 00H
    3f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0c:	81 30       	cpi	r24, 0x01	; 1
    3f0e:	21 f4       	brne	.+8      	; 0x3f18 <LCD_VoidSetCursorPos+0x38>
			u8Local_DDRAM_address=u8Copy_LCD_COL-1;
    3f10:	8b 81       	ldd	r24, Y+3	; 0x03
    3f12:	81 50       	subi	r24, 0x01	; 1
    3f14:	89 83       	std	Y+1, r24	; 0x01
    3f16:	06 c0       	rjmp	.+12     	; 0x3f24 <LCD_VoidSetCursorPos+0x44>
		}
		else if (u8Copy_LCD_ROW==2){//Second Row, Start at 40H
    3f18:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1a:	82 30       	cpi	r24, 0x02	; 2
    3f1c:	19 f4       	brne	.+6      	; 0x3f24 <LCD_VoidSetCursorPos+0x44>
			u8Local_DDRAM_address=(u8Copy_LCD_COL-1)+0x40;
    3f1e:	8b 81       	ldd	r24, Y+3	; 0x03
    3f20:	81 5c       	subi	r24, 0xC1	; 193
    3f22:	89 83       	std	Y+1, r24	; 0x01
	}
//	u8Local_DDRAM_address=u8Copy_LCD_ROW*0x40 + u8Copy_LCD_COL;
	else{
//		s8Local_Erorr_State=-1;
	}
	SetBit(u8Local_DDRAM_address,7);
    3f24:	89 81       	ldd	r24, Y+1	; 0x01
    3f26:	80 68       	ori	r24, 0x80	; 128
    3f28:	89 83       	std	Y+1, r24	; 0x01
	LCD_VoidSendCommand(u8Local_DDRAM_address);         //Sending command to set DDRAM address TO LCD POS
    3f2a:	89 81       	ldd	r24, Y+1	; 0x01
    3f2c:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
//	return s8Local_Erorr_State;
}
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	0f 90       	pop	r0
    3f36:	cf 91       	pop	r28
    3f38:	df 91       	pop	r29
    3f3a:	08 95       	ret

00003f3c <LCD_VoidSendNumber>:



void LCD_VoidSendNumber(u32 u8Copy_LCD_Number){
    3f3c:	ef 92       	push	r14
    3f3e:	ff 92       	push	r15
    3f40:	0f 93       	push	r16
    3f42:	1f 93       	push	r17
    3f44:	df 93       	push	r29
    3f46:	cf 93       	push	r28
    3f48:	cd b7       	in	r28, 0x3d	; 61
    3f4a:	de b7       	in	r29, 0x3e	; 62
    3f4c:	29 97       	sbiw	r28, 0x09	; 9
    3f4e:	0f b6       	in	r0, 0x3f	; 63
    3f50:	f8 94       	cli
    3f52:	de bf       	out	0x3e, r29	; 62
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	cd bf       	out	0x3d, r28	; 61
    3f58:	6e 83       	std	Y+6, r22	; 0x06
    3f5a:	7f 83       	std	Y+7, r23	; 0x07
    3f5c:	88 87       	std	Y+8, r24	; 0x08
    3f5e:	99 87       	std	Y+9, r25	; 0x09
	u32 Local_u32_ReversedNum=0;
    3f60:	1a 82       	std	Y+2, r1	; 0x02
    3f62:	1b 82       	std	Y+3, r1	; 0x03
    3f64:	1c 82       	std	Y+4, r1	; 0x04
    3f66:	1d 82       	std	Y+5, r1	; 0x05
	u8  Local_u8_ZeroCounter=0;
    3f68:	19 82       	std	Y+1, r1	; 0x01
	if(u8Copy_LCD_Number==0)
    3f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    3f6c:	9f 81       	ldd	r25, Y+7	; 0x07
    3f6e:	a8 85       	ldd	r26, Y+8	; 0x08
    3f70:	b9 85       	ldd	r27, Y+9	; 0x09
    3f72:	00 97       	sbiw	r24, 0x00	; 0
    3f74:	a1 05       	cpc	r26, r1
    3f76:	b1 05       	cpc	r27, r1
    3f78:	c9 f4       	brne	.+50     	; 0x3fac <LCD_VoidSendNumber+0x70>
	{ // Condition for printing the number 0 as a digit
		LCD_VoidSendCharactar('0');
    3f7a:	80 e3       	ldi	r24, 0x30	; 48
    3f7c:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <LCD_VoidSendCharactar>
    3f80:	9c c0       	rjmp	.+312    	; 0x40ba <LCD_VoidSendNumber+0x17e>
	else
	{
		/*Counting number of ZEROS in Least significant digits (before a non zero digit)
		 * For example 1020055000 (3 Zeros)*/
		while(u8Copy_LCD_Number%10==0){
			Local_u8_ZeroCounter++;
    3f82:	89 81       	ldd	r24, Y+1	; 0x01
    3f84:	8f 5f       	subi	r24, 0xFF	; 255
    3f86:	89 83       	std	Y+1, r24	; 0x01
			u8Copy_LCD_Number/=10;
    3f88:	8e 81       	ldd	r24, Y+6	; 0x06
    3f8a:	9f 81       	ldd	r25, Y+7	; 0x07
    3f8c:	a8 85       	ldd	r26, Y+8	; 0x08
    3f8e:	b9 85       	ldd	r27, Y+9	; 0x09
    3f90:	2a e0       	ldi	r18, 0x0A	; 10
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	40 e0       	ldi	r20, 0x00	; 0
    3f96:	50 e0       	ldi	r21, 0x00	; 0
    3f98:	bc 01       	movw	r22, r24
    3f9a:	cd 01       	movw	r24, r26
    3f9c:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
    3fa0:	da 01       	movw	r26, r20
    3fa2:	c9 01       	movw	r24, r18
    3fa4:	8e 83       	std	Y+6, r24	; 0x06
    3fa6:	9f 83       	std	Y+7, r25	; 0x07
    3fa8:	a8 87       	std	Y+8, r26	; 0x08
    3faa:	b9 87       	std	Y+9, r27	; 0x09
	}
	else
	{
		/*Counting number of ZEROS in Least significant digits (before a non zero digit)
		 * For example 1020055000 (3 Zeros)*/
		while(u8Copy_LCD_Number%10==0){
    3fac:	8e 81       	ldd	r24, Y+6	; 0x06
    3fae:	9f 81       	ldd	r25, Y+7	; 0x07
    3fb0:	a8 85       	ldd	r26, Y+8	; 0x08
    3fb2:	b9 85       	ldd	r27, Y+9	; 0x09
    3fb4:	2a e0       	ldi	r18, 0x0A	; 10
    3fb6:	30 e0       	ldi	r19, 0x00	; 0
    3fb8:	40 e0       	ldi	r20, 0x00	; 0
    3fba:	50 e0       	ldi	r21, 0x00	; 0
    3fbc:	bc 01       	movw	r22, r24
    3fbe:	cd 01       	movw	r24, r26
    3fc0:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
    3fc4:	dc 01       	movw	r26, r24
    3fc6:	cb 01       	movw	r24, r22
    3fc8:	00 97       	sbiw	r24, 0x00	; 0
    3fca:	a1 05       	cpc	r26, r1
    3fcc:	b1 05       	cpc	r27, r1
    3fce:	c9 f2       	breq	.-78     	; 0x3f82 <LCD_VoidSendNumber+0x46>
    3fd0:	36 c0       	rjmp	.+108    	; 0x403e <LCD_VoidSendNumber+0x102>
			Local_u8_ZeroCounter++;
			u8Copy_LCD_Number/=10;
		}
		while(u8Copy_LCD_Number!=0)//Reversing the input number
		{
			Local_u32_ReversedNum = Local_u32_ReversedNum*10+ u8Copy_LCD_Number%10;
    3fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd4:	9b 81       	ldd	r25, Y+3	; 0x03
    3fd6:	ac 81       	ldd	r26, Y+4	; 0x04
    3fd8:	bd 81       	ldd	r27, Y+5	; 0x05
    3fda:	2a e0       	ldi	r18, 0x0A	; 10
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	40 e0       	ldi	r20, 0x00	; 0
    3fe0:	50 e0       	ldi	r21, 0x00	; 0
    3fe2:	bc 01       	movw	r22, r24
    3fe4:	cd 01       	movw	r24, r26
    3fe6:	0e 94 0d 2b 	call	0x561a	; 0x561a <__mulsi3>
    3fea:	7b 01       	movw	r14, r22
    3fec:	8c 01       	movw	r16, r24
    3fee:	8e 81       	ldd	r24, Y+6	; 0x06
    3ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    3ff2:	a8 85       	ldd	r26, Y+8	; 0x08
    3ff4:	b9 85       	ldd	r27, Y+9	; 0x09
    3ff6:	2a e0       	ldi	r18, 0x0A	; 10
    3ff8:	30 e0       	ldi	r19, 0x00	; 0
    3ffa:	40 e0       	ldi	r20, 0x00	; 0
    3ffc:	50 e0       	ldi	r21, 0x00	; 0
    3ffe:	bc 01       	movw	r22, r24
    4000:	cd 01       	movw	r24, r26
    4002:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
    4006:	dc 01       	movw	r26, r24
    4008:	cb 01       	movw	r24, r22
    400a:	8e 0d       	add	r24, r14
    400c:	9f 1d       	adc	r25, r15
    400e:	a0 1f       	adc	r26, r16
    4010:	b1 1f       	adc	r27, r17
    4012:	8a 83       	std	Y+2, r24	; 0x02
    4014:	9b 83       	std	Y+3, r25	; 0x03
    4016:	ac 83       	std	Y+4, r26	; 0x04
    4018:	bd 83       	std	Y+5, r27	; 0x05
			u8Copy_LCD_Number/=10;
    401a:	8e 81       	ldd	r24, Y+6	; 0x06
    401c:	9f 81       	ldd	r25, Y+7	; 0x07
    401e:	a8 85       	ldd	r26, Y+8	; 0x08
    4020:	b9 85       	ldd	r27, Y+9	; 0x09
    4022:	2a e0       	ldi	r18, 0x0A	; 10
    4024:	30 e0       	ldi	r19, 0x00	; 0
    4026:	40 e0       	ldi	r20, 0x00	; 0
    4028:	50 e0       	ldi	r21, 0x00	; 0
    402a:	bc 01       	movw	r22, r24
    402c:	cd 01       	movw	r24, r26
    402e:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
    4032:	da 01       	movw	r26, r20
    4034:	c9 01       	movw	r24, r18
    4036:	8e 83       	std	Y+6, r24	; 0x06
    4038:	9f 83       	std	Y+7, r25	; 0x07
    403a:	a8 87       	std	Y+8, r26	; 0x08
    403c:	b9 87       	std	Y+9, r27	; 0x09
		 * For example 1020055000 (3 Zeros)*/
		while(u8Copy_LCD_Number%10==0){
			Local_u8_ZeroCounter++;
			u8Copy_LCD_Number/=10;
		}
		while(u8Copy_LCD_Number!=0)//Reversing the input number
    403e:	8e 81       	ldd	r24, Y+6	; 0x06
    4040:	9f 81       	ldd	r25, Y+7	; 0x07
    4042:	a8 85       	ldd	r26, Y+8	; 0x08
    4044:	b9 85       	ldd	r27, Y+9	; 0x09
    4046:	00 97       	sbiw	r24, 0x00	; 0
    4048:	a1 05       	cpc	r26, r1
    404a:	b1 05       	cpc	r27, r1
    404c:	11 f6       	brne	.-124    	; 0x3fd2 <LCD_VoidSendNumber+0x96>
    404e:	23 c0       	rjmp	.+70     	; 0x4096 <LCD_VoidSendNumber+0x15a>
			Local_u32_ReversedNum = Local_u32_ReversedNum*10+ u8Copy_LCD_Number%10;
			u8Copy_LCD_Number/=10;
		}
		while(Local_u32_ReversedNum!=0)//Printing Reversed number digits reversely (In correct way)
		{
			LCD_VoidSendCharactar((Local_u32_ReversedNum%10)+0x30); //Sending ASCII for digits (Adding offset of 0 in hex can be written x+'0'
    4050:	8a 81       	ldd	r24, Y+2	; 0x02
    4052:	9b 81       	ldd	r25, Y+3	; 0x03
    4054:	ac 81       	ldd	r26, Y+4	; 0x04
    4056:	bd 81       	ldd	r27, Y+5	; 0x05
    4058:	2a e0       	ldi	r18, 0x0A	; 10
    405a:	30 e0       	ldi	r19, 0x00	; 0
    405c:	40 e0       	ldi	r20, 0x00	; 0
    405e:	50 e0       	ldi	r21, 0x00	; 0
    4060:	bc 01       	movw	r22, r24
    4062:	cd 01       	movw	r24, r26
    4064:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
    4068:	dc 01       	movw	r26, r24
    406a:	cb 01       	movw	r24, r22
    406c:	80 5d       	subi	r24, 0xD0	; 208
    406e:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <LCD_VoidSendCharactar>
			Local_u32_ReversedNum/=10;
    4072:	8a 81       	ldd	r24, Y+2	; 0x02
    4074:	9b 81       	ldd	r25, Y+3	; 0x03
    4076:	ac 81       	ldd	r26, Y+4	; 0x04
    4078:	bd 81       	ldd	r27, Y+5	; 0x05
    407a:	2a e0       	ldi	r18, 0x0A	; 10
    407c:	30 e0       	ldi	r19, 0x00	; 0
    407e:	40 e0       	ldi	r20, 0x00	; 0
    4080:	50 e0       	ldi	r21, 0x00	; 0
    4082:	bc 01       	movw	r22, r24
    4084:	cd 01       	movw	r24, r26
    4086:	0e 94 2c 2b 	call	0x5658	; 0x5658 <__udivmodsi4>
    408a:	da 01       	movw	r26, r20
    408c:	c9 01       	movw	r24, r18
    408e:	8a 83       	std	Y+2, r24	; 0x02
    4090:	9b 83       	std	Y+3, r25	; 0x03
    4092:	ac 83       	std	Y+4, r26	; 0x04
    4094:	bd 83       	std	Y+5, r27	; 0x05
		while(u8Copy_LCD_Number!=0)//Reversing the input number
		{
			Local_u32_ReversedNum = Local_u32_ReversedNum*10+ u8Copy_LCD_Number%10;
			u8Copy_LCD_Number/=10;
		}
		while(Local_u32_ReversedNum!=0)//Printing Reversed number digits reversely (In correct way)
    4096:	8a 81       	ldd	r24, Y+2	; 0x02
    4098:	9b 81       	ldd	r25, Y+3	; 0x03
    409a:	ac 81       	ldd	r26, Y+4	; 0x04
    409c:	bd 81       	ldd	r27, Y+5	; 0x05
    409e:	00 97       	sbiw	r24, 0x00	; 0
    40a0:	a1 05       	cpc	r26, r1
    40a2:	b1 05       	cpc	r27, r1
    40a4:	a9 f6       	brne	.-86     	; 0x4050 <LCD_VoidSendNumber+0x114>
    40a6:	06 c0       	rjmp	.+12     	; 0x40b4 <LCD_VoidSendNumber+0x178>
			Local_u32_ReversedNum/=10;
		}
		// Printing Zeros in Least Significant  Digits
		while(Local_u8_ZeroCounter>0)
		{
			LCD_VoidSendCharactar('0');
    40a8:	80 e3       	ldi	r24, 0x30	; 48
    40aa:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <LCD_VoidSendCharactar>
			Local_u8_ZeroCounter--;
    40ae:	89 81       	ldd	r24, Y+1	; 0x01
    40b0:	81 50       	subi	r24, 0x01	; 1
    40b2:	89 83       	std	Y+1, r24	; 0x01
		{
			LCD_VoidSendCharactar((Local_u32_ReversedNum%10)+0x30); //Sending ASCII for digits (Adding offset of 0 in hex can be written x+'0'
			Local_u32_ReversedNum/=10;
		}
		// Printing Zeros in Least Significant  Digits
		while(Local_u8_ZeroCounter>0)
    40b4:	89 81       	ldd	r24, Y+1	; 0x01
    40b6:	88 23       	and	r24, r24
    40b8:	b9 f7       	brne	.-18     	; 0x40a8 <LCD_VoidSendNumber+0x16c>
	LCD_VoidSendCommand(LCD_EntryInc_MODE);//Go to Decrement EntryModeSet, Shift Display
	_delay_ms(50);
 */


}
    40ba:	29 96       	adiw	r28, 0x09	; 9
    40bc:	0f b6       	in	r0, 0x3f	; 63
    40be:	f8 94       	cli
    40c0:	de bf       	out	0x3e, r29	; 62
    40c2:	0f be       	out	0x3f, r0	; 63
    40c4:	cd bf       	out	0x3d, r28	; 61
    40c6:	cf 91       	pop	r28
    40c8:	df 91       	pop	r29
    40ca:	1f 91       	pop	r17
    40cc:	0f 91       	pop	r16
    40ce:	ff 90       	pop	r15
    40d0:	ef 90       	pop	r14
    40d2:	08 95       	ret

000040d4 <LCD_voidSendSpecialChar>:


void LCD_voidSendSpecialChar(u8 *arr,u8 u8Copy_LCD_ROW,u8 u8Copy_LCD_COL,u8 Copy_CGAddress){
    40d4:	df 93       	push	r29
    40d6:	cf 93       	push	r28
    40d8:	cd b7       	in	r28, 0x3d	; 61
    40da:	de b7       	in	r29, 0x3e	; 62
    40dc:	28 97       	sbiw	r28, 0x08	; 8
    40de:	0f b6       	in	r0, 0x3f	; 63
    40e0:	f8 94       	cli
    40e2:	de bf       	out	0x3e, r29	; 62
    40e4:	0f be       	out	0x3f, r0	; 63
    40e6:	cd bf       	out	0x3d, r28	; 61
    40e8:	9d 83       	std	Y+5, r25	; 0x05
    40ea:	8c 83       	std	Y+4, r24	; 0x04
    40ec:	6e 83       	std	Y+6, r22	; 0x06
    40ee:	4f 83       	std	Y+7, r20	; 0x07
    40f0:	28 87       	std	Y+8, r18	; 0x08
	u8 address=0;
    40f2:	1b 82       	std	Y+3, r1	; 0x03
	SetBit(address,6); 			//Instruction for setting CGRAM ADDRESS
    40f4:	8b 81       	ldd	r24, Y+3	; 0x03
    40f6:	80 64       	ori	r24, 0x40	; 64
    40f8:	8b 83       	std	Y+3, r24	; 0x03
	LCD_VoidSendCommand(address|(Copy_CGAddress*8)); //Sending CGRAM ADDRESS WITH
    40fa:	88 85       	ldd	r24, Y+8	; 0x08
    40fc:	88 2f       	mov	r24, r24
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	88 0f       	add	r24, r24
    4102:	99 1f       	adc	r25, r25
    4104:	88 0f       	add	r24, r24
    4106:	99 1f       	adc	r25, r25
    4108:	88 0f       	add	r24, r24
    410a:	99 1f       	adc	r25, r25
    410c:	98 2f       	mov	r25, r24
    410e:	8b 81       	ldd	r24, Y+3	; 0x03
    4110:	89 2b       	or	r24, r25
    4112:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
	//Appropriate Location(First Row in the specified Character)

	for(int i=0;i<8;i++){
    4116:	1a 82       	std	Y+2, r1	; 0x02
    4118:	19 82       	std	Y+1, r1	; 0x01
    411a:	0f c0       	rjmp	.+30     	; 0x413a <LCD_voidSendSpecialChar+0x66>
		LCD_VoidSendCharactar(arr[i]);
    411c:	29 81       	ldd	r18, Y+1	; 0x01
    411e:	3a 81       	ldd	r19, Y+2	; 0x02
    4120:	8c 81       	ldd	r24, Y+4	; 0x04
    4122:	9d 81       	ldd	r25, Y+5	; 0x05
    4124:	fc 01       	movw	r30, r24
    4126:	e2 0f       	add	r30, r18
    4128:	f3 1f       	adc	r31, r19
    412a:	80 81       	ld	r24, Z
    412c:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <LCD_VoidSendCharactar>
	u8 address=0;
	SetBit(address,6); 			//Instruction for setting CGRAM ADDRESS
	LCD_VoidSendCommand(address|(Copy_CGAddress*8)); //Sending CGRAM ADDRESS WITH
	//Appropriate Location(First Row in the specified Character)

	for(int i=0;i<8;i++){
    4130:	89 81       	ldd	r24, Y+1	; 0x01
    4132:	9a 81       	ldd	r25, Y+2	; 0x02
    4134:	01 96       	adiw	r24, 0x01	; 1
    4136:	9a 83       	std	Y+2, r25	; 0x02
    4138:	89 83       	std	Y+1, r24	; 0x01
    413a:	89 81       	ldd	r24, Y+1	; 0x01
    413c:	9a 81       	ldd	r25, Y+2	; 0x02
    413e:	88 30       	cpi	r24, 0x08	; 8
    4140:	91 05       	cpc	r25, r1
    4142:	64 f3       	brlt	.-40     	; 0x411c <LCD_voidSendSpecialChar+0x48>
		LCD_VoidSendCharactar(arr[i]);
	}

	LCD_VoidSetCursorPos(u8Copy_LCD_ROW,u8Copy_LCD_COL);	//Return to DDRAM Address
    4144:	9f 81       	ldd	r25, Y+7	; 0x07
    4146:	8e 81       	ldd	r24, Y+6	; 0x06
    4148:	69 2f       	mov	r22, r25
    414a:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <LCD_VoidSetCursorPos>


	LCD_VoidSendCharactar(Copy_CGAddress);//In order to print ,The address of
    414e:	88 85       	ldd	r24, Y+8	; 0x08
    4150:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <LCD_VoidSendCharactar>
	//first Row of CG Character is sent to DDRAM which gets redirected
	//to the sent address in CGRAM.
}
    4154:	28 96       	adiw	r28, 0x08	; 8
    4156:	0f b6       	in	r0, 0x3f	; 63
    4158:	f8 94       	cli
    415a:	de bf       	out	0x3e, r29	; 62
    415c:	0f be       	out	0x3f, r0	; 63
    415e:	cd bf       	out	0x3d, r28	; 61
    4160:	cf 91       	pop	r28
    4162:	df 91       	pop	r29
    4164:	08 95       	ret

00004166 <LCD_voidSendSpecialCharRightToLeft>:

void LCD_voidSendSpecialCharRightToLeft(u8 *arr,u8 u8Copy_LCD_ROW,u8 u8Copy_LCD_COL,u8 Copy_CGAddress){
    4166:	df 93       	push	r29
    4168:	cf 93       	push	r28
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
    416e:	28 97       	sbiw	r28, 0x08	; 8
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	de bf       	out	0x3e, r29	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	cd bf       	out	0x3d, r28	; 61
    417a:	9d 83       	std	Y+5, r25	; 0x05
    417c:	8c 83       	std	Y+4, r24	; 0x04
    417e:	6e 83       	std	Y+6, r22	; 0x06
    4180:	4f 83       	std	Y+7, r20	; 0x07
    4182:	28 87       	std	Y+8, r18	; 0x08
	//This function is used when EntryMode is set to decrement address
	//Please note that arr[0] is treated as cursor instead of arr[8]

	u8 address=0;
    4184:	1b 82       	std	Y+3, r1	; 0x03
	SetBit(address,6); 			//Instruction for setting CGRAM ADDRESS
    4186:	8b 81       	ldd	r24, Y+3	; 0x03
    4188:	80 64       	ori	r24, 0x40	; 64
    418a:	8b 83       	std	Y+3, r24	; 0x03
	LCD_VoidSendCommand(address|(((Copy_CGAddress+1)*8)-1));//Sending CGRAM ADDRESS WITH
    418c:	88 85       	ldd	r24, Y+8	; 0x08
    418e:	88 2f       	mov	r24, r24
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	01 96       	adiw	r24, 0x01	; 1
    4194:	88 0f       	add	r24, r24
    4196:	99 1f       	adc	r25, r25
    4198:	88 0f       	add	r24, r24
    419a:	99 1f       	adc	r25, r25
    419c:	88 0f       	add	r24, r24
    419e:	99 1f       	adc	r25, r25
    41a0:	81 50       	subi	r24, 0x01	; 1
    41a2:	98 2f       	mov	r25, r24
    41a4:	8b 81       	ldd	r24, Y+3	; 0x03
    41a6:	89 2b       	or	r24, r25
    41a8:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
	//Appropriate Location(Last Row in the specified Character)

	for(int i=7;i>-1;i--){	//Data is sent inversely as it is
    41ac:	87 e0       	ldi	r24, 0x07	; 7
    41ae:	90 e0       	ldi	r25, 0x00	; 0
    41b0:	9a 83       	std	Y+2, r25	; 0x02
    41b2:	89 83       	std	Y+1, r24	; 0x01
    41b4:	0f c0       	rjmp	.+30     	; 0x41d4 <LCD_voidSendSpecialCharRightToLeft+0x6e>
		//written from bottom to TOP in CGRAM
		LCD_VoidSendCharactar(arr[i]);
    41b6:	29 81       	ldd	r18, Y+1	; 0x01
    41b8:	3a 81       	ldd	r19, Y+2	; 0x02
    41ba:	8c 81       	ldd	r24, Y+4	; 0x04
    41bc:	9d 81       	ldd	r25, Y+5	; 0x05
    41be:	fc 01       	movw	r30, r24
    41c0:	e2 0f       	add	r30, r18
    41c2:	f3 1f       	adc	r31, r19
    41c4:	80 81       	ld	r24, Z
    41c6:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <LCD_VoidSendCharactar>
	u8 address=0;
	SetBit(address,6); 			//Instruction for setting CGRAM ADDRESS
	LCD_VoidSendCommand(address|(((Copy_CGAddress+1)*8)-1));//Sending CGRAM ADDRESS WITH
	//Appropriate Location(Last Row in the specified Character)

	for(int i=7;i>-1;i--){	//Data is sent inversely as it is
    41ca:	89 81       	ldd	r24, Y+1	; 0x01
    41cc:	9a 81       	ldd	r25, Y+2	; 0x02
    41ce:	01 97       	sbiw	r24, 0x01	; 1
    41d0:	9a 83       	std	Y+2, r25	; 0x02
    41d2:	89 83       	std	Y+1, r24	; 0x01
    41d4:	89 81       	ldd	r24, Y+1	; 0x01
    41d6:	9a 81       	ldd	r25, Y+2	; 0x02
    41d8:	99 23       	and	r25, r25
    41da:	6c f7       	brge	.-38     	; 0x41b6 <LCD_voidSendSpecialCharRightToLeft+0x50>
		//written from bottom to TOP in CGRAM
		LCD_VoidSendCharactar(arr[i]);
	}

	LCD_VoidSetCursorPos(u8Copy_LCD_ROW,u8Copy_LCD_COL);
    41dc:	9f 81       	ldd	r25, Y+7	; 0x07
    41de:	8e 81       	ldd	r24, Y+6	; 0x06
    41e0:	69 2f       	mov	r22, r25
    41e2:	0e 94 70 1f 	call	0x3ee0	; 0x3ee0 <LCD_VoidSetCursorPos>

	LCD_VoidSendCharactar(Copy_CGAddress);//In order to print ,The address of
    41e6:	88 85       	ldd	r24, Y+8	; 0x08
    41e8:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <LCD_VoidSendCharactar>
	//first Row of CG Character is sent to DDRAM which gets redirected
	//to the sent address in CGRAM.
}
    41ec:	28 96       	adiw	r28, 0x08	; 8
    41ee:	0f b6       	in	r0, 0x3f	; 63
    41f0:	f8 94       	cli
    41f2:	de bf       	out	0x3e, r29	; 62
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	cd bf       	out	0x3d, r28	; 61
    41f8:	cf 91       	pop	r28
    41fa:	df 91       	pop	r29
    41fc:	08 95       	ret

000041fe <LCD_VoidClearDisplay>:

void LCD_VoidClearDisplay(void){
    41fe:	df 93       	push	r29
    4200:	cf 93       	push	r28
    4202:	cd b7       	in	r28, 0x3d	; 61
    4204:	de b7       	in	r29, 0x3e	; 62
	LCD_VoidSendCommand(LCD_DisplayClear);
    4206:	81 e0       	ldi	r24, 0x01	; 1
    4208:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
}
    420c:	cf 91       	pop	r28
    420e:	df 91       	pop	r29
    4210:	08 95       	ret

00004212 <LCD_VoidHelloHamkosha>:
void LCD_VoidHelloHamkosha(void){
    4212:	df 93       	push	r29
    4214:	cf 93       	push	r28
    4216:	cd b7       	in	r28, 0x3d	; 61
    4218:	de b7       	in	r29, 0x3e	; 62
    421a:	2d 97       	sbiw	r28, 0x0d	; 13
    421c:	0f b6       	in	r0, 0x3f	; 63
    421e:	f8 94       	cli
    4220:	de bf       	out	0x3e, r29	; 62
    4222:	0f be       	out	0x3f, r0	; 63
    4224:	cd bf       	out	0x3d, r28	; 61
	u8 Hamoksha[8]={0B00000,0B00100,0B01010,0B01010,0B00100,0B01110,0B00100,0B01010};
    4226:	ce 01       	movw	r24, r28
    4228:	01 96       	adiw	r24, 0x01	; 1
    422a:	9a 87       	std	Y+10, r25	; 0x0a
    422c:	89 87       	std	Y+9, r24	; 0x09
    422e:	e7 e2       	ldi	r30, 0x27	; 39
    4230:	f2 e0       	ldi	r31, 0x02	; 2
    4232:	fc 87       	std	Y+12, r31	; 0x0c
    4234:	eb 87       	std	Y+11, r30	; 0x0b
    4236:	f8 e0       	ldi	r31, 0x08	; 8
    4238:	fd 87       	std	Y+13, r31	; 0x0d
    423a:	eb 85       	ldd	r30, Y+11	; 0x0b
    423c:	fc 85       	ldd	r31, Y+12	; 0x0c
    423e:	00 80       	ld	r0, Z
    4240:	8b 85       	ldd	r24, Y+11	; 0x0b
    4242:	9c 85       	ldd	r25, Y+12	; 0x0c
    4244:	01 96       	adiw	r24, 0x01	; 1
    4246:	9c 87       	std	Y+12, r25	; 0x0c
    4248:	8b 87       	std	Y+11, r24	; 0x0b
    424a:	e9 85       	ldd	r30, Y+9	; 0x09
    424c:	fa 85       	ldd	r31, Y+10	; 0x0a
    424e:	00 82       	st	Z, r0
    4250:	89 85       	ldd	r24, Y+9	; 0x09
    4252:	9a 85       	ldd	r25, Y+10	; 0x0a
    4254:	01 96       	adiw	r24, 0x01	; 1
    4256:	9a 87       	std	Y+10, r25	; 0x0a
    4258:	89 87       	std	Y+9, r24	; 0x09
    425a:	9d 85       	ldd	r25, Y+13	; 0x0d
    425c:	91 50       	subi	r25, 0x01	; 1
    425e:	9d 87       	std	Y+13, r25	; 0x0d
    4260:	ed 85       	ldd	r30, Y+13	; 0x0d
    4262:	ee 23       	and	r30, r30
    4264:	51 f7       	brne	.-44     	; 0x423a <LCD_VoidHelloHamkosha+0x28>
	LCD_VoidSendString("Hi,I am Hamoksha");
    4266:	80 e6       	ldi	r24, 0x60	; 96
    4268:	90 e0       	ldi	r25, 0x00	; 0
    426a:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <LCD_VoidSendString>
	LCD_voidSendSpecialChar(Hamoksha,LCD_ROW_TWO,LCD_COL_EIGHT,LCD_CGRAM_CHAR1);
    426e:	ce 01       	movw	r24, r28
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	62 e0       	ldi	r22, 0x02	; 2
    4274:	48 e0       	ldi	r20, 0x08	; 8
    4276:	20 e0       	ldi	r18, 0x00	; 0
    4278:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>
}
    427c:	2d 96       	adiw	r28, 0x0d	; 13
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	de bf       	out	0x3e, r29	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	cf 91       	pop	r28
    428a:	df 91       	pop	r29
    428c:	08 95       	ret

0000428e <LCD_VoidHamkoshaPlayFootball>:
void LCD_VoidHamkoshaPlayFootball(void){
    428e:	df 93       	push	r29
    4290:	cf 93       	push	r28
    4292:	cd b7       	in	r28, 0x3d	; 61
    4294:	de b7       	in	r29, 0x3e	; 62
    4296:	c3 54       	subi	r28, 0x43	; 67
    4298:	d0 40       	sbci	r29, 0x00	; 0
    429a:	0f b6       	in	r0, 0x3f	; 63
    429c:	f8 94       	cli
    429e:	de bf       	out	0x3e, r29	; 62
    42a0:	0f be       	out	0x3f, r0	; 63
    42a2:	cd bf       	out	0x3d, r28	; 61
	u8 Hamoksha[8]={0B00000,0B00100,0B01010,0B01010,0B00100,0B01110,0B00100,0B01010};
    42a4:	ce 01       	movw	r24, r28
    42a6:	4d 96       	adiw	r24, 0x1d	; 29
    42a8:	9e ab       	std	Y+54, r25	; 0x36
    42aa:	8d ab       	std	Y+53, r24	; 0x35
    42ac:	ef e3       	ldi	r30, 0x3F	; 63
    42ae:	f2 e0       	ldi	r31, 0x02	; 2
    42b0:	f8 af       	std	Y+56, r31	; 0x38
    42b2:	ef ab       	std	Y+55, r30	; 0x37
    42b4:	f8 e0       	ldi	r31, 0x08	; 8
    42b6:	f9 af       	std	Y+57, r31	; 0x39
    42b8:	ef a9       	ldd	r30, Y+55	; 0x37
    42ba:	f8 ad       	ldd	r31, Y+56	; 0x38
    42bc:	00 80       	ld	r0, Z
    42be:	8f a9       	ldd	r24, Y+55	; 0x37
    42c0:	98 ad       	ldd	r25, Y+56	; 0x38
    42c2:	01 96       	adiw	r24, 0x01	; 1
    42c4:	98 af       	std	Y+56, r25	; 0x38
    42c6:	8f ab       	std	Y+55, r24	; 0x37
    42c8:	ed a9       	ldd	r30, Y+53	; 0x35
    42ca:	fe a9       	ldd	r31, Y+54	; 0x36
    42cc:	00 82       	st	Z, r0
    42ce:	8d a9       	ldd	r24, Y+53	; 0x35
    42d0:	9e a9       	ldd	r25, Y+54	; 0x36
    42d2:	01 96       	adiw	r24, 0x01	; 1
    42d4:	9e ab       	std	Y+54, r25	; 0x36
    42d6:	8d ab       	std	Y+53, r24	; 0x35
    42d8:	99 ad       	ldd	r25, Y+57	; 0x39
    42da:	91 50       	subi	r25, 0x01	; 1
    42dc:	99 af       	std	Y+57, r25	; 0x39
    42de:	e9 ad       	ldd	r30, Y+57	; 0x39
    42e0:	ee 23       	and	r30, r30
    42e2:	51 f7       	brne	.-44     	; 0x42b8 <LCD_VoidHamkoshaPlayFootball+0x2a>
	u8 Ball_DOWN[8]={0B00000,0B00000,0B00000,0B00000,0B00000,0B01000,0B10100,0B01000};
    42e4:	ce 01       	movw	r24, r28
    42e6:	85 96       	adiw	r24, 0x25	; 37
    42e8:	9b af       	std	Y+59, r25	; 0x3b
    42ea:	8a af       	std	Y+58, r24	; 0x3a
    42ec:	e7 e3       	ldi	r30, 0x37	; 55
    42ee:	f2 e0       	ldi	r31, 0x02	; 2
    42f0:	fd af       	std	Y+61, r31	; 0x3d
    42f2:	ec af       	std	Y+60, r30	; 0x3c
    42f4:	f8 e0       	ldi	r31, 0x08	; 8
    42f6:	fe af       	std	Y+62, r31	; 0x3e
    42f8:	ec ad       	ldd	r30, Y+60	; 0x3c
    42fa:	fd ad       	ldd	r31, Y+61	; 0x3d
    42fc:	00 80       	ld	r0, Z
    42fe:	8c ad       	ldd	r24, Y+60	; 0x3c
    4300:	9d ad       	ldd	r25, Y+61	; 0x3d
    4302:	01 96       	adiw	r24, 0x01	; 1
    4304:	9d af       	std	Y+61, r25	; 0x3d
    4306:	8c af       	std	Y+60, r24	; 0x3c
    4308:	ea ad       	ldd	r30, Y+58	; 0x3a
    430a:	fb ad       	ldd	r31, Y+59	; 0x3b
    430c:	00 82       	st	Z, r0
    430e:	8a ad       	ldd	r24, Y+58	; 0x3a
    4310:	9b ad       	ldd	r25, Y+59	; 0x3b
    4312:	01 96       	adiw	r24, 0x01	; 1
    4314:	9b af       	std	Y+59, r25	; 0x3b
    4316:	8a af       	std	Y+58, r24	; 0x3a
    4318:	9e ad       	ldd	r25, Y+62	; 0x3e
    431a:	91 50       	subi	r25, 0x01	; 1
    431c:	9e af       	std	Y+62, r25	; 0x3e
    431e:	ee ad       	ldd	r30, Y+62	; 0x3e
    4320:	ee 23       	and	r30, r30
    4322:	51 f7       	brne	.-44     	; 0x42f8 <LCD_VoidHamkoshaPlayFootball+0x6a>
	u8 Ball_UP[8]={0B00000,0B01000,0B10100,0B01000,0B00000,0B00000,0B00000,0B00000};
    4324:	ce 01       	movw	r24, r28
    4326:	8d 96       	adiw	r24, 0x2d	; 45
    4328:	21 96       	adiw	r28, 0x01	; 1
    432a:	9f af       	std	Y+63, r25	; 0x3f
    432c:	8e af       	std	Y+62, r24	; 0x3e
    432e:	21 97       	sbiw	r28, 0x01	; 1
    4330:	ef e2       	ldi	r30, 0x2F	; 47
    4332:	f2 e0       	ldi	r31, 0x02	; 2
    4334:	23 96       	adiw	r28, 0x03	; 3
    4336:	ff af       	std	Y+63, r31	; 0x3f
    4338:	ee af       	std	Y+62, r30	; 0x3e
    433a:	23 97       	sbiw	r28, 0x03	; 3
    433c:	f8 e0       	ldi	r31, 0x08	; 8
    433e:	24 96       	adiw	r28, 0x04	; 4
    4340:	ff af       	std	Y+63, r31	; 0x3f
    4342:	24 97       	sbiw	r28, 0x04	; 4
    4344:	23 96       	adiw	r28, 0x03	; 3
    4346:	ee ad       	ldd	r30, Y+62	; 0x3e
    4348:	ff ad       	ldd	r31, Y+63	; 0x3f
    434a:	23 97       	sbiw	r28, 0x03	; 3
    434c:	00 80       	ld	r0, Z
    434e:	23 96       	adiw	r28, 0x03	; 3
    4350:	8e ad       	ldd	r24, Y+62	; 0x3e
    4352:	9f ad       	ldd	r25, Y+63	; 0x3f
    4354:	23 97       	sbiw	r28, 0x03	; 3
    4356:	01 96       	adiw	r24, 0x01	; 1
    4358:	23 96       	adiw	r28, 0x03	; 3
    435a:	9f af       	std	Y+63, r25	; 0x3f
    435c:	8e af       	std	Y+62, r24	; 0x3e
    435e:	23 97       	sbiw	r28, 0x03	; 3
    4360:	21 96       	adiw	r28, 0x01	; 1
    4362:	ee ad       	ldd	r30, Y+62	; 0x3e
    4364:	ff ad       	ldd	r31, Y+63	; 0x3f
    4366:	21 97       	sbiw	r28, 0x01	; 1
    4368:	00 82       	st	Z, r0
    436a:	21 96       	adiw	r28, 0x01	; 1
    436c:	8e ad       	ldd	r24, Y+62	; 0x3e
    436e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4370:	21 97       	sbiw	r28, 0x01	; 1
    4372:	01 96       	adiw	r24, 0x01	; 1
    4374:	21 96       	adiw	r28, 0x01	; 1
    4376:	9f af       	std	Y+63, r25	; 0x3f
    4378:	8e af       	std	Y+62, r24	; 0x3e
    437a:	21 97       	sbiw	r28, 0x01	; 1
    437c:	24 96       	adiw	r28, 0x04	; 4
    437e:	9f ad       	ldd	r25, Y+63	; 0x3f
    4380:	24 97       	sbiw	r28, 0x04	; 4
    4382:	91 50       	subi	r25, 0x01	; 1
    4384:	24 96       	adiw	r28, 0x04	; 4
    4386:	9f af       	std	Y+63, r25	; 0x3f
    4388:	24 97       	sbiw	r28, 0x04	; 4
    438a:	24 96       	adiw	r28, 0x04	; 4
    438c:	ef ad       	ldd	r30, Y+63	; 0x3f
    438e:	24 97       	sbiw	r28, 0x04	; 4
    4390:	ee 23       	and	r30, r30
    4392:	c1 f6       	brne	.-80     	; 0x4344 <LCD_VoidHamkoshaPlayFootball+0xb6>

	LCD_VoidSendCommand(LCD_ReturnHome);
    4394:	82 e0       	ldi	r24, 0x02	; 2
    4396:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
//	LCD_VoidSendCommand(LCD_DisplayClear);
	LCD_VoidSendString("I play football");
    439a:	81 e7       	ldi	r24, 0x71	; 113
    439c:	90 e0       	ldi	r25, 0x00	; 0
    439e:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <LCD_VoidSendString>
	LCD_voidSendSpecialChar(Hamoksha,LCD_ROW_TWO,LCD_COL_EIGHT,LCD_CGRAM_CHAR1);
    43a2:	ce 01       	movw	r24, r28
    43a4:	4d 96       	adiw	r24, 0x1d	; 29
    43a6:	62 e0       	ldi	r22, 0x02	; 2
    43a8:	48 e0       	ldi	r20, 0x08	; 8
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>
	LCD_voidSendSpecialChar(Ball_DOWN,LCD_ROW_TWO,LCD_COL_NINE,LCD_CGRAM_CHAR2);
    43b0:	ce 01       	movw	r24, r28
    43b2:	85 96       	adiw	r24, 0x25	; 37
    43b4:	62 e0       	ldi	r22, 0x02	; 2
    43b6:	49 e0       	ldi	r20, 0x09	; 9
    43b8:	21 e0       	ldi	r18, 0x01	; 1
    43ba:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>
    43be:	80 e0       	ldi	r24, 0x00	; 0
    43c0:	90 e0       	ldi	r25, 0x00	; 0
    43c2:	a8 e4       	ldi	r26, 0x48	; 72
    43c4:	b2 e4       	ldi	r27, 0x42	; 66
    43c6:	89 8f       	std	Y+25, r24	; 0x19
    43c8:	9a 8f       	std	Y+26, r25	; 0x1a
    43ca:	ab 8f       	std	Y+27, r26	; 0x1b
    43cc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43ce:	69 8d       	ldd	r22, Y+25	; 0x19
    43d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    43d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    43d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    43d6:	20 e0       	ldi	r18, 0x00	; 0
    43d8:	30 e0       	ldi	r19, 0x00	; 0
    43da:	4a ef       	ldi	r20, 0xFA	; 250
    43dc:	54 e4       	ldi	r21, 0x44	; 68
    43de:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    43e2:	dc 01       	movw	r26, r24
    43e4:	cb 01       	movw	r24, r22
    43e6:	8d 8b       	std	Y+21, r24	; 0x15
    43e8:	9e 8b       	std	Y+22, r25	; 0x16
    43ea:	af 8b       	std	Y+23, r26	; 0x17
    43ec:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    43ee:	6d 89       	ldd	r22, Y+21	; 0x15
    43f0:	7e 89       	ldd	r23, Y+22	; 0x16
    43f2:	8f 89       	ldd	r24, Y+23	; 0x17
    43f4:	98 8d       	ldd	r25, Y+24	; 0x18
    43f6:	20 e0       	ldi	r18, 0x00	; 0
    43f8:	30 e0       	ldi	r19, 0x00	; 0
    43fa:	40 e8       	ldi	r20, 0x80	; 128
    43fc:	5f e3       	ldi	r21, 0x3F	; 63
    43fe:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    4402:	88 23       	and	r24, r24
    4404:	2c f4       	brge	.+10     	; 0x4410 <LCD_VoidHamkoshaPlayFootball+0x182>
		__ticks = 1;
    4406:	81 e0       	ldi	r24, 0x01	; 1
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	9c 8b       	std	Y+20, r25	; 0x14
    440c:	8b 8b       	std	Y+19, r24	; 0x13
    440e:	3f c0       	rjmp	.+126    	; 0x448e <LCD_VoidHamkoshaPlayFootball+0x200>
	else if (__tmp > 65535)
    4410:	6d 89       	ldd	r22, Y+21	; 0x15
    4412:	7e 89       	ldd	r23, Y+22	; 0x16
    4414:	8f 89       	ldd	r24, Y+23	; 0x17
    4416:	98 8d       	ldd	r25, Y+24	; 0x18
    4418:	20 e0       	ldi	r18, 0x00	; 0
    441a:	3f ef       	ldi	r19, 0xFF	; 255
    441c:	4f e7       	ldi	r20, 0x7F	; 127
    441e:	57 e4       	ldi	r21, 0x47	; 71
    4420:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    4424:	18 16       	cp	r1, r24
    4426:	4c f5       	brge	.+82     	; 0x447a <LCD_VoidHamkoshaPlayFootball+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4428:	69 8d       	ldd	r22, Y+25	; 0x19
    442a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    442c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    442e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	40 e2       	ldi	r20, 0x20	; 32
    4436:	51 e4       	ldi	r21, 0x41	; 65
    4438:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    443c:	dc 01       	movw	r26, r24
    443e:	cb 01       	movw	r24, r22
    4440:	bc 01       	movw	r22, r24
    4442:	cd 01       	movw	r24, r26
    4444:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4448:	dc 01       	movw	r26, r24
    444a:	cb 01       	movw	r24, r22
    444c:	9c 8b       	std	Y+20, r25	; 0x14
    444e:	8b 8b       	std	Y+19, r24	; 0x13
    4450:	0f c0       	rjmp	.+30     	; 0x4470 <LCD_VoidHamkoshaPlayFootball+0x1e2>
    4452:	88 ec       	ldi	r24, 0xC8	; 200
    4454:	90 e0       	ldi	r25, 0x00	; 0
    4456:	9a 8b       	std	Y+18, r25	; 0x12
    4458:	89 8b       	std	Y+17, r24	; 0x11
    445a:	89 89       	ldd	r24, Y+17	; 0x11
    445c:	9a 89       	ldd	r25, Y+18	; 0x12
    445e:	01 97       	sbiw	r24, 0x01	; 1
    4460:	f1 f7       	brne	.-4      	; 0x445e <LCD_VoidHamkoshaPlayFootball+0x1d0>
    4462:	9a 8b       	std	Y+18, r25	; 0x12
    4464:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4466:	8b 89       	ldd	r24, Y+19	; 0x13
    4468:	9c 89       	ldd	r25, Y+20	; 0x14
    446a:	01 97       	sbiw	r24, 0x01	; 1
    446c:	9c 8b       	std	Y+20, r25	; 0x14
    446e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4470:	8b 89       	ldd	r24, Y+19	; 0x13
    4472:	9c 89       	ldd	r25, Y+20	; 0x14
    4474:	00 97       	sbiw	r24, 0x00	; 0
    4476:	69 f7       	brne	.-38     	; 0x4452 <LCD_VoidHamkoshaPlayFootball+0x1c4>
    4478:	14 c0       	rjmp	.+40     	; 0x44a2 <LCD_VoidHamkoshaPlayFootball+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    447a:	6d 89       	ldd	r22, Y+21	; 0x15
    447c:	7e 89       	ldd	r23, Y+22	; 0x16
    447e:	8f 89       	ldd	r24, Y+23	; 0x17
    4480:	98 8d       	ldd	r25, Y+24	; 0x18
    4482:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4486:	dc 01       	movw	r26, r24
    4488:	cb 01       	movw	r24, r22
    448a:	9c 8b       	std	Y+20, r25	; 0x14
    448c:	8b 8b       	std	Y+19, r24	; 0x13
    448e:	8b 89       	ldd	r24, Y+19	; 0x13
    4490:	9c 89       	ldd	r25, Y+20	; 0x14
    4492:	98 8b       	std	Y+16, r25	; 0x10
    4494:	8f 87       	std	Y+15, r24	; 0x0f
    4496:	8f 85       	ldd	r24, Y+15	; 0x0f
    4498:	98 89       	ldd	r25, Y+16	; 0x10
    449a:	01 97       	sbiw	r24, 0x01	; 1
    449c:	f1 f7       	brne	.-4      	; 0x449a <LCD_VoidHamkoshaPlayFootball+0x20c>
    449e:	98 8b       	std	Y+16, r25	; 0x10
    44a0:	8f 87       	std	Y+15, r24	; 0x0f

//	LCD_VoidSendCommand(LCD_ReturnHome);

//	LCD_VoidSendString("I play football");
//	LCD_voidSendSpecialChar(Hamoksha,LCD_ROW_TWO,LCD_COL_EIGHT,LCD_CGRAM_CHAR1);
	LCD_voidSendSpecialChar(Ball_UP,LCD_ROW_TWO,LCD_COL_NINE,LCD_CGRAM_CHAR3);
    44a2:	ce 01       	movw	r24, r28
    44a4:	8d 96       	adiw	r24, 0x2d	; 45
    44a6:	62 e0       	ldi	r22, 0x02	; 2
    44a8:	49 e0       	ldi	r20, 0x09	; 9
    44aa:	22 e0       	ldi	r18, 0x02	; 2
    44ac:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>
    44b0:	80 e0       	ldi	r24, 0x00	; 0
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	a8 e4       	ldi	r26, 0x48	; 72
    44b6:	b2 e4       	ldi	r27, 0x42	; 66
    44b8:	8b 87       	std	Y+11, r24	; 0x0b
    44ba:	9c 87       	std	Y+12, r25	; 0x0c
    44bc:	ad 87       	std	Y+13, r26	; 0x0d
    44be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    44c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    44c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    44c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    44c8:	20 e0       	ldi	r18, 0x00	; 0
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	4a ef       	ldi	r20, 0xFA	; 250
    44ce:	54 e4       	ldi	r21, 0x44	; 68
    44d0:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    44d4:	dc 01       	movw	r26, r24
    44d6:	cb 01       	movw	r24, r22
    44d8:	8f 83       	std	Y+7, r24	; 0x07
    44da:	98 87       	std	Y+8, r25	; 0x08
    44dc:	a9 87       	std	Y+9, r26	; 0x09
    44de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    44e0:	6f 81       	ldd	r22, Y+7	; 0x07
    44e2:	78 85       	ldd	r23, Y+8	; 0x08
    44e4:	89 85       	ldd	r24, Y+9	; 0x09
    44e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    44e8:	20 e0       	ldi	r18, 0x00	; 0
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	40 e8       	ldi	r20, 0x80	; 128
    44ee:	5f e3       	ldi	r21, 0x3F	; 63
    44f0:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    44f4:	88 23       	and	r24, r24
    44f6:	2c f4       	brge	.+10     	; 0x4502 <LCD_VoidHamkoshaPlayFootball+0x274>
		__ticks = 1;
    44f8:	81 e0       	ldi	r24, 0x01	; 1
    44fa:	90 e0       	ldi	r25, 0x00	; 0
    44fc:	9e 83       	std	Y+6, r25	; 0x06
    44fe:	8d 83       	std	Y+5, r24	; 0x05
    4500:	3f c0       	rjmp	.+126    	; 0x4580 <LCD_VoidHamkoshaPlayFootball+0x2f2>
	else if (__tmp > 65535)
    4502:	6f 81       	ldd	r22, Y+7	; 0x07
    4504:	78 85       	ldd	r23, Y+8	; 0x08
    4506:	89 85       	ldd	r24, Y+9	; 0x09
    4508:	9a 85       	ldd	r25, Y+10	; 0x0a
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	3f ef       	ldi	r19, 0xFF	; 255
    450e:	4f e7       	ldi	r20, 0x7F	; 127
    4510:	57 e4       	ldi	r21, 0x47	; 71
    4512:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    4516:	18 16       	cp	r1, r24
    4518:	4c f5       	brge	.+82     	; 0x456c <LCD_VoidHamkoshaPlayFootball+0x2de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    451a:	6b 85       	ldd	r22, Y+11	; 0x0b
    451c:	7c 85       	ldd	r23, Y+12	; 0x0c
    451e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4520:	9e 85       	ldd	r25, Y+14	; 0x0e
    4522:	20 e0       	ldi	r18, 0x00	; 0
    4524:	30 e0       	ldi	r19, 0x00	; 0
    4526:	40 e2       	ldi	r20, 0x20	; 32
    4528:	51 e4       	ldi	r21, 0x41	; 65
    452a:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    452e:	dc 01       	movw	r26, r24
    4530:	cb 01       	movw	r24, r22
    4532:	bc 01       	movw	r22, r24
    4534:	cd 01       	movw	r24, r26
    4536:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    453a:	dc 01       	movw	r26, r24
    453c:	cb 01       	movw	r24, r22
    453e:	9e 83       	std	Y+6, r25	; 0x06
    4540:	8d 83       	std	Y+5, r24	; 0x05
    4542:	0f c0       	rjmp	.+30     	; 0x4562 <LCD_VoidHamkoshaPlayFootball+0x2d4>
    4544:	88 ec       	ldi	r24, 0xC8	; 200
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	9c 83       	std	Y+4, r25	; 0x04
    454a:	8b 83       	std	Y+3, r24	; 0x03
    454c:	8b 81       	ldd	r24, Y+3	; 0x03
    454e:	9c 81       	ldd	r25, Y+4	; 0x04
    4550:	01 97       	sbiw	r24, 0x01	; 1
    4552:	f1 f7       	brne	.-4      	; 0x4550 <LCD_VoidHamkoshaPlayFootball+0x2c2>
    4554:	9c 83       	std	Y+4, r25	; 0x04
    4556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4558:	8d 81       	ldd	r24, Y+5	; 0x05
    455a:	9e 81       	ldd	r25, Y+6	; 0x06
    455c:	01 97       	sbiw	r24, 0x01	; 1
    455e:	9e 83       	std	Y+6, r25	; 0x06
    4560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4562:	8d 81       	ldd	r24, Y+5	; 0x05
    4564:	9e 81       	ldd	r25, Y+6	; 0x06
    4566:	00 97       	sbiw	r24, 0x00	; 0
    4568:	69 f7       	brne	.-38     	; 0x4544 <LCD_VoidHamkoshaPlayFootball+0x2b6>
    456a:	14 c0       	rjmp	.+40     	; 0x4594 <LCD_VoidHamkoshaPlayFootball+0x306>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    456c:	6f 81       	ldd	r22, Y+7	; 0x07
    456e:	78 85       	ldd	r23, Y+8	; 0x08
    4570:	89 85       	ldd	r24, Y+9	; 0x09
    4572:	9a 85       	ldd	r25, Y+10	; 0x0a
    4574:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4578:	dc 01       	movw	r26, r24
    457a:	cb 01       	movw	r24, r22
    457c:	9e 83       	std	Y+6, r25	; 0x06
    457e:	8d 83       	std	Y+5, r24	; 0x05
    4580:	8d 81       	ldd	r24, Y+5	; 0x05
    4582:	9e 81       	ldd	r25, Y+6	; 0x06
    4584:	9a 83       	std	Y+2, r25	; 0x02
    4586:	89 83       	std	Y+1, r24	; 0x01
    4588:	89 81       	ldd	r24, Y+1	; 0x01
    458a:	9a 81       	ldd	r25, Y+2	; 0x02
    458c:	01 97       	sbiw	r24, 0x01	; 1
    458e:	f1 f7       	brne	.-4      	; 0x458c <LCD_VoidHamkoshaPlayFootball+0x2fe>
    4590:	9a 83       	std	Y+2, r25	; 0x02
    4592:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);

}
    4594:	cd 5b       	subi	r28, 0xBD	; 189
    4596:	df 4f       	sbci	r29, 0xFF	; 255
    4598:	0f b6       	in	r0, 0x3f	; 63
    459a:	f8 94       	cli
    459c:	de bf       	out	0x3e, r29	; 62
    459e:	0f be       	out	0x3f, r0	; 63
    45a0:	cd bf       	out	0x3d, r28	; 61
    45a2:	cf 91       	pop	r28
    45a4:	df 91       	pop	r29
    45a6:	08 95       	ret

000045a8 <LCD_VoidHamkoshaCanRun>:


void LCD_VoidHamkoshaCanRun(void){
    45a8:	df 93       	push	r29
    45aa:	cf 93       	push	r28
    45ac:	cd b7       	in	r28, 0x3d	; 61
    45ae:	de b7       	in	r29, 0x3e	; 62
    45b0:	e7 97       	sbiw	r28, 0x37	; 55
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	cd bf       	out	0x3d, r28	; 61
	u8 HamokshaRun[8]={0B00000,0B00100,0B01010,0B01010,0B00110,0B00100,0B01110,0B00000};
    45bc:	ce 01       	movw	r24, r28
    45be:	4e 96       	adiw	r24, 0x1e	; 30
    45c0:	9f a7       	std	Y+47, r25	; 0x2f
    45c2:	8e a7       	std	Y+46, r24	; 0x2e
    45c4:	ef e4       	ldi	r30, 0x4F	; 79
    45c6:	f2 e0       	ldi	r31, 0x02	; 2
    45c8:	f9 ab       	std	Y+49, r31	; 0x31
    45ca:	e8 ab       	std	Y+48, r30	; 0x30
    45cc:	f8 e0       	ldi	r31, 0x08	; 8
    45ce:	fa ab       	std	Y+50, r31	; 0x32
    45d0:	e8 a9       	ldd	r30, Y+48	; 0x30
    45d2:	f9 a9       	ldd	r31, Y+49	; 0x31
    45d4:	00 80       	ld	r0, Z
    45d6:	88 a9       	ldd	r24, Y+48	; 0x30
    45d8:	99 a9       	ldd	r25, Y+49	; 0x31
    45da:	01 96       	adiw	r24, 0x01	; 1
    45dc:	99 ab       	std	Y+49, r25	; 0x31
    45de:	88 ab       	std	Y+48, r24	; 0x30
    45e0:	ee a5       	ldd	r30, Y+46	; 0x2e
    45e2:	ff a5       	ldd	r31, Y+47	; 0x2f
    45e4:	00 82       	st	Z, r0
    45e6:	8e a5       	ldd	r24, Y+46	; 0x2e
    45e8:	9f a5       	ldd	r25, Y+47	; 0x2f
    45ea:	01 96       	adiw	r24, 0x01	; 1
    45ec:	9f a7       	std	Y+47, r25	; 0x2f
    45ee:	8e a7       	std	Y+46, r24	; 0x2e
    45f0:	9a a9       	ldd	r25, Y+50	; 0x32
    45f2:	91 50       	subi	r25, 0x01	; 1
    45f4:	9a ab       	std	Y+50, r25	; 0x32
    45f6:	ea a9       	ldd	r30, Y+50	; 0x32
    45f8:	ee 23       	and	r30, r30
    45fa:	51 f7       	brne	.-44     	; 0x45d0 <LCD_VoidHamkoshaCanRun+0x28>
	u8 Hamoksha[8]={0B00000,0B00100,0B01010,0B01010,0B00100,0B01110,0B00100,0B01010};
    45fc:	ce 01       	movw	r24, r28
    45fe:	86 96       	adiw	r24, 0x26	; 38
    4600:	9c ab       	std	Y+52, r25	; 0x34
    4602:	8b ab       	std	Y+51, r24	; 0x33
    4604:	e7 e4       	ldi	r30, 0x47	; 71
    4606:	f2 e0       	ldi	r31, 0x02	; 2
    4608:	fe ab       	std	Y+54, r31	; 0x36
    460a:	ed ab       	std	Y+53, r30	; 0x35
    460c:	f8 e0       	ldi	r31, 0x08	; 8
    460e:	ff ab       	std	Y+55, r31	; 0x37
    4610:	ed a9       	ldd	r30, Y+53	; 0x35
    4612:	fe a9       	ldd	r31, Y+54	; 0x36
    4614:	00 80       	ld	r0, Z
    4616:	8d a9       	ldd	r24, Y+53	; 0x35
    4618:	9e a9       	ldd	r25, Y+54	; 0x36
    461a:	01 96       	adiw	r24, 0x01	; 1
    461c:	9e ab       	std	Y+54, r25	; 0x36
    461e:	8d ab       	std	Y+53, r24	; 0x35
    4620:	eb a9       	ldd	r30, Y+51	; 0x33
    4622:	fc a9       	ldd	r31, Y+52	; 0x34
    4624:	00 82       	st	Z, r0
    4626:	8b a9       	ldd	r24, Y+51	; 0x33
    4628:	9c a9       	ldd	r25, Y+52	; 0x34
    462a:	01 96       	adiw	r24, 0x01	; 1
    462c:	9c ab       	std	Y+52, r25	; 0x34
    462e:	8b ab       	std	Y+51, r24	; 0x33
    4630:	9f a9       	ldd	r25, Y+55	; 0x37
    4632:	91 50       	subi	r25, 0x01	; 1
    4634:	9f ab       	std	Y+55, r25	; 0x37
    4636:	ef a9       	ldd	r30, Y+55	; 0x37
    4638:	ee 23       	and	r30, r30
    463a:	51 f7       	brne	.-44     	; 0x4610 <LCD_VoidHamkoshaCanRun+0x68>
	for(u8 i=LCD_COL_ONE;i<LCD_COL_SIXTEEN;i+=2){
    463c:	81 e0       	ldi	r24, 0x01	; 1
    463e:	8d 8f       	std	Y+29, r24	; 0x1d
    4640:	0c c1       	rjmp	.+536    	; 0x485a <LCD_VoidHamkoshaCanRun+0x2b2>
		LCD_VoidSendCommand(LCD_DisplayClear);
    4642:	81 e0       	ldi	r24, 0x01	; 1
    4644:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
		LCD_VoidSendCommand(LCD_ReturnHome);
    4648:	82 e0       	ldi	r24, 0x02	; 2
    464a:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
		LCD_VoidSendString("I can Run");
    464e:	81 e8       	ldi	r24, 0x81	; 129
    4650:	90 e0       	ldi	r25, 0x00	; 0
    4652:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <LCD_VoidSendString>
		LCD_voidSendSpecialChar(Hamoksha,LCD_ROW_TWO,i,LCD_CGRAM_CHAR1);
    4656:	ce 01       	movw	r24, r28
    4658:	86 96       	adiw	r24, 0x26	; 38
    465a:	62 e0       	ldi	r22, 0x02	; 2
    465c:	4d 8d       	ldd	r20, Y+29	; 0x1d
    465e:	20 e0       	ldi	r18, 0x00	; 0
    4660:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	a0 ea       	ldi	r26, 0xA0	; 160
    466a:	b2 e4       	ldi	r27, 0x42	; 66
    466c:	89 8f       	std	Y+25, r24	; 0x19
    466e:	9a 8f       	std	Y+26, r25	; 0x1a
    4670:	ab 8f       	std	Y+27, r26	; 0x1b
    4672:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4674:	69 8d       	ldd	r22, Y+25	; 0x19
    4676:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4678:	8b 8d       	ldd	r24, Y+27	; 0x1b
    467a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    467c:	20 e0       	ldi	r18, 0x00	; 0
    467e:	30 e0       	ldi	r19, 0x00	; 0
    4680:	4a ef       	ldi	r20, 0xFA	; 250
    4682:	54 e4       	ldi	r21, 0x44	; 68
    4684:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    4688:	dc 01       	movw	r26, r24
    468a:	cb 01       	movw	r24, r22
    468c:	8d 8b       	std	Y+21, r24	; 0x15
    468e:	9e 8b       	std	Y+22, r25	; 0x16
    4690:	af 8b       	std	Y+23, r26	; 0x17
    4692:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4694:	6d 89       	ldd	r22, Y+21	; 0x15
    4696:	7e 89       	ldd	r23, Y+22	; 0x16
    4698:	8f 89       	ldd	r24, Y+23	; 0x17
    469a:	98 8d       	ldd	r25, Y+24	; 0x18
    469c:	20 e0       	ldi	r18, 0x00	; 0
    469e:	30 e0       	ldi	r19, 0x00	; 0
    46a0:	40 e8       	ldi	r20, 0x80	; 128
    46a2:	5f e3       	ldi	r21, 0x3F	; 63
    46a4:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    46a8:	88 23       	and	r24, r24
    46aa:	2c f4       	brge	.+10     	; 0x46b6 <LCD_VoidHamkoshaCanRun+0x10e>
		__ticks = 1;
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	9c 8b       	std	Y+20, r25	; 0x14
    46b2:	8b 8b       	std	Y+19, r24	; 0x13
    46b4:	3f c0       	rjmp	.+126    	; 0x4734 <LCD_VoidHamkoshaCanRun+0x18c>
	else if (__tmp > 65535)
    46b6:	6d 89       	ldd	r22, Y+21	; 0x15
    46b8:	7e 89       	ldd	r23, Y+22	; 0x16
    46ba:	8f 89       	ldd	r24, Y+23	; 0x17
    46bc:	98 8d       	ldd	r25, Y+24	; 0x18
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	3f ef       	ldi	r19, 0xFF	; 255
    46c2:	4f e7       	ldi	r20, 0x7F	; 127
    46c4:	57 e4       	ldi	r21, 0x47	; 71
    46c6:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    46ca:	18 16       	cp	r1, r24
    46cc:	4c f5       	brge	.+82     	; 0x4720 <LCD_VoidHamkoshaCanRun+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46ce:	69 8d       	ldd	r22, Y+25	; 0x19
    46d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    46d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    46d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    46d6:	20 e0       	ldi	r18, 0x00	; 0
    46d8:	30 e0       	ldi	r19, 0x00	; 0
    46da:	40 e2       	ldi	r20, 0x20	; 32
    46dc:	51 e4       	ldi	r21, 0x41	; 65
    46de:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    46e2:	dc 01       	movw	r26, r24
    46e4:	cb 01       	movw	r24, r22
    46e6:	bc 01       	movw	r22, r24
    46e8:	cd 01       	movw	r24, r26
    46ea:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    46ee:	dc 01       	movw	r26, r24
    46f0:	cb 01       	movw	r24, r22
    46f2:	9c 8b       	std	Y+20, r25	; 0x14
    46f4:	8b 8b       	std	Y+19, r24	; 0x13
    46f6:	0f c0       	rjmp	.+30     	; 0x4716 <LCD_VoidHamkoshaCanRun+0x16e>
    46f8:	88 ec       	ldi	r24, 0xC8	; 200
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	9a 8b       	std	Y+18, r25	; 0x12
    46fe:	89 8b       	std	Y+17, r24	; 0x11
    4700:	89 89       	ldd	r24, Y+17	; 0x11
    4702:	9a 89       	ldd	r25, Y+18	; 0x12
    4704:	01 97       	sbiw	r24, 0x01	; 1
    4706:	f1 f7       	brne	.-4      	; 0x4704 <LCD_VoidHamkoshaCanRun+0x15c>
    4708:	9a 8b       	std	Y+18, r25	; 0x12
    470a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    470c:	8b 89       	ldd	r24, Y+19	; 0x13
    470e:	9c 89       	ldd	r25, Y+20	; 0x14
    4710:	01 97       	sbiw	r24, 0x01	; 1
    4712:	9c 8b       	std	Y+20, r25	; 0x14
    4714:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4716:	8b 89       	ldd	r24, Y+19	; 0x13
    4718:	9c 89       	ldd	r25, Y+20	; 0x14
    471a:	00 97       	sbiw	r24, 0x00	; 0
    471c:	69 f7       	brne	.-38     	; 0x46f8 <LCD_VoidHamkoshaCanRun+0x150>
    471e:	14 c0       	rjmp	.+40     	; 0x4748 <LCD_VoidHamkoshaCanRun+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4720:	6d 89       	ldd	r22, Y+21	; 0x15
    4722:	7e 89       	ldd	r23, Y+22	; 0x16
    4724:	8f 89       	ldd	r24, Y+23	; 0x17
    4726:	98 8d       	ldd	r25, Y+24	; 0x18
    4728:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    472c:	dc 01       	movw	r26, r24
    472e:	cb 01       	movw	r24, r22
    4730:	9c 8b       	std	Y+20, r25	; 0x14
    4732:	8b 8b       	std	Y+19, r24	; 0x13
    4734:	8b 89       	ldd	r24, Y+19	; 0x13
    4736:	9c 89       	ldd	r25, Y+20	; 0x14
    4738:	98 8b       	std	Y+16, r25	; 0x10
    473a:	8f 87       	std	Y+15, r24	; 0x0f
    473c:	8f 85       	ldd	r24, Y+15	; 0x0f
    473e:	98 89       	ldd	r25, Y+16	; 0x10
    4740:	01 97       	sbiw	r24, 0x01	; 1
    4742:	f1 f7       	brne	.-4      	; 0x4740 <LCD_VoidHamkoshaCanRun+0x198>
    4744:	98 8b       	std	Y+16, r25	; 0x10
    4746:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(80);
		LCD_VoidSendCommand(LCD_DisplayClear);
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
		LCD_VoidSendCommand(LCD_ReturnHome);
    474e:	82 e0       	ldi	r24, 0x02	; 2
    4750:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
		LCD_VoidSendString("I can Run");
    4754:	81 e8       	ldi	r24, 0x81	; 129
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <LCD_VoidSendString>
		LCD_voidSendSpecialChar(HamokshaRun,LCD_ROW_TWO,i+1,LCD_CGRAM_CHAR2);
    475c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    475e:	28 2f       	mov	r18, r24
    4760:	2f 5f       	subi	r18, 0xFF	; 255
    4762:	ce 01       	movw	r24, r28
    4764:	4e 96       	adiw	r24, 0x1e	; 30
    4766:	62 e0       	ldi	r22, 0x02	; 2
    4768:	42 2f       	mov	r20, r18
    476a:	21 e0       	ldi	r18, 0x01	; 1
    476c:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>
    4770:	80 e0       	ldi	r24, 0x00	; 0
    4772:	90 e0       	ldi	r25, 0x00	; 0
    4774:	a0 ea       	ldi	r26, 0xA0	; 160
    4776:	b2 e4       	ldi	r27, 0x42	; 66
    4778:	8b 87       	std	Y+11, r24	; 0x0b
    477a:	9c 87       	std	Y+12, r25	; 0x0c
    477c:	ad 87       	std	Y+13, r26	; 0x0d
    477e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4780:	6b 85       	ldd	r22, Y+11	; 0x0b
    4782:	7c 85       	ldd	r23, Y+12	; 0x0c
    4784:	8d 85       	ldd	r24, Y+13	; 0x0d
    4786:	9e 85       	ldd	r25, Y+14	; 0x0e
    4788:	20 e0       	ldi	r18, 0x00	; 0
    478a:	30 e0       	ldi	r19, 0x00	; 0
    478c:	4a ef       	ldi	r20, 0xFA	; 250
    478e:	54 e4       	ldi	r21, 0x44	; 68
    4790:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    4794:	dc 01       	movw	r26, r24
    4796:	cb 01       	movw	r24, r22
    4798:	8f 83       	std	Y+7, r24	; 0x07
    479a:	98 87       	std	Y+8, r25	; 0x08
    479c:	a9 87       	std	Y+9, r26	; 0x09
    479e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    47a0:	6f 81       	ldd	r22, Y+7	; 0x07
    47a2:	78 85       	ldd	r23, Y+8	; 0x08
    47a4:	89 85       	ldd	r24, Y+9	; 0x09
    47a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47a8:	20 e0       	ldi	r18, 0x00	; 0
    47aa:	30 e0       	ldi	r19, 0x00	; 0
    47ac:	40 e8       	ldi	r20, 0x80	; 128
    47ae:	5f e3       	ldi	r21, 0x3F	; 63
    47b0:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    47b4:	88 23       	and	r24, r24
    47b6:	2c f4       	brge	.+10     	; 0x47c2 <LCD_VoidHamkoshaCanRun+0x21a>
		__ticks = 1;
    47b8:	81 e0       	ldi	r24, 0x01	; 1
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	9e 83       	std	Y+6, r25	; 0x06
    47be:	8d 83       	std	Y+5, r24	; 0x05
    47c0:	3f c0       	rjmp	.+126    	; 0x4840 <LCD_VoidHamkoshaCanRun+0x298>
	else if (__tmp > 65535)
    47c2:	6f 81       	ldd	r22, Y+7	; 0x07
    47c4:	78 85       	ldd	r23, Y+8	; 0x08
    47c6:	89 85       	ldd	r24, Y+9	; 0x09
    47c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    47ca:	20 e0       	ldi	r18, 0x00	; 0
    47cc:	3f ef       	ldi	r19, 0xFF	; 255
    47ce:	4f e7       	ldi	r20, 0x7F	; 127
    47d0:	57 e4       	ldi	r21, 0x47	; 71
    47d2:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    47d6:	18 16       	cp	r1, r24
    47d8:	4c f5       	brge	.+82     	; 0x482c <LCD_VoidHamkoshaCanRun+0x284>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47da:	6b 85       	ldd	r22, Y+11	; 0x0b
    47dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    47de:	8d 85       	ldd	r24, Y+13	; 0x0d
    47e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    47e2:	20 e0       	ldi	r18, 0x00	; 0
    47e4:	30 e0       	ldi	r19, 0x00	; 0
    47e6:	40 e2       	ldi	r20, 0x20	; 32
    47e8:	51 e4       	ldi	r21, 0x41	; 65
    47ea:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    47ee:	dc 01       	movw	r26, r24
    47f0:	cb 01       	movw	r24, r22
    47f2:	bc 01       	movw	r22, r24
    47f4:	cd 01       	movw	r24, r26
    47f6:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    47fa:	dc 01       	movw	r26, r24
    47fc:	cb 01       	movw	r24, r22
    47fe:	9e 83       	std	Y+6, r25	; 0x06
    4800:	8d 83       	std	Y+5, r24	; 0x05
    4802:	0f c0       	rjmp	.+30     	; 0x4822 <LCD_VoidHamkoshaCanRun+0x27a>
    4804:	88 ec       	ldi	r24, 0xC8	; 200
    4806:	90 e0       	ldi	r25, 0x00	; 0
    4808:	9c 83       	std	Y+4, r25	; 0x04
    480a:	8b 83       	std	Y+3, r24	; 0x03
    480c:	8b 81       	ldd	r24, Y+3	; 0x03
    480e:	9c 81       	ldd	r25, Y+4	; 0x04
    4810:	01 97       	sbiw	r24, 0x01	; 1
    4812:	f1 f7       	brne	.-4      	; 0x4810 <LCD_VoidHamkoshaCanRun+0x268>
    4814:	9c 83       	std	Y+4, r25	; 0x04
    4816:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4818:	8d 81       	ldd	r24, Y+5	; 0x05
    481a:	9e 81       	ldd	r25, Y+6	; 0x06
    481c:	01 97       	sbiw	r24, 0x01	; 1
    481e:	9e 83       	std	Y+6, r25	; 0x06
    4820:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4822:	8d 81       	ldd	r24, Y+5	; 0x05
    4824:	9e 81       	ldd	r25, Y+6	; 0x06
    4826:	00 97       	sbiw	r24, 0x00	; 0
    4828:	69 f7       	brne	.-38     	; 0x4804 <LCD_VoidHamkoshaCanRun+0x25c>
    482a:	14 c0       	rjmp	.+40     	; 0x4854 <LCD_VoidHamkoshaCanRun+0x2ac>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    482c:	6f 81       	ldd	r22, Y+7	; 0x07
    482e:	78 85       	ldd	r23, Y+8	; 0x08
    4830:	89 85       	ldd	r24, Y+9	; 0x09
    4832:	9a 85       	ldd	r25, Y+10	; 0x0a
    4834:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4838:	dc 01       	movw	r26, r24
    483a:	cb 01       	movw	r24, r22
    483c:	9e 83       	std	Y+6, r25	; 0x06
    483e:	8d 83       	std	Y+5, r24	; 0x05
    4840:	8d 81       	ldd	r24, Y+5	; 0x05
    4842:	9e 81       	ldd	r25, Y+6	; 0x06
    4844:	9a 83       	std	Y+2, r25	; 0x02
    4846:	89 83       	std	Y+1, r24	; 0x01
    4848:	89 81       	ldd	r24, Y+1	; 0x01
    484a:	9a 81       	ldd	r25, Y+2	; 0x02
    484c:	01 97       	sbiw	r24, 0x01	; 1
    484e:	f1 f7       	brne	.-4      	; 0x484c <LCD_VoidHamkoshaCanRun+0x2a4>
    4850:	9a 83       	std	Y+2, r25	; 0x02
    4852:	89 83       	std	Y+1, r24	; 0x01


void LCD_VoidHamkoshaCanRun(void){
	u8 HamokshaRun[8]={0B00000,0B00100,0B01010,0B01010,0B00110,0B00100,0B01110,0B00000};
	u8 Hamoksha[8]={0B00000,0B00100,0B01010,0B01010,0B00100,0B01110,0B00100,0B01010};
	for(u8 i=LCD_COL_ONE;i<LCD_COL_SIXTEEN;i+=2){
    4854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4856:	8e 5f       	subi	r24, 0xFE	; 254
    4858:	8d 8f       	std	Y+29, r24	; 0x1d
    485a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    485c:	80 31       	cpi	r24, 0x10	; 16
    485e:	08 f4       	brcc	.+2      	; 0x4862 <LCD_VoidHamkoshaCanRun+0x2ba>
    4860:	f0 ce       	rjmp	.-544    	; 0x4642 <LCD_VoidHamkoshaCanRun+0x9a>
		LCD_VoidSendString("I can Run");
		LCD_voidSendSpecialChar(HamokshaRun,LCD_ROW_TWO,i+1,LCD_CGRAM_CHAR2);
		_delay_ms(80);

	}
}
    4862:	e7 96       	adiw	r28, 0x37	; 55
    4864:	0f b6       	in	r0, 0x3f	; 63
    4866:	f8 94       	cli
    4868:	de bf       	out	0x3e, r29	; 62
    486a:	0f be       	out	0x3f, r0	; 63
    486c:	cd bf       	out	0x3d, r28	; 61
    486e:	cf 91       	pop	r28
    4870:	df 91       	pop	r29
    4872:	08 95       	ret

00004874 <LCD_VoidDontKillHamoksha>:

void LCD_VoidDontKillHamoksha(void){
    4874:	df 93       	push	r29
    4876:	cf 93       	push	r28
    4878:	cd b7       	in	r28, 0x3d	; 61
    487a:	de b7       	in	r29, 0x3e	; 62
    487c:	e9 97       	sbiw	r28, 0x39	; 57
    487e:	0f b6       	in	r0, 0x3f	; 63
    4880:	f8 94       	cli
    4882:	de bf       	out	0x3e, r29	; 62
    4884:	0f be       	out	0x3f, r0	; 63
    4886:	cd bf       	out	0x3d, r28	; 61
	u8 Hamoksha[8]={0B00000,0B00100,0B01010,0B01010,0B00100,0B01110,0B00100,0B01010};
    4888:	ce 01       	movw	r24, r28
    488a:	40 96       	adiw	r24, 0x10	; 16
    488c:	99 ab       	std	Y+49, r25	; 0x31
    488e:	88 ab       	std	Y+48, r24	; 0x30
    4890:	af e5       	ldi	r26, 0x5F	; 95
    4892:	b2 e0       	ldi	r27, 0x02	; 2
    4894:	bb ab       	std	Y+51, r27	; 0x33
    4896:	aa ab       	std	Y+50, r26	; 0x32
    4898:	b8 e0       	ldi	r27, 0x08	; 8
    489a:	bc ab       	std	Y+52, r27	; 0x34
    489c:	ea a9       	ldd	r30, Y+50	; 0x32
    489e:	fb a9       	ldd	r31, Y+51	; 0x33
    48a0:	00 80       	ld	r0, Z
    48a2:	8a a9       	ldd	r24, Y+50	; 0x32
    48a4:	9b a9       	ldd	r25, Y+51	; 0x33
    48a6:	01 96       	adiw	r24, 0x01	; 1
    48a8:	9b ab       	std	Y+51, r25	; 0x33
    48aa:	8a ab       	std	Y+50, r24	; 0x32
    48ac:	a8 a9       	ldd	r26, Y+48	; 0x30
    48ae:	b9 a9       	ldd	r27, Y+49	; 0x31
    48b0:	0c 92       	st	X, r0
    48b2:	e8 a9       	ldd	r30, Y+48	; 0x30
    48b4:	f9 a9       	ldd	r31, Y+49	; 0x31
    48b6:	31 96       	adiw	r30, 0x01	; 1
    48b8:	f9 ab       	std	Y+49, r31	; 0x31
    48ba:	e8 ab       	std	Y+48, r30	; 0x30
    48bc:	fc a9       	ldd	r31, Y+52	; 0x34
    48be:	f1 50       	subi	r31, 0x01	; 1
    48c0:	fc ab       	std	Y+52, r31	; 0x34
    48c2:	8c a9       	ldd	r24, Y+52	; 0x34
    48c4:	88 23       	and	r24, r24
    48c6:	51 f7       	brne	.-44     	; 0x489c <LCD_VoidDontKillHamoksha+0x28>
	u8 Gun[8]={0B00000,0B00000,0B00111,0B00100,0B00100,0B00100,0B00000,0B00000};
    48c8:	de 01       	movw	r26, r28
    48ca:	58 96       	adiw	r26, 0x18	; 24
    48cc:	be ab       	std	Y+54, r27	; 0x36
    48ce:	ad ab       	std	Y+53, r26	; 0x35
    48d0:	e7 e5       	ldi	r30, 0x57	; 87
    48d2:	f2 e0       	ldi	r31, 0x02	; 2
    48d4:	f8 af       	std	Y+56, r31	; 0x38
    48d6:	ef ab       	std	Y+55, r30	; 0x37
    48d8:	f8 e0       	ldi	r31, 0x08	; 8
    48da:	f9 af       	std	Y+57, r31	; 0x39
    48dc:	af a9       	ldd	r26, Y+55	; 0x37
    48de:	b8 ad       	ldd	r27, Y+56	; 0x38
    48e0:	0c 90       	ld	r0, X
    48e2:	ef a9       	ldd	r30, Y+55	; 0x37
    48e4:	f8 ad       	ldd	r31, Y+56	; 0x38
    48e6:	31 96       	adiw	r30, 0x01	; 1
    48e8:	f8 af       	std	Y+56, r31	; 0x38
    48ea:	ef ab       	std	Y+55, r30	; 0x37
    48ec:	ad a9       	ldd	r26, Y+53	; 0x35
    48ee:	be a9       	ldd	r27, Y+54	; 0x36
    48f0:	0c 92       	st	X, r0
    48f2:	ed a9       	ldd	r30, Y+53	; 0x35
    48f4:	fe a9       	ldd	r31, Y+54	; 0x36
    48f6:	31 96       	adiw	r30, 0x01	; 1
    48f8:	fe ab       	std	Y+54, r31	; 0x36
    48fa:	ed ab       	std	Y+53, r30	; 0x35
    48fc:	f9 ad       	ldd	r31, Y+57	; 0x39
    48fe:	f1 50       	subi	r31, 0x01	; 1
    4900:	f9 af       	std	Y+57, r31	; 0x39
    4902:	89 ad       	ldd	r24, Y+57	; 0x39
    4904:	88 23       	and	r24, r24
    4906:	51 f7       	brne	.-44     	; 0x48dc <LCD_VoidDontKillHamoksha+0x68>
	u8 Bullet[8]={0B00000,0B00000,0B00100,0B00000,0B00000,0B00000,0B00000,0B00000};
    4908:	88 e0       	ldi	r24, 0x08	; 8
    490a:	fe 01       	movw	r30, r28
    490c:	b0 96       	adiw	r30, 0x20	; 32
    490e:	df 01       	movw	r26, r30
    4910:	98 2f       	mov	r25, r24
    4912:	1d 92       	st	X+, r1
    4914:	9a 95       	dec	r25
    4916:	e9 f7       	brne	.-6      	; 0x4912 <LCD_VoidDontKillHamoksha+0x9e>
    4918:	84 e0       	ldi	r24, 0x04	; 4
    491a:	8a a3       	std	Y+34, r24	; 0x22
	u8 DeadHamoksha[8]={0B00000,0B00000,0B00000,0B00000,0B00000,0B00000,0B00000,0B11111};
    491c:	88 e0       	ldi	r24, 0x08	; 8
    491e:	fe 01       	movw	r30, r28
    4920:	b8 96       	adiw	r30, 0x28	; 40
    4922:	df 01       	movw	r26, r30
    4924:	98 2f       	mov	r25, r24
    4926:	1d 92       	st	X+, r1
    4928:	9a 95       	dec	r25
    492a:	e9 f7       	brne	.-6      	; 0x4926 <LCD_VoidDontKillHamoksha+0xb2>
    492c:	8f e1       	ldi	r24, 0x1F	; 31
    492e:	8f a7       	std	Y+47, r24	; 0x2f
	//	LCD_VoidSendString("Don't Kill ME ");
	//	LCD_voidSendSpecialChar(Hamoksha,LCD_ROW_TWO,LCD_COL_SIXTEEN,LCD_CGRAM_CHAR1);
	//	LCD_voidSendSpecialChar(Gun,LCD_ROW_TWO,LCD_COL_ONE,LCD_CGRAM_CHAR2);
	//	LCD_voidSendSpecialChar(Bullet,LCD_ROW_TWO,LCD_COL_TWO,LCD_CGRAM_CHAR3);

	for(u8 i=LCD_COL_ONE;i<LCD_COL_SIXTEEN;i+=2){
    4930:	81 e0       	ldi	r24, 0x01	; 1
    4932:	8f 87       	std	Y+15, r24	; 0x0f
    4934:	94 c0       	rjmp	.+296    	; 0x4a5e <LCD_VoidDontKillHamoksha+0x1ea>
		LCD_VoidSendCommand(LCD_ReturnHome);
    4936:	82 e0       	ldi	r24, 0x02	; 2
    4938:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
		LCD_VoidSendCommand(LCD_DisplayClear);
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
		LCD_VoidSendString("Don't Kill ME ");
    4942:	8b e8       	ldi	r24, 0x8B	; 139
    4944:	90 e0       	ldi	r25, 0x00	; 0
    4946:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <LCD_VoidSendString>
		LCD_voidSendSpecialChar(Hamoksha,LCD_ROW_TWO,LCD_COL_SIXTEEN,LCD_CGRAM_CHAR1);
    494a:	ce 01       	movw	r24, r28
    494c:	40 96       	adiw	r24, 0x10	; 16
    494e:	62 e0       	ldi	r22, 0x02	; 2
    4950:	40 e1       	ldi	r20, 0x10	; 16
    4952:	20 e0       	ldi	r18, 0x00	; 0
    4954:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>
		LCD_voidSendSpecialChar(Gun,LCD_ROW_TWO,LCD_COL_ONE,LCD_CGRAM_CHAR2);
    4958:	ce 01       	movw	r24, r28
    495a:	48 96       	adiw	r24, 0x18	; 24
    495c:	62 e0       	ldi	r22, 0x02	; 2
    495e:	41 e0       	ldi	r20, 0x01	; 1
    4960:	21 e0       	ldi	r18, 0x01	; 1
    4962:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>
		LCD_voidSendSpecialChar(Bullet,LCD_ROW_TWO,i,LCD_CGRAM_CHAR3);
    4966:	ce 01       	movw	r24, r28
    4968:	80 96       	adiw	r24, 0x20	; 32
    496a:	62 e0       	ldi	r22, 0x02	; 2
    496c:	4f 85       	ldd	r20, Y+15	; 0x0f
    496e:	22 e0       	ldi	r18, 0x02	; 2
    4970:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>
    4974:	80 e0       	ldi	r24, 0x00	; 0
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	a0 ea       	ldi	r26, 0xA0	; 160
    497a:	b2 e4       	ldi	r27, 0x42	; 66
    497c:	8b 87       	std	Y+11, r24	; 0x0b
    497e:	9c 87       	std	Y+12, r25	; 0x0c
    4980:	ad 87       	std	Y+13, r26	; 0x0d
    4982:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4984:	6b 85       	ldd	r22, Y+11	; 0x0b
    4986:	7c 85       	ldd	r23, Y+12	; 0x0c
    4988:	8d 85       	ldd	r24, Y+13	; 0x0d
    498a:	9e 85       	ldd	r25, Y+14	; 0x0e
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	4a ef       	ldi	r20, 0xFA	; 250
    4992:	54 e4       	ldi	r21, 0x44	; 68
    4994:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	8f 83       	std	Y+7, r24	; 0x07
    499e:	98 87       	std	Y+8, r25	; 0x08
    49a0:	a9 87       	std	Y+9, r26	; 0x09
    49a2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    49a4:	6f 81       	ldd	r22, Y+7	; 0x07
    49a6:	78 85       	ldd	r23, Y+8	; 0x08
    49a8:	89 85       	ldd	r24, Y+9	; 0x09
    49aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ac:	20 e0       	ldi	r18, 0x00	; 0
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	40 e8       	ldi	r20, 0x80	; 128
    49b2:	5f e3       	ldi	r21, 0x3F	; 63
    49b4:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    49b8:	88 23       	and	r24, r24
    49ba:	2c f4       	brge	.+10     	; 0x49c6 <LCD_VoidDontKillHamoksha+0x152>
		__ticks = 1;
    49bc:	81 e0       	ldi	r24, 0x01	; 1
    49be:	90 e0       	ldi	r25, 0x00	; 0
    49c0:	9e 83       	std	Y+6, r25	; 0x06
    49c2:	8d 83       	std	Y+5, r24	; 0x05
    49c4:	3f c0       	rjmp	.+126    	; 0x4a44 <LCD_VoidDontKillHamoksha+0x1d0>
	else if (__tmp > 65535)
    49c6:	6f 81       	ldd	r22, Y+7	; 0x07
    49c8:	78 85       	ldd	r23, Y+8	; 0x08
    49ca:	89 85       	ldd	r24, Y+9	; 0x09
    49cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    49ce:	20 e0       	ldi	r18, 0x00	; 0
    49d0:	3f ef       	ldi	r19, 0xFF	; 255
    49d2:	4f e7       	ldi	r20, 0x7F	; 127
    49d4:	57 e4       	ldi	r21, 0x47	; 71
    49d6:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    49da:	18 16       	cp	r1, r24
    49dc:	4c f5       	brge	.+82     	; 0x4a30 <LCD_VoidDontKillHamoksha+0x1bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49de:	6b 85       	ldd	r22, Y+11	; 0x0b
    49e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    49e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    49e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    49e6:	20 e0       	ldi	r18, 0x00	; 0
    49e8:	30 e0       	ldi	r19, 0x00	; 0
    49ea:	40 e2       	ldi	r20, 0x20	; 32
    49ec:	51 e4       	ldi	r21, 0x41	; 65
    49ee:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    49f2:	dc 01       	movw	r26, r24
    49f4:	cb 01       	movw	r24, r22
    49f6:	bc 01       	movw	r22, r24
    49f8:	cd 01       	movw	r24, r26
    49fa:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	9e 83       	std	Y+6, r25	; 0x06
    4a04:	8d 83       	std	Y+5, r24	; 0x05
    4a06:	0f c0       	rjmp	.+30     	; 0x4a26 <LCD_VoidDontKillHamoksha+0x1b2>
    4a08:	88 ec       	ldi	r24, 0xC8	; 200
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	9c 83       	std	Y+4, r25	; 0x04
    4a0e:	8b 83       	std	Y+3, r24	; 0x03
    4a10:	8b 81       	ldd	r24, Y+3	; 0x03
    4a12:	9c 81       	ldd	r25, Y+4	; 0x04
    4a14:	01 97       	sbiw	r24, 0x01	; 1
    4a16:	f1 f7       	brne	.-4      	; 0x4a14 <LCD_VoidDontKillHamoksha+0x1a0>
    4a18:	9c 83       	std	Y+4, r25	; 0x04
    4a1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    4a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    4a20:	01 97       	sbiw	r24, 0x01	; 1
    4a22:	9e 83       	std	Y+6, r25	; 0x06
    4a24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a26:	8d 81       	ldd	r24, Y+5	; 0x05
    4a28:	9e 81       	ldd	r25, Y+6	; 0x06
    4a2a:	00 97       	sbiw	r24, 0x00	; 0
    4a2c:	69 f7       	brne	.-38     	; 0x4a08 <LCD_VoidDontKillHamoksha+0x194>
    4a2e:	14 c0       	rjmp	.+40     	; 0x4a58 <LCD_VoidDontKillHamoksha+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a30:	6f 81       	ldd	r22, Y+7	; 0x07
    4a32:	78 85       	ldd	r23, Y+8	; 0x08
    4a34:	89 85       	ldd	r24, Y+9	; 0x09
    4a36:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a38:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4a3c:	dc 01       	movw	r26, r24
    4a3e:	cb 01       	movw	r24, r22
    4a40:	9e 83       	std	Y+6, r25	; 0x06
    4a42:	8d 83       	std	Y+5, r24	; 0x05
    4a44:	8d 81       	ldd	r24, Y+5	; 0x05
    4a46:	9e 81       	ldd	r25, Y+6	; 0x06
    4a48:	9a 83       	std	Y+2, r25	; 0x02
    4a4a:	89 83       	std	Y+1, r24	; 0x01
    4a4c:	89 81       	ldd	r24, Y+1	; 0x01
    4a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4a50:	01 97       	sbiw	r24, 0x01	; 1
    4a52:	f1 f7       	brne	.-4      	; 0x4a50 <LCD_VoidDontKillHamoksha+0x1dc>
    4a54:	9a 83       	std	Y+2, r25	; 0x02
    4a56:	89 83       	std	Y+1, r24	; 0x01
	//	LCD_VoidSendString("Don't Kill ME ");
	//	LCD_voidSendSpecialChar(Hamoksha,LCD_ROW_TWO,LCD_COL_SIXTEEN,LCD_CGRAM_CHAR1);
	//	LCD_voidSendSpecialChar(Gun,LCD_ROW_TWO,LCD_COL_ONE,LCD_CGRAM_CHAR2);
	//	LCD_voidSendSpecialChar(Bullet,LCD_ROW_TWO,LCD_COL_TWO,LCD_CGRAM_CHAR3);

	for(u8 i=LCD_COL_ONE;i<LCD_COL_SIXTEEN;i+=2){
    4a58:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a5a:	8e 5f       	subi	r24, 0xFE	; 254
    4a5c:	8f 87       	std	Y+15, r24	; 0x0f
    4a5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4a60:	80 31       	cpi	r24, 0x10	; 16
    4a62:	08 f4       	brcc	.+2      	; 0x4a66 <LCD_VoidDontKillHamoksha+0x1f2>
    4a64:	68 cf       	rjmp	.-304    	; 0x4936 <LCD_VoidDontKillHamoksha+0xc2>
		LCD_voidSendSpecialChar(Bullet,LCD_ROW_TWO,i,LCD_CGRAM_CHAR3);
		_delay_ms(80);


	}
	LCD_VoidSendCommand(LCD_ReturnHome);
    4a66:	82 e0       	ldi	r24, 0x02	; 2
    4a68:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
	LCD_VoidSendCommand(LCD_DisplayClear);
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LCD_VoidSendCommand>
	LCD_VoidSendString("Don't Kill ME ");
    4a72:	8b e8       	ldi	r24, 0x8B	; 139
    4a74:	90 e0       	ldi	r25, 0x00	; 0
    4a76:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <LCD_VoidSendString>
	LCD_voidSendSpecialChar(Gun,LCD_ROW_TWO,LCD_COL_ONE,LCD_CGRAM_CHAR2);
    4a7a:	ce 01       	movw	r24, r28
    4a7c:	48 96       	adiw	r24, 0x18	; 24
    4a7e:	62 e0       	ldi	r22, 0x02	; 2
    4a80:	41 e0       	ldi	r20, 0x01	; 1
    4a82:	21 e0       	ldi	r18, 0x01	; 1
    4a84:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>
//	LCD_voidSendSpecialChar(Bullet,LCD_ROW_TWO,LCD_COL_SIXTEEN,LCD_CGRAM_CHAR3);
	LCD_voidSendSpecialChar(DeadHamoksha,LCD_ROW_TWO,LCD_COL_SIXTEEN,LCD_CGRAM_CHAR4);
    4a88:	ce 01       	movw	r24, r28
    4a8a:	88 96       	adiw	r24, 0x28	; 40
    4a8c:	62 e0       	ldi	r22, 0x02	; 2
    4a8e:	40 e1       	ldi	r20, 0x10	; 16
    4a90:	23 e0       	ldi	r18, 0x03	; 3
    4a92:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <LCD_voidSendSpecialChar>

}
    4a96:	e9 96       	adiw	r28, 0x39	; 57
    4a98:	0f b6       	in	r0, 0x3f	; 63
    4a9a:	f8 94       	cli
    4a9c:	de bf       	out	0x3e, r29	; 62
    4a9e:	0f be       	out	0x3f, r0	; 63
    4aa0:	cd bf       	out	0x3d, r28	; 61
    4aa2:	cf 91       	pop	r28
    4aa4:	df 91       	pop	r29
    4aa6:	08 95       	ret

00004aa8 <EEPROM_VoidInit>:
#include "EEPROM_Interface.h"




void EEPROM_VoidInit(void){
    4aa8:	df 93       	push	r29
    4aaa:	cf 93       	push	r28
    4aac:	cd b7       	in	r28, 0x3d	; 61
    4aae:	de b7       	in	r29, 0x3e	; 62
	I2C_voidMasterInit();
    4ab0:	0e 94 6e 13 	call	0x26dc	; 0x26dc <I2C_voidMasterInit>
}
    4ab4:	cf 91       	pop	r28
    4ab6:	df 91       	pop	r29
    4ab8:	08 95       	ret

00004aba <EEPROM_VoidSendDataByte>:
u8  EEPROM_VoidSendDataByte(u16 Copy_u16address,u8 Copy_u8Data){
    4aba:	df 93       	push	r29
    4abc:	cf 93       	push	r28
    4abe:	cd b7       	in	r28, 0x3d	; 61
    4ac0:	de b7       	in	r29, 0x3e	; 62
    4ac2:	62 97       	sbiw	r28, 0x12	; 18
    4ac4:	0f b6       	in	r0, 0x3f	; 63
    4ac6:	f8 94       	cli
    4ac8:	de bf       	out	0x3e, r29	; 62
    4aca:	0f be       	out	0x3f, r0	; 63
    4acc:	cd bf       	out	0x3d, r28	; 61
    4ace:	99 8b       	std	Y+17, r25	; 0x11
    4ad0:	88 8b       	std	Y+16, r24	; 0x10
    4ad2:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_ErrorState=NoError;
    4ad4:	1f 86       	std	Y+15, r1	; 0x0f
	Local_ErrorState=I2C_SendStartCondition();
    4ad6:	0e 94 95 13 	call	0x272a	; 0x272a <I2C_SendStartCondition>
    4ada:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_ErrorState==NoError){
    4adc:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ade:	88 23       	and	r24, r24
    4ae0:	09 f0       	breq	.+2      	; 0x4ae4 <EEPROM_VoidSendDataByte+0x2a>
    4ae2:	91 c0       	rjmp	.+290    	; 0x4c06 <EEPROM_VoidSendDataByte+0x14c>
		Local_ErrorState=I2C_SendSlaveAddressWithWrite(EEPROM_FIXED_ADDRESS | EEPROM_A2_VALUE | ((u8)((Copy_u16address>>8)&EEPROM_8K_ADDRESS_MASK)));
    4ae4:	88 89       	ldd	r24, Y+16	; 0x10
    4ae6:	99 89       	ldd	r25, Y+17	; 0x11
    4ae8:	89 2f       	mov	r24, r25
    4aea:	99 27       	eor	r25, r25
    4aec:	83 70       	andi	r24, 0x03	; 3
    4aee:	80 65       	ori	r24, 0x50	; 80
    4af0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <I2C_SendSlaveAddressWithWrite>
    4af4:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_ErrorState==NoError){
    4af6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4af8:	88 23       	and	r24, r24
    4afa:	09 f0       	breq	.+2      	; 0x4afe <EEPROM_VoidSendDataByte+0x44>
    4afc:	84 c0       	rjmp	.+264    	; 0x4c06 <EEPROM_VoidSendDataByte+0x14c>
			Local_ErrorState=I2C_MstrSendDataByte((u8)Copy_u16address);
    4afe:	88 89       	ldd	r24, Y+16	; 0x10
    4b00:	0e 94 6d 14 	call	0x28da	; 0x28da <I2C_MstrSendDataByte>
    4b04:	8f 87       	std	Y+15, r24	; 0x0f
			if(Local_ErrorState==NoError){
    4b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b08:	88 23       	and	r24, r24
    4b0a:	09 f0       	breq	.+2      	; 0x4b0e <EEPROM_VoidSendDataByte+0x54>
    4b0c:	7c c0       	rjmp	.+248    	; 0x4c06 <EEPROM_VoidSendDataByte+0x14c>
				Local_ErrorState=I2C_MstrSendDataByte(Copy_u8Data);
    4b0e:	8a 89       	ldd	r24, Y+18	; 0x12
    4b10:	0e 94 6d 14 	call	0x28da	; 0x28da <I2C_MstrSendDataByte>
    4b14:	8f 87       	std	Y+15, r24	; 0x0f
				if(Local_ErrorState==NoError){
    4b16:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b18:	88 23       	and	r24, r24
    4b1a:	09 f0       	breq	.+2      	; 0x4b1e <EEPROM_VoidSendDataByte+0x64>
    4b1c:	74 c0       	rjmp	.+232    	; 0x4c06 <EEPROM_VoidSendDataByte+0x14c>
					I2C_SendStopCondition();
    4b1e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <I2C_SendStopCondition>
    4b22:	80 e0       	ldi	r24, 0x00	; 0
    4b24:	90 e0       	ldi	r25, 0x00	; 0
    4b26:	a0 e7       	ldi	r26, 0x70	; 112
    4b28:	b1 e4       	ldi	r27, 0x41	; 65
    4b2a:	8b 87       	std	Y+11, r24	; 0x0b
    4b2c:	9c 87       	std	Y+12, r25	; 0x0c
    4b2e:	ad 87       	std	Y+13, r26	; 0x0d
    4b30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b32:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b34:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b36:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b38:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b3a:	20 e0       	ldi	r18, 0x00	; 0
    4b3c:	30 e0       	ldi	r19, 0x00	; 0
    4b3e:	4a ef       	ldi	r20, 0xFA	; 250
    4b40:	54 e4       	ldi	r21, 0x44	; 68
    4b42:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    4b46:	dc 01       	movw	r26, r24
    4b48:	cb 01       	movw	r24, r22
    4b4a:	8f 83       	std	Y+7, r24	; 0x07
    4b4c:	98 87       	std	Y+8, r25	; 0x08
    4b4e:	a9 87       	std	Y+9, r26	; 0x09
    4b50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4b52:	6f 81       	ldd	r22, Y+7	; 0x07
    4b54:	78 85       	ldd	r23, Y+8	; 0x08
    4b56:	89 85       	ldd	r24, Y+9	; 0x09
    4b58:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b5a:	20 e0       	ldi	r18, 0x00	; 0
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	40 e8       	ldi	r20, 0x80	; 128
    4b60:	5f e3       	ldi	r21, 0x3F	; 63
    4b62:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    4b66:	88 23       	and	r24, r24
    4b68:	2c f4       	brge	.+10     	; 0x4b74 <EEPROM_VoidSendDataByte+0xba>
		__ticks = 1;
    4b6a:	81 e0       	ldi	r24, 0x01	; 1
    4b6c:	90 e0       	ldi	r25, 0x00	; 0
    4b6e:	9e 83       	std	Y+6, r25	; 0x06
    4b70:	8d 83       	std	Y+5, r24	; 0x05
    4b72:	3f c0       	rjmp	.+126    	; 0x4bf2 <EEPROM_VoidSendDataByte+0x138>
	else if (__tmp > 65535)
    4b74:	6f 81       	ldd	r22, Y+7	; 0x07
    4b76:	78 85       	ldd	r23, Y+8	; 0x08
    4b78:	89 85       	ldd	r24, Y+9	; 0x09
    4b7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b7c:	20 e0       	ldi	r18, 0x00	; 0
    4b7e:	3f ef       	ldi	r19, 0xFF	; 255
    4b80:	4f e7       	ldi	r20, 0x7F	; 127
    4b82:	57 e4       	ldi	r21, 0x47	; 71
    4b84:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    4b88:	18 16       	cp	r1, r24
    4b8a:	4c f5       	brge	.+82     	; 0x4bde <EEPROM_VoidSendDataByte+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    4b8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4b90:	8d 85       	ldd	r24, Y+13	; 0x0d
    4b92:	9e 85       	ldd	r25, Y+14	; 0x0e
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	40 e2       	ldi	r20, 0x20	; 32
    4b9a:	51 e4       	ldi	r21, 0x41	; 65
    4b9c:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    4ba0:	dc 01       	movw	r26, r24
    4ba2:	cb 01       	movw	r24, r22
    4ba4:	bc 01       	movw	r22, r24
    4ba6:	cd 01       	movw	r24, r26
    4ba8:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4bac:	dc 01       	movw	r26, r24
    4bae:	cb 01       	movw	r24, r22
    4bb0:	9e 83       	std	Y+6, r25	; 0x06
    4bb2:	8d 83       	std	Y+5, r24	; 0x05
    4bb4:	0f c0       	rjmp	.+30     	; 0x4bd4 <EEPROM_VoidSendDataByte+0x11a>
    4bb6:	88 ec       	ldi	r24, 0xC8	; 200
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	9c 83       	std	Y+4, r25	; 0x04
    4bbc:	8b 83       	std	Y+3, r24	; 0x03
    4bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    4bc2:	01 97       	sbiw	r24, 0x01	; 1
    4bc4:	f1 f7       	brne	.-4      	; 0x4bc2 <EEPROM_VoidSendDataByte+0x108>
    4bc6:	9c 83       	std	Y+4, r25	; 0x04
    4bc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4bca:	8d 81       	ldd	r24, Y+5	; 0x05
    4bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bce:	01 97       	sbiw	r24, 0x01	; 1
    4bd0:	9e 83       	std	Y+6, r25	; 0x06
    4bd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bd8:	00 97       	sbiw	r24, 0x00	; 0
    4bda:	69 f7       	brne	.-38     	; 0x4bb6 <EEPROM_VoidSendDataByte+0xfc>
    4bdc:	14 c0       	rjmp	.+40     	; 0x4c06 <EEPROM_VoidSendDataByte+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bde:	6f 81       	ldd	r22, Y+7	; 0x07
    4be0:	78 85       	ldd	r23, Y+8	; 0x08
    4be2:	89 85       	ldd	r24, Y+9	; 0x09
    4be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    4be6:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4bea:	dc 01       	movw	r26, r24
    4bec:	cb 01       	movw	r24, r22
    4bee:	9e 83       	std	Y+6, r25	; 0x06
    4bf0:	8d 83       	std	Y+5, r24	; 0x05
    4bf2:	8d 81       	ldd	r24, Y+5	; 0x05
    4bf4:	9e 81       	ldd	r25, Y+6	; 0x06
    4bf6:	9a 83       	std	Y+2, r25	; 0x02
    4bf8:	89 83       	std	Y+1, r24	; 0x01
    4bfa:	89 81       	ldd	r24, Y+1	; 0x01
    4bfc:	9a 81       	ldd	r25, Y+2	; 0x02
    4bfe:	01 97       	sbiw	r24, 0x01	; 1
    4c00:	f1 f7       	brne	.-4      	; 0x4bfe <EEPROM_VoidSendDataByte+0x144>
    4c02:	9a 83       	std	Y+2, r25	; 0x02
    4c04:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{

	}
	return Local_ErrorState;
    4c06:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4c08:	62 96       	adiw	r28, 0x12	; 18
    4c0a:	0f b6       	in	r0, 0x3f	; 63
    4c0c:	f8 94       	cli
    4c0e:	de bf       	out	0x3e, r29	; 62
    4c10:	0f be       	out	0x3f, r0	; 63
    4c12:	cd bf       	out	0x3d, r28	; 61
    4c14:	cf 91       	pop	r28
    4c16:	df 91       	pop	r29
    4c18:	08 95       	ret

00004c1a <EEPROM_VoidReadDataByteOnly>:



u8  EEPROM_VoidReadDataByteOnly(u16 Copy_u16address,pstring Copy_pu8Data){
    4c1a:	df 93       	push	r29
    4c1c:	cf 93       	push	r28
    4c1e:	cd b7       	in	r28, 0x3d	; 61
    4c20:	de b7       	in	r29, 0x3e	; 62
    4c22:	63 97       	sbiw	r28, 0x13	; 19
    4c24:	0f b6       	in	r0, 0x3f	; 63
    4c26:	f8 94       	cli
    4c28:	de bf       	out	0x3e, r29	; 62
    4c2a:	0f be       	out	0x3f, r0	; 63
    4c2c:	cd bf       	out	0x3d, r28	; 61
    4c2e:	99 8b       	std	Y+17, r25	; 0x11
    4c30:	88 8b       	std	Y+16, r24	; 0x10
    4c32:	7b 8b       	std	Y+19, r23	; 0x13
    4c34:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_ErrorState=NoError;
    4c36:	1f 86       	std	Y+15, r1	; 0x0f
	Local_ErrorState=I2C_SendStartCondition();
    4c38:	0e 94 95 13 	call	0x272a	; 0x272a <I2C_SendStartCondition>
    4c3c:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_ErrorState==NoError){
    4c3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c40:	88 23       	and	r24, r24
    4c42:	09 f0       	breq	.+2      	; 0x4c46 <EEPROM_VoidReadDataByteOnly+0x2c>
    4c44:	a9 c0       	rjmp	.+338    	; 0x4d98 <EEPROM_VoidReadDataByteOnly+0x17e>
	Local_ErrorState=I2C_SendSlaveAddressWithWrite(EEPROM_FIXED_ADDRESS | EEPROM_A2_VALUE | ((u8)((Copy_u16address>>8)&EEPROM_8K_ADDRESS_MASK)));
    4c46:	88 89       	ldd	r24, Y+16	; 0x10
    4c48:	99 89       	ldd	r25, Y+17	; 0x11
    4c4a:	89 2f       	mov	r24, r25
    4c4c:	99 27       	eor	r25, r25
    4c4e:	83 70       	andi	r24, 0x03	; 3
    4c50:	80 65       	ori	r24, 0x50	; 80
    4c52:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <I2C_SendSlaveAddressWithWrite>
    4c56:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_ErrorState==NoError){
    4c58:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c5a:	88 23       	and	r24, r24
    4c5c:	09 f0       	breq	.+2      	; 0x4c60 <EEPROM_VoidReadDataByteOnly+0x46>
    4c5e:	9c c0       	rjmp	.+312    	; 0x4d98 <EEPROM_VoidReadDataByteOnly+0x17e>
			Local_ErrorState=I2C_MstrSendDataByte((u8)Copy_u16address);
    4c60:	88 89       	ldd	r24, Y+16	; 0x10
    4c62:	0e 94 6d 14 	call	0x28da	; 0x28da <I2C_MstrSendDataByte>
    4c66:	8f 87       	std	Y+15, r24	; 0x0f
			if(Local_ErrorState==NoError){
    4c68:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c6a:	88 23       	and	r24, r24
    4c6c:	09 f0       	breq	.+2      	; 0x4c70 <EEPROM_VoidReadDataByteOnly+0x56>
    4c6e:	94 c0       	rjmp	.+296    	; 0x4d98 <EEPROM_VoidReadDataByteOnly+0x17e>
				Local_ErrorState=I2C_SendRepeatedStart();
    4c70:	0e 94 bf 13 	call	0x277e	; 0x277e <I2C_SendRepeatedStart>
    4c74:	8f 87       	std	Y+15, r24	; 0x0f
				if(Local_ErrorState==NoError){
    4c76:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c78:	88 23       	and	r24, r24
    4c7a:	09 f0       	breq	.+2      	; 0x4c7e <EEPROM_VoidReadDataByteOnly+0x64>
    4c7c:	8d c0       	rjmp	.+282    	; 0x4d98 <EEPROM_VoidReadDataByteOnly+0x17e>
					Local_ErrorState=I2C_SendSlaveAddressWithRead(EEPROM_FIXED_ADDRESS | EEPROM_A2_VALUE | ((u8)((Copy_u16address>>8)&EEPROM_8K_ADDRESS_MASK)));
    4c7e:	88 89       	ldd	r24, Y+16	; 0x10
    4c80:	99 89       	ldd	r25, Y+17	; 0x11
    4c82:	89 2f       	mov	r24, r25
    4c84:	99 27       	eor	r25, r25
    4c86:	83 70       	andi	r24, 0x03	; 3
    4c88:	80 65       	ori	r24, 0x50	; 80
    4c8a:	0e 94 2b 14 	call	0x2856	; 0x2856 <I2C_SendSlaveAddressWithRead>
    4c8e:	8f 87       	std	Y+15, r24	; 0x0f
					if(Local_ErrorState==NoError){
    4c90:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c92:	88 23       	and	r24, r24
    4c94:	09 f0       	breq	.+2      	; 0x4c98 <EEPROM_VoidReadDataByteOnly+0x7e>
    4c96:	80 c0       	rjmp	.+256    	; 0x4d98 <EEPROM_VoidReadDataByteOnly+0x17e>
						I2C_MstrReadDataByte(Copy_pu8Data);
    4c98:	8a 89       	ldd	r24, Y+18	; 0x12
    4c9a:	9b 89       	ldd	r25, Y+19	; 0x13
    4c9c:	0e 94 a7 14 	call	0x294e	; 0x294e <I2C_MstrReadDataByte>
						I2C_MstrReadDataByteNoAck(Copy_pu8Data);
    4ca0:	8a 89       	ldd	r24, Y+18	; 0x12
    4ca2:	9b 89       	ldd	r25, Y+19	; 0x13
    4ca4:	0e 94 db 14 	call	0x29b6	; 0x29b6 <I2C_MstrReadDataByteNoAck>
						if(Local_ErrorState==NoError){
    4ca8:	8f 85       	ldd	r24, Y+15	; 0x0f
    4caa:	88 23       	and	r24, r24
    4cac:	09 f0       	breq	.+2      	; 0x4cb0 <EEPROM_VoidReadDataByteOnly+0x96>
    4cae:	74 c0       	rjmp	.+232    	; 0x4d98 <EEPROM_VoidReadDataByteOnly+0x17e>

							I2C_SendStopCondition();
    4cb0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <I2C_SendStopCondition>
    4cb4:	80 e0       	ldi	r24, 0x00	; 0
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	a0 ea       	ldi	r26, 0xA0	; 160
    4cba:	b1 e4       	ldi	r27, 0x41	; 65
    4cbc:	8b 87       	std	Y+11, r24	; 0x0b
    4cbe:	9c 87       	std	Y+12, r25	; 0x0c
    4cc0:	ad 87       	std	Y+13, r26	; 0x0d
    4cc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    4cc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    4cc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    4cca:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ccc:	20 e0       	ldi	r18, 0x00	; 0
    4cce:	30 e0       	ldi	r19, 0x00	; 0
    4cd0:	4a ef       	ldi	r20, 0xFA	; 250
    4cd2:	54 e4       	ldi	r21, 0x44	; 68
    4cd4:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    4cd8:	dc 01       	movw	r26, r24
    4cda:	cb 01       	movw	r24, r22
    4cdc:	8f 83       	std	Y+7, r24	; 0x07
    4cde:	98 87       	std	Y+8, r25	; 0x08
    4ce0:	a9 87       	std	Y+9, r26	; 0x09
    4ce2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ce6:	78 85       	ldd	r23, Y+8	; 0x08
    4ce8:	89 85       	ldd	r24, Y+9	; 0x09
    4cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    4cec:	20 e0       	ldi	r18, 0x00	; 0
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	40 e8       	ldi	r20, 0x80	; 128
    4cf2:	5f e3       	ldi	r21, 0x3F	; 63
    4cf4:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    4cf8:	88 23       	and	r24, r24
    4cfa:	2c f4       	brge	.+10     	; 0x4d06 <EEPROM_VoidReadDataByteOnly+0xec>
		__ticks = 1;
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
    4d00:	9e 83       	std	Y+6, r25	; 0x06
    4d02:	8d 83       	std	Y+5, r24	; 0x05
    4d04:	3f c0       	rjmp	.+126    	; 0x4d84 <EEPROM_VoidReadDataByteOnly+0x16a>
	else if (__tmp > 65535)
    4d06:	6f 81       	ldd	r22, Y+7	; 0x07
    4d08:	78 85       	ldd	r23, Y+8	; 0x08
    4d0a:	89 85       	ldd	r24, Y+9	; 0x09
    4d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d0e:	20 e0       	ldi	r18, 0x00	; 0
    4d10:	3f ef       	ldi	r19, 0xFF	; 255
    4d12:	4f e7       	ldi	r20, 0x7F	; 127
    4d14:	57 e4       	ldi	r21, 0x47	; 71
    4d16:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    4d1a:	18 16       	cp	r1, r24
    4d1c:	4c f5       	brge	.+82     	; 0x4d70 <EEPROM_VoidReadDataByteOnly+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4d20:	7c 85       	ldd	r23, Y+12	; 0x0c
    4d22:	8d 85       	ldd	r24, Y+13	; 0x0d
    4d24:	9e 85       	ldd	r25, Y+14	; 0x0e
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	30 e0       	ldi	r19, 0x00	; 0
    4d2a:	40 e2       	ldi	r20, 0x20	; 32
    4d2c:	51 e4       	ldi	r21, 0x41	; 65
    4d2e:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    4d32:	dc 01       	movw	r26, r24
    4d34:	cb 01       	movw	r24, r22
    4d36:	bc 01       	movw	r22, r24
    4d38:	cd 01       	movw	r24, r26
    4d3a:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4d3e:	dc 01       	movw	r26, r24
    4d40:	cb 01       	movw	r24, r22
    4d42:	9e 83       	std	Y+6, r25	; 0x06
    4d44:	8d 83       	std	Y+5, r24	; 0x05
    4d46:	0f c0       	rjmp	.+30     	; 0x4d66 <EEPROM_VoidReadDataByteOnly+0x14c>
    4d48:	88 ec       	ldi	r24, 0xC8	; 200
    4d4a:	90 e0       	ldi	r25, 0x00	; 0
    4d4c:	9c 83       	std	Y+4, r25	; 0x04
    4d4e:	8b 83       	std	Y+3, r24	; 0x03
    4d50:	8b 81       	ldd	r24, Y+3	; 0x03
    4d52:	9c 81       	ldd	r25, Y+4	; 0x04
    4d54:	01 97       	sbiw	r24, 0x01	; 1
    4d56:	f1 f7       	brne	.-4      	; 0x4d54 <EEPROM_VoidReadDataByteOnly+0x13a>
    4d58:	9c 83       	std	Y+4, r25	; 0x04
    4d5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d60:	01 97       	sbiw	r24, 0x01	; 1
    4d62:	9e 83       	std	Y+6, r25	; 0x06
    4d64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d66:	8d 81       	ldd	r24, Y+5	; 0x05
    4d68:	9e 81       	ldd	r25, Y+6	; 0x06
    4d6a:	00 97       	sbiw	r24, 0x00	; 0
    4d6c:	69 f7       	brne	.-38     	; 0x4d48 <EEPROM_VoidReadDataByteOnly+0x12e>
    4d6e:	14 c0       	rjmp	.+40     	; 0x4d98 <EEPROM_VoidReadDataByteOnly+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d70:	6f 81       	ldd	r22, Y+7	; 0x07
    4d72:	78 85       	ldd	r23, Y+8	; 0x08
    4d74:	89 85       	ldd	r24, Y+9	; 0x09
    4d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    4d78:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4d7c:	dc 01       	movw	r26, r24
    4d7e:	cb 01       	movw	r24, r22
    4d80:	9e 83       	std	Y+6, r25	; 0x06
    4d82:	8d 83       	std	Y+5, r24	; 0x05
    4d84:	8d 81       	ldd	r24, Y+5	; 0x05
    4d86:	9e 81       	ldd	r25, Y+6	; 0x06
    4d88:	9a 83       	std	Y+2, r25	; 0x02
    4d8a:	89 83       	std	Y+1, r24	; 0x01
    4d8c:	89 81       	ldd	r24, Y+1	; 0x01
    4d8e:	9a 81       	ldd	r25, Y+2	; 0x02
    4d90:	01 97       	sbiw	r24, 0x01	; 1
    4d92:	f1 f7       	brne	.-4      	; 0x4d90 <EEPROM_VoidReadDataByteOnly+0x176>
    4d94:	9a 83       	std	Y+2, r25	; 0x02
    4d96:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{

	}
	return Local_ErrorState;
    4d98:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4d9a:	63 96       	adiw	r28, 0x13	; 19
    4d9c:	0f b6       	in	r0, 0x3f	; 63
    4d9e:	f8 94       	cli
    4da0:	de bf       	out	0x3e, r29	; 62
    4da2:	0f be       	out	0x3f, r0	; 63
    4da4:	cd bf       	out	0x3d, r28	; 61
    4da6:	cf 91       	pop	r28
    4da8:	df 91       	pop	r29
    4daa:	08 95       	ret

00004dac <EEPROM_VoidReadDataFirstByte>:



u8  EEPROM_VoidReadDataFirstByte(u16 Copy_u16address,pstring Copy_pu8Data){
    4dac:	df 93       	push	r29
    4dae:	cf 93       	push	r28
    4db0:	00 d0       	rcall	.+0      	; 0x4db2 <EEPROM_VoidReadDataFirstByte+0x6>
    4db2:	00 d0       	rcall	.+0      	; 0x4db4 <EEPROM_VoidReadDataFirstByte+0x8>
    4db4:	0f 92       	push	r0
    4db6:	cd b7       	in	r28, 0x3d	; 61
    4db8:	de b7       	in	r29, 0x3e	; 62
    4dba:	9b 83       	std	Y+3, r25	; 0x03
    4dbc:	8a 83       	std	Y+2, r24	; 0x02
    4dbe:	7d 83       	std	Y+5, r23	; 0x05
    4dc0:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_ErrorState=NoError;
    4dc2:	19 82       	std	Y+1, r1	; 0x01
	Local_ErrorState=I2C_SendStartCondition();
    4dc4:	0e 94 95 13 	call	0x272a	; 0x272a <I2C_SendStartCondition>
    4dc8:	89 83       	std	Y+1, r24	; 0x01
	if(Local_ErrorState==NoError){
    4dca:	89 81       	ldd	r24, Y+1	; 0x01
    4dcc:	88 23       	and	r24, r24
    4dce:	49 f5       	brne	.+82     	; 0x4e22 <EEPROM_VoidReadDataFirstByte+0x76>
	Local_ErrorState=I2C_SendSlaveAddressWithWrite(EEPROM_FIXED_ADDRESS | EEPROM_A2_VALUE | ((u8)((Copy_u16address>>8)&EEPROM_8K_ADDRESS_MASK)));
    4dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4dd2:	9b 81       	ldd	r25, Y+3	; 0x03
    4dd4:	89 2f       	mov	r24, r25
    4dd6:	99 27       	eor	r25, r25
    4dd8:	83 70       	andi	r24, 0x03	; 3
    4dda:	80 65       	ori	r24, 0x50	; 80
    4ddc:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <I2C_SendSlaveAddressWithWrite>
    4de0:	89 83       	std	Y+1, r24	; 0x01
		if(Local_ErrorState==NoError){
    4de2:	89 81       	ldd	r24, Y+1	; 0x01
    4de4:	88 23       	and	r24, r24
    4de6:	e9 f4       	brne	.+58     	; 0x4e22 <EEPROM_VoidReadDataFirstByte+0x76>
			Local_ErrorState=I2C_MstrSendDataByte((u8)Copy_u16address);
    4de8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dea:	0e 94 6d 14 	call	0x28da	; 0x28da <I2C_MstrSendDataByte>
    4dee:	89 83       	std	Y+1, r24	; 0x01
			if(Local_ErrorState==NoError){
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
    4df2:	88 23       	and	r24, r24
    4df4:	b1 f4       	brne	.+44     	; 0x4e22 <EEPROM_VoidReadDataFirstByte+0x76>
				Local_ErrorState=I2C_SendRepeatedStart();
    4df6:	0e 94 bf 13 	call	0x277e	; 0x277e <I2C_SendRepeatedStart>
    4dfa:	89 83       	std	Y+1, r24	; 0x01
				if(Local_ErrorState==NoError){
    4dfc:	89 81       	ldd	r24, Y+1	; 0x01
    4dfe:	88 23       	and	r24, r24
    4e00:	81 f4       	brne	.+32     	; 0x4e22 <EEPROM_VoidReadDataFirstByte+0x76>
					Local_ErrorState=I2C_SendSlaveAddressWithRead(EEPROM_FIXED_ADDRESS | EEPROM_A2_VALUE | ((u8)((Copy_u16address>>8)&EEPROM_8K_ADDRESS_MASK)));
    4e02:	8a 81       	ldd	r24, Y+2	; 0x02
    4e04:	9b 81       	ldd	r25, Y+3	; 0x03
    4e06:	89 2f       	mov	r24, r25
    4e08:	99 27       	eor	r25, r25
    4e0a:	83 70       	andi	r24, 0x03	; 3
    4e0c:	80 65       	ori	r24, 0x50	; 80
    4e0e:	0e 94 2b 14 	call	0x2856	; 0x2856 <I2C_SendSlaveAddressWithRead>
    4e12:	89 83       	std	Y+1, r24	; 0x01
					if(Local_ErrorState==NoError){
    4e14:	89 81       	ldd	r24, Y+1	; 0x01
    4e16:	88 23       	and	r24, r24
    4e18:	21 f4       	brne	.+8      	; 0x4e22 <EEPROM_VoidReadDataFirstByte+0x76>
						I2C_MstrReadDataByte(Copy_pu8Data);
    4e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e1c:	9d 81       	ldd	r25, Y+5	; 0x05
    4e1e:	0e 94 a7 14 	call	0x294e	; 0x294e <I2C_MstrReadDataByte>
		}
	}
	else{

	}
	return Local_ErrorState;
    4e22:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e24:	0f 90       	pop	r0
    4e26:	0f 90       	pop	r0
    4e28:	0f 90       	pop	r0
    4e2a:	0f 90       	pop	r0
    4e2c:	0f 90       	pop	r0
    4e2e:	cf 91       	pop	r28
    4e30:	df 91       	pop	r29
    4e32:	08 95       	ret

00004e34 <EEPROM_VoidReadDataByte>:





u8  EEPROM_VoidReadDataByte(u16 Copy_u16address,pstring Copy_pu8Data){
    4e34:	df 93       	push	r29
    4e36:	cf 93       	push	r28
    4e38:	cd b7       	in	r28, 0x3d	; 61
    4e3a:	de b7       	in	r29, 0x3e	; 62
    4e3c:	63 97       	sbiw	r28, 0x13	; 19
    4e3e:	0f b6       	in	r0, 0x3f	; 63
    4e40:	f8 94       	cli
    4e42:	de bf       	out	0x3e, r29	; 62
    4e44:	0f be       	out	0x3f, r0	; 63
    4e46:	cd bf       	out	0x3d, r28	; 61
    4e48:	99 8b       	std	Y+17, r25	; 0x11
    4e4a:	88 8b       	std	Y+16, r24	; 0x10
    4e4c:	7b 8b       	std	Y+19, r23	; 0x13
    4e4e:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_ErrorState=NoError;
    4e50:	1f 86       	std	Y+15, r1	; 0x0f
	Local_ErrorState=I2C_SendStartCondition();
    4e52:	0e 94 95 13 	call	0x272a	; 0x272a <I2C_SendStartCondition>
    4e56:	8f 87       	std	Y+15, r24	; 0x0f
	if(Local_ErrorState==NoError){
    4e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e5a:	88 23       	and	r24, r24
    4e5c:	09 f0       	breq	.+2      	; 0x4e60 <EEPROM_VoidReadDataByte+0x2c>
    4e5e:	a9 c0       	rjmp	.+338    	; 0x4fb2 <EEPROM_VoidReadDataByte+0x17e>
	Local_ErrorState=I2C_SendSlaveAddressWithWrite(EEPROM_FIXED_ADDRESS | EEPROM_A2_VALUE | ((u8)((Copy_u16address>>8)&EEPROM_8K_ADDRESS_MASK)));
    4e60:	88 89       	ldd	r24, Y+16	; 0x10
    4e62:	99 89       	ldd	r25, Y+17	; 0x11
    4e64:	89 2f       	mov	r24, r25
    4e66:	99 27       	eor	r25, r25
    4e68:	83 70       	andi	r24, 0x03	; 3
    4e6a:	80 65       	ori	r24, 0x50	; 80
    4e6c:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <I2C_SendSlaveAddressWithWrite>
    4e70:	8f 87       	std	Y+15, r24	; 0x0f
		if(Local_ErrorState==NoError){
    4e72:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e74:	88 23       	and	r24, r24
    4e76:	09 f0       	breq	.+2      	; 0x4e7a <EEPROM_VoidReadDataByte+0x46>
    4e78:	9c c0       	rjmp	.+312    	; 0x4fb2 <EEPROM_VoidReadDataByte+0x17e>
			Local_ErrorState=I2C_MstrSendDataByte((u8)Copy_u16address);
    4e7a:	88 89       	ldd	r24, Y+16	; 0x10
    4e7c:	0e 94 6d 14 	call	0x28da	; 0x28da <I2C_MstrSendDataByte>
    4e80:	8f 87       	std	Y+15, r24	; 0x0f
			if(Local_ErrorState==NoError){
    4e82:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e84:	88 23       	and	r24, r24
    4e86:	09 f0       	breq	.+2      	; 0x4e8a <EEPROM_VoidReadDataByte+0x56>
    4e88:	94 c0       	rjmp	.+296    	; 0x4fb2 <EEPROM_VoidReadDataByte+0x17e>
				Local_ErrorState=I2C_SendRepeatedStart();
    4e8a:	0e 94 bf 13 	call	0x277e	; 0x277e <I2C_SendRepeatedStart>
    4e8e:	8f 87       	std	Y+15, r24	; 0x0f
				if(Local_ErrorState==NoError){
    4e90:	8f 85       	ldd	r24, Y+15	; 0x0f
    4e92:	88 23       	and	r24, r24
    4e94:	09 f0       	breq	.+2      	; 0x4e98 <EEPROM_VoidReadDataByte+0x64>
    4e96:	8d c0       	rjmp	.+282    	; 0x4fb2 <EEPROM_VoidReadDataByte+0x17e>
					Local_ErrorState=I2C_SendSlaveAddressWithRead(EEPROM_FIXED_ADDRESS | EEPROM_A2_VALUE | ((u8)((Copy_u16address>>8)&EEPROM_8K_ADDRESS_MASK)));
    4e98:	88 89       	ldd	r24, Y+16	; 0x10
    4e9a:	99 89       	ldd	r25, Y+17	; 0x11
    4e9c:	89 2f       	mov	r24, r25
    4e9e:	99 27       	eor	r25, r25
    4ea0:	83 70       	andi	r24, 0x03	; 3
    4ea2:	80 65       	ori	r24, 0x50	; 80
    4ea4:	0e 94 2b 14 	call	0x2856	; 0x2856 <I2C_SendSlaveAddressWithRead>
    4ea8:	8f 87       	std	Y+15, r24	; 0x0f
					if(Local_ErrorState==NoError){
    4eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    4eac:	88 23       	and	r24, r24
    4eae:	09 f0       	breq	.+2      	; 0x4eb2 <EEPROM_VoidReadDataByte+0x7e>
    4eb0:	80 c0       	rjmp	.+256    	; 0x4fb2 <EEPROM_VoidReadDataByte+0x17e>
						I2C_MstrReadDataByte(Copy_pu8Data);
    4eb2:	8a 89       	ldd	r24, Y+18	; 0x12
    4eb4:	9b 89       	ldd	r25, Y+19	; 0x13
    4eb6:	0e 94 a7 14 	call	0x294e	; 0x294e <I2C_MstrReadDataByte>
						I2C_MstrReadDataByteNoAck(Copy_pu8Data);
    4eba:	8a 89       	ldd	r24, Y+18	; 0x12
    4ebc:	9b 89       	ldd	r25, Y+19	; 0x13
    4ebe:	0e 94 db 14 	call	0x29b6	; 0x29b6 <I2C_MstrReadDataByteNoAck>
						if(Local_ErrorState==NoError){
    4ec2:	8f 85       	ldd	r24, Y+15	; 0x0f
    4ec4:	88 23       	and	r24, r24
    4ec6:	09 f0       	breq	.+2      	; 0x4eca <EEPROM_VoidReadDataByte+0x96>
    4ec8:	74 c0       	rjmp	.+232    	; 0x4fb2 <EEPROM_VoidReadDataByte+0x17e>
							I2C_SendStartCondition();
    4eca:	0e 94 95 13 	call	0x272a	; 0x272a <I2C_SendStartCondition>
    4ece:	80 e0       	ldi	r24, 0x00	; 0
    4ed0:	90 e0       	ldi	r25, 0x00	; 0
    4ed2:	a0 ea       	ldi	r26, 0xA0	; 160
    4ed4:	b1 e4       	ldi	r27, 0x41	; 65
    4ed6:	8b 87       	std	Y+11, r24	; 0x0b
    4ed8:	9c 87       	std	Y+12, r25	; 0x0c
    4eda:	ad 87       	std	Y+13, r26	; 0x0d
    4edc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ede:	6b 85       	ldd	r22, Y+11	; 0x0b
    4ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
    4ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    4ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
    4ee6:	20 e0       	ldi	r18, 0x00	; 0
    4ee8:	30 e0       	ldi	r19, 0x00	; 0
    4eea:	4a ef       	ldi	r20, 0xFA	; 250
    4eec:	54 e4       	ldi	r21, 0x44	; 68
    4eee:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    4ef2:	dc 01       	movw	r26, r24
    4ef4:	cb 01       	movw	r24, r22
    4ef6:	8f 83       	std	Y+7, r24	; 0x07
    4ef8:	98 87       	std	Y+8, r25	; 0x08
    4efa:	a9 87       	std	Y+9, r26	; 0x09
    4efc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4efe:	6f 81       	ldd	r22, Y+7	; 0x07
    4f00:	78 85       	ldd	r23, Y+8	; 0x08
    4f02:	89 85       	ldd	r24, Y+9	; 0x09
    4f04:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f06:	20 e0       	ldi	r18, 0x00	; 0
    4f08:	30 e0       	ldi	r19, 0x00	; 0
    4f0a:	40 e8       	ldi	r20, 0x80	; 128
    4f0c:	5f e3       	ldi	r21, 0x3F	; 63
    4f0e:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    4f12:	88 23       	and	r24, r24
    4f14:	2c f4       	brge	.+10     	; 0x4f20 <EEPROM_VoidReadDataByte+0xec>
		__ticks = 1;
    4f16:	81 e0       	ldi	r24, 0x01	; 1
    4f18:	90 e0       	ldi	r25, 0x00	; 0
    4f1a:	9e 83       	std	Y+6, r25	; 0x06
    4f1c:	8d 83       	std	Y+5, r24	; 0x05
    4f1e:	3f c0       	rjmp	.+126    	; 0x4f9e <EEPROM_VoidReadDataByte+0x16a>
	else if (__tmp > 65535)
    4f20:	6f 81       	ldd	r22, Y+7	; 0x07
    4f22:	78 85       	ldd	r23, Y+8	; 0x08
    4f24:	89 85       	ldd	r24, Y+9	; 0x09
    4f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f28:	20 e0       	ldi	r18, 0x00	; 0
    4f2a:	3f ef       	ldi	r19, 0xFF	; 255
    4f2c:	4f e7       	ldi	r20, 0x7F	; 127
    4f2e:	57 e4       	ldi	r21, 0x47	; 71
    4f30:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    4f34:	18 16       	cp	r1, r24
    4f36:	4c f5       	brge	.+82     	; 0x4f8a <EEPROM_VoidReadDataByte+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f38:	6b 85       	ldd	r22, Y+11	; 0x0b
    4f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	40 e2       	ldi	r20, 0x20	; 32
    4f46:	51 e4       	ldi	r21, 0x41	; 65
    4f48:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	cb 01       	movw	r24, r22
    4f50:	bc 01       	movw	r22, r24
    4f52:	cd 01       	movw	r24, r26
    4f54:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4f58:	dc 01       	movw	r26, r24
    4f5a:	cb 01       	movw	r24, r22
    4f5c:	9e 83       	std	Y+6, r25	; 0x06
    4f5e:	8d 83       	std	Y+5, r24	; 0x05
    4f60:	0f c0       	rjmp	.+30     	; 0x4f80 <EEPROM_VoidReadDataByte+0x14c>
    4f62:	88 ec       	ldi	r24, 0xC8	; 200
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	9c 83       	std	Y+4, r25	; 0x04
    4f68:	8b 83       	std	Y+3, r24	; 0x03
    4f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    4f6e:	01 97       	sbiw	r24, 0x01	; 1
    4f70:	f1 f7       	brne	.-4      	; 0x4f6e <EEPROM_VoidReadDataByte+0x13a>
    4f72:	9c 83       	std	Y+4, r25	; 0x04
    4f74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f76:	8d 81       	ldd	r24, Y+5	; 0x05
    4f78:	9e 81       	ldd	r25, Y+6	; 0x06
    4f7a:	01 97       	sbiw	r24, 0x01	; 1
    4f7c:	9e 83       	std	Y+6, r25	; 0x06
    4f7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f80:	8d 81       	ldd	r24, Y+5	; 0x05
    4f82:	9e 81       	ldd	r25, Y+6	; 0x06
    4f84:	00 97       	sbiw	r24, 0x00	; 0
    4f86:	69 f7       	brne	.-38     	; 0x4f62 <EEPROM_VoidReadDataByte+0x12e>
    4f88:	14 c0       	rjmp	.+40     	; 0x4fb2 <EEPROM_VoidReadDataByte+0x17e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f8a:	6f 81       	ldd	r22, Y+7	; 0x07
    4f8c:	78 85       	ldd	r23, Y+8	; 0x08
    4f8e:	89 85       	ldd	r24, Y+9	; 0x09
    4f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f92:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    4f96:	dc 01       	movw	r26, r24
    4f98:	cb 01       	movw	r24, r22
    4f9a:	9e 83       	std	Y+6, r25	; 0x06
    4f9c:	8d 83       	std	Y+5, r24	; 0x05
    4f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    4fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    4fa2:	9a 83       	std	Y+2, r25	; 0x02
    4fa4:	89 83       	std	Y+1, r24	; 0x01
    4fa6:	89 81       	ldd	r24, Y+1	; 0x01
    4fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    4faa:	01 97       	sbiw	r24, 0x01	; 1
    4fac:	f1 f7       	brne	.-4      	; 0x4faa <EEPROM_VoidReadDataByte+0x176>
    4fae:	9a 83       	std	Y+2, r25	; 0x02
    4fb0:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	else{

	}
	return Local_ErrorState;
    4fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4fb4:	63 96       	adiw	r28, 0x13	; 19
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	f8 94       	cli
    4fba:	de bf       	out	0x3e, r29	; 62
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	cd bf       	out	0x3d, r28	; 61
    4fc0:	cf 91       	pop	r28
    4fc2:	df 91       	pop	r29
    4fc4:	08 95       	ret

00004fc6 <EEPROM_VoidSendBuffer>:


void  EEPROM_VoidSendBuffer(u16 Copy_u16address,pstring Copy_u8Data,u8 size){
    4fc6:	df 93       	push	r29
    4fc8:	cf 93       	push	r28
    4fca:	00 d0       	rcall	.+0      	; 0x4fcc <EEPROM_VoidSendBuffer+0x6>
    4fcc:	00 d0       	rcall	.+0      	; 0x4fce <EEPROM_VoidSendBuffer+0x8>
    4fce:	00 d0       	rcall	.+0      	; 0x4fd0 <EEPROM_VoidSendBuffer+0xa>
    4fd0:	cd b7       	in	r28, 0x3d	; 61
    4fd2:	de b7       	in	r29, 0x3e	; 62
    4fd4:	9b 83       	std	Y+3, r25	; 0x03
    4fd6:	8a 83       	std	Y+2, r24	; 0x02
    4fd8:	7d 83       	std	Y+5, r23	; 0x05
    4fda:	6c 83       	std	Y+4, r22	; 0x04
    4fdc:	4e 83       	std	Y+6, r20	; 0x06

	for(u8 LocalIterator=0;LocalIterator<size;LocalIterator++){
    4fde:	19 82       	std	Y+1, r1	; 0x01
    4fe0:	18 c0       	rjmp	.+48     	; 0x5012 <EEPROM_VoidSendBuffer+0x4c>
			EEPROM_VoidSendDataByte(Copy_u16address+LocalIterator,Copy_u8Data[LocalIterator]);
    4fe2:	89 81       	ldd	r24, Y+1	; 0x01
    4fe4:	28 2f       	mov	r18, r24
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    4fea:	9b 81       	ldd	r25, Y+3	; 0x03
    4fec:	a9 01       	movw	r20, r18
    4fee:	48 0f       	add	r20, r24
    4ff0:	59 1f       	adc	r21, r25
    4ff2:	89 81       	ldd	r24, Y+1	; 0x01
    4ff4:	28 2f       	mov	r18, r24
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    4ffa:	9d 81       	ldd	r25, Y+5	; 0x05
    4ffc:	fc 01       	movw	r30, r24
    4ffe:	e2 0f       	add	r30, r18
    5000:	f3 1f       	adc	r31, r19
    5002:	20 81       	ld	r18, Z
    5004:	ca 01       	movw	r24, r20
    5006:	62 2f       	mov	r22, r18
    5008:	0e 94 5d 25 	call	0x4aba	; 0x4aba <EEPROM_VoidSendDataByte>
}


void  EEPROM_VoidSendBuffer(u16 Copy_u16address,pstring Copy_u8Data,u8 size){

	for(u8 LocalIterator=0;LocalIterator<size;LocalIterator++){
    500c:	89 81       	ldd	r24, Y+1	; 0x01
    500e:	8f 5f       	subi	r24, 0xFF	; 255
    5010:	89 83       	std	Y+1, r24	; 0x01
    5012:	99 81       	ldd	r25, Y+1	; 0x01
    5014:	8e 81       	ldd	r24, Y+6	; 0x06
    5016:	98 17       	cp	r25, r24
    5018:	20 f3       	brcs	.-56     	; 0x4fe2 <EEPROM_VoidSendBuffer+0x1c>
			EEPROM_VoidSendDataByte(Copy_u16address+LocalIterator,Copy_u8Data[LocalIterator]);

		}

}
    501a:	26 96       	adiw	r28, 0x06	; 6
    501c:	0f b6       	in	r0, 0x3f	; 63
    501e:	f8 94       	cli
    5020:	de bf       	out	0x3e, r29	; 62
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	cd bf       	out	0x3d, r28	; 61
    5026:	cf 91       	pop	r28
    5028:	df 91       	pop	r29
    502a:	08 95       	ret

0000502c <EEPROM_VoidSendAndReceiveBuffer>:


void  EEPROM_VoidSendAndReceiveBuffer(u16 Copy_u16address,pstring Copy_u8Data,u8 size,pstring Copy_u8RData){
    502c:	df 93       	push	r29
    502e:	cf 93       	push	r28
    5030:	cd b7       	in	r28, 0x3d	; 61
    5032:	de b7       	in	r29, 0x3e	; 62
    5034:	29 97       	sbiw	r28, 0x09	; 9
    5036:	0f b6       	in	r0, 0x3f	; 63
    5038:	f8 94       	cli
    503a:	de bf       	out	0x3e, r29	; 62
    503c:	0f be       	out	0x3f, r0	; 63
    503e:	cd bf       	out	0x3d, r28	; 61
    5040:	9c 83       	std	Y+4, r25	; 0x04
    5042:	8b 83       	std	Y+3, r24	; 0x03
    5044:	7e 83       	std	Y+6, r23	; 0x06
    5046:	6d 83       	std	Y+5, r22	; 0x05
    5048:	4f 83       	std	Y+7, r20	; 0x07
    504a:	39 87       	std	Y+9, r19	; 0x09
    504c:	28 87       	std	Y+8, r18	; 0x08
	 * Byte address 14 or chooses a Buffer larger than 16, the EEPROM will reach the
	 * end of this page then re-roll and overwrite the data written at the page beginning
	 *therefore, the data is written Byte by Byte*/


	for(u8 LocalIterator=0;LocalIterator<size;LocalIterator++){
    504e:	1a 82       	std	Y+2, r1	; 0x02
    5050:	18 c0       	rjmp	.+48     	; 0x5082 <EEPROM_VoidSendAndReceiveBuffer+0x56>
		EEPROM_VoidSendDataByte(Copy_u16address+LocalIterator,Copy_u8Data[LocalIterator]);
    5052:	8a 81       	ldd	r24, Y+2	; 0x02
    5054:	28 2f       	mov	r18, r24
    5056:	30 e0       	ldi	r19, 0x00	; 0
    5058:	8b 81       	ldd	r24, Y+3	; 0x03
    505a:	9c 81       	ldd	r25, Y+4	; 0x04
    505c:	a9 01       	movw	r20, r18
    505e:	48 0f       	add	r20, r24
    5060:	59 1f       	adc	r21, r25
    5062:	8a 81       	ldd	r24, Y+2	; 0x02
    5064:	28 2f       	mov	r18, r24
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	8d 81       	ldd	r24, Y+5	; 0x05
    506a:	9e 81       	ldd	r25, Y+6	; 0x06
    506c:	fc 01       	movw	r30, r24
    506e:	e2 0f       	add	r30, r18
    5070:	f3 1f       	adc	r31, r19
    5072:	20 81       	ld	r18, Z
    5074:	ca 01       	movw	r24, r20
    5076:	62 2f       	mov	r22, r18
    5078:	0e 94 5d 25 	call	0x4aba	; 0x4aba <EEPROM_VoidSendDataByte>
	 * Byte address 14 or chooses a Buffer larger than 16, the EEPROM will reach the
	 * end of this page then re-roll and overwrite the data written at the page beginning
	 *therefore, the data is written Byte by Byte*/


	for(u8 LocalIterator=0;LocalIterator<size;LocalIterator++){
    507c:	8a 81       	ldd	r24, Y+2	; 0x02
    507e:	8f 5f       	subi	r24, 0xFF	; 255
    5080:	8a 83       	std	Y+2, r24	; 0x02
    5082:	9a 81       	ldd	r25, Y+2	; 0x02
    5084:	8f 81       	ldd	r24, Y+7	; 0x07
    5086:	98 17       	cp	r25, r24
    5088:	20 f3       	brcs	.-56     	; 0x5052 <EEPROM_VoidSendAndReceiveBuffer+0x26>
	 * without sending STOP condition, till last byte is reached, Acknowledging it then not
	 * Acknowledging the next data then sending Stop Condition. this process successfully
	 * stops the reading operation (If a data byte is not acknowledged by the MCU
	 * it is not recognized by MCU) therefore an extra reading is required if data is read
//	 * sequentially */
	for(u8 LocalIterator=0;LocalIterator<size;LocalIterator++){
    508a:	19 82       	std	Y+1, r1	; 0x01
    508c:	16 c0       	rjmp	.+44     	; 0x50ba <EEPROM_VoidSendAndReceiveBuffer+0x8e>
		EEPROM_VoidReadDataByte((Copy_u16address+LocalIterator),(Copy_u8RData+LocalIterator));
    508e:	89 81       	ldd	r24, Y+1	; 0x01
    5090:	28 2f       	mov	r18, r24
    5092:	30 e0       	ldi	r19, 0x00	; 0
    5094:	8b 81       	ldd	r24, Y+3	; 0x03
    5096:	9c 81       	ldd	r25, Y+4	; 0x04
    5098:	a9 01       	movw	r20, r18
    509a:	48 0f       	add	r20, r24
    509c:	59 1f       	adc	r21, r25
    509e:	89 81       	ldd	r24, Y+1	; 0x01
    50a0:	28 2f       	mov	r18, r24
    50a2:	30 e0       	ldi	r19, 0x00	; 0
    50a4:	88 85       	ldd	r24, Y+8	; 0x08
    50a6:	99 85       	ldd	r25, Y+9	; 0x09
    50a8:	28 0f       	add	r18, r24
    50aa:	39 1f       	adc	r19, r25
    50ac:	ca 01       	movw	r24, r20
    50ae:	b9 01       	movw	r22, r18
    50b0:	0e 94 1a 27 	call	0x4e34	; 0x4e34 <EEPROM_VoidReadDataByte>
	 * without sending STOP condition, till last byte is reached, Acknowledging it then not
	 * Acknowledging the next data then sending Stop Condition. this process successfully
	 * stops the reading operation (If a data byte is not acknowledged by the MCU
	 * it is not recognized by MCU) therefore an extra reading is required if data is read
//	 * sequentially */
	for(u8 LocalIterator=0;LocalIterator<size;LocalIterator++){
    50b4:	89 81       	ldd	r24, Y+1	; 0x01
    50b6:	8f 5f       	subi	r24, 0xFF	; 255
    50b8:	89 83       	std	Y+1, r24	; 0x01
    50ba:	99 81       	ldd	r25, Y+1	; 0x01
    50bc:	8f 81       	ldd	r24, Y+7	; 0x07
    50be:	98 17       	cp	r25, r24
    50c0:	30 f3       	brcs	.-52     	; 0x508e <EEPROM_VoidSendAndReceiveBuffer+0x62>
		EEPROM_VoidReadDataByte((Copy_u16address+LocalIterator),(Copy_u8RData+LocalIterator));
		}
}
    50c2:	29 96       	adiw	r28, 0x09	; 9
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	f8 94       	cli
    50c8:	de bf       	out	0x3e, r29	; 62
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	cd bf       	out	0x3d, r28	; 61
    50ce:	cf 91       	pop	r28
    50d0:	df 91       	pop	r29
    50d2:	08 95       	ret

000050d4 <EEPROM_VoidReceiveBuffer>:



void  EEPROM_VoidReceiveBuffer(u16 Copy_u16address,pstring  Copy_u8RData,u8 size){
    50d4:	df 93       	push	r29
    50d6:	cf 93       	push	r28
    50d8:	cd b7       	in	r28, 0x3d	; 61
    50da:	de b7       	in	r29, 0x3e	; 62
    50dc:	64 97       	sbiw	r28, 0x14	; 20
    50de:	0f b6       	in	r0, 0x3f	; 63
    50e0:	f8 94       	cli
    50e2:	de bf       	out	0x3e, r29	; 62
    50e4:	0f be       	out	0x3f, r0	; 63
    50e6:	cd bf       	out	0x3d, r28	; 61
    50e8:	99 8b       	std	Y+17, r25	; 0x11
    50ea:	88 8b       	std	Y+16, r24	; 0x10
    50ec:	7b 8b       	std	Y+19, r23	; 0x13
    50ee:	6a 8b       	std	Y+18, r22	; 0x12
    50f0:	4c 8b       	std	Y+20, r20	; 0x14

	EEPROM_VoidReadDataFirstByte(Copy_u16address,Copy_u8RData);
    50f2:	88 89       	ldd	r24, Y+16	; 0x10
    50f4:	99 89       	ldd	r25, Y+17	; 0x11
    50f6:	2a 89       	ldd	r18, Y+18	; 0x12
    50f8:	3b 89       	ldd	r19, Y+19	; 0x13
    50fa:	b9 01       	movw	r22, r18
    50fc:	0e 94 d6 26 	call	0x4dac	; 0x4dac <EEPROM_VoidReadDataFirstByte>

	for(u8 i=1;i<size;i++){
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	8f 87       	std	Y+15, r24	; 0x0f
    5104:	0c c0       	rjmp	.+24     	; 0x511e <EEPROM_VoidReceiveBuffer+0x4a>
		I2C_MstrReadDataByte(Copy_u8RData+i);
    5106:	8f 85       	ldd	r24, Y+15	; 0x0f
    5108:	28 2f       	mov	r18, r24
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	8a 89       	ldd	r24, Y+18	; 0x12
    510e:	9b 89       	ldd	r25, Y+19	; 0x13
    5110:	82 0f       	add	r24, r18
    5112:	93 1f       	adc	r25, r19
    5114:	0e 94 a7 14 	call	0x294e	; 0x294e <I2C_MstrReadDataByte>

void  EEPROM_VoidReceiveBuffer(u16 Copy_u16address,pstring  Copy_u8RData,u8 size){

	EEPROM_VoidReadDataFirstByte(Copy_u16address,Copy_u8RData);

	for(u8 i=1;i<size;i++){
    5118:	8f 85       	ldd	r24, Y+15	; 0x0f
    511a:	8f 5f       	subi	r24, 0xFF	; 255
    511c:	8f 87       	std	Y+15, r24	; 0x0f
    511e:	9f 85       	ldd	r25, Y+15	; 0x0f
    5120:	8c 89       	ldd	r24, Y+20	; 0x14
    5122:	98 17       	cp	r25, r24
    5124:	80 f3       	brcs	.-32     	; 0x5106 <EEPROM_VoidReceiveBuffer+0x32>
		I2C_MstrReadDataByte(Copy_u8RData+i);
	}
	I2C_MstrReadDataByteNoAck(Copy_u8RData+size);
    5126:	8c 89       	ldd	r24, Y+20	; 0x14
    5128:	28 2f       	mov	r18, r24
    512a:	30 e0       	ldi	r19, 0x00	; 0
    512c:	8a 89       	ldd	r24, Y+18	; 0x12
    512e:	9b 89       	ldd	r25, Y+19	; 0x13
    5130:	82 0f       	add	r24, r18
    5132:	93 1f       	adc	r25, r19
    5134:	0e 94 db 14 	call	0x29b6	; 0x29b6 <I2C_MstrReadDataByteNoAck>
	I2C_SendStopCondition();
    5138:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <I2C_SendStopCondition>
    513c:	80 e0       	ldi	r24, 0x00	; 0
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	a0 ea       	ldi	r26, 0xA0	; 160
    5142:	b1 e4       	ldi	r27, 0x41	; 65
    5144:	8b 87       	std	Y+11, r24	; 0x0b
    5146:	9c 87       	std	Y+12, r25	; 0x0c
    5148:	ad 87       	std	Y+13, r26	; 0x0d
    514a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    514c:	6b 85       	ldd	r22, Y+11	; 0x0b
    514e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5150:	8d 85       	ldd	r24, Y+13	; 0x0d
    5152:	9e 85       	ldd	r25, Y+14	; 0x0e
    5154:	20 e0       	ldi	r18, 0x00	; 0
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	4a ef       	ldi	r20, 0xFA	; 250
    515a:	54 e4       	ldi	r21, 0x44	; 68
    515c:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    5160:	dc 01       	movw	r26, r24
    5162:	cb 01       	movw	r24, r22
    5164:	8f 83       	std	Y+7, r24	; 0x07
    5166:	98 87       	std	Y+8, r25	; 0x08
    5168:	a9 87       	std	Y+9, r26	; 0x09
    516a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    516c:	6f 81       	ldd	r22, Y+7	; 0x07
    516e:	78 85       	ldd	r23, Y+8	; 0x08
    5170:	89 85       	ldd	r24, Y+9	; 0x09
    5172:	9a 85       	ldd	r25, Y+10	; 0x0a
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	40 e8       	ldi	r20, 0x80	; 128
    517a:	5f e3       	ldi	r21, 0x3F	; 63
    517c:	0e 94 98 0b 	call	0x1730	; 0x1730 <__ltsf2>
    5180:	88 23       	and	r24, r24
    5182:	2c f4       	brge	.+10     	; 0x518e <EEPROM_VoidReceiveBuffer+0xba>
		__ticks = 1;
    5184:	81 e0       	ldi	r24, 0x01	; 1
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	9e 83       	std	Y+6, r25	; 0x06
    518a:	8d 83       	std	Y+5, r24	; 0x05
    518c:	3f c0       	rjmp	.+126    	; 0x520c <EEPROM_VoidReceiveBuffer+0x138>
	else if (__tmp > 65535)
    518e:	6f 81       	ldd	r22, Y+7	; 0x07
    5190:	78 85       	ldd	r23, Y+8	; 0x08
    5192:	89 85       	ldd	r24, Y+9	; 0x09
    5194:	9a 85       	ldd	r25, Y+10	; 0x0a
    5196:	20 e0       	ldi	r18, 0x00	; 0
    5198:	3f ef       	ldi	r19, 0xFF	; 255
    519a:	4f e7       	ldi	r20, 0x7F	; 127
    519c:	57 e4       	ldi	r21, 0x47	; 71
    519e:	0e 94 38 0b 	call	0x1670	; 0x1670 <__gtsf2>
    51a2:	18 16       	cp	r1, r24
    51a4:	4c f5       	brge	.+82     	; 0x51f8 <EEPROM_VoidReceiveBuffer+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    51a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    51a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    51aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    51ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    51ae:	20 e0       	ldi	r18, 0x00	; 0
    51b0:	30 e0       	ldi	r19, 0x00	; 0
    51b2:	40 e2       	ldi	r20, 0x20	; 32
    51b4:	51 e4       	ldi	r21, 0x41	; 65
    51b6:	0e 94 92 09 	call	0x1324	; 0x1324 <__mulsf3>
    51ba:	dc 01       	movw	r26, r24
    51bc:	cb 01       	movw	r24, r22
    51be:	bc 01       	movw	r22, r24
    51c0:	cd 01       	movw	r24, r26
    51c2:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    51c6:	dc 01       	movw	r26, r24
    51c8:	cb 01       	movw	r24, r22
    51ca:	9e 83       	std	Y+6, r25	; 0x06
    51cc:	8d 83       	std	Y+5, r24	; 0x05
    51ce:	0f c0       	rjmp	.+30     	; 0x51ee <EEPROM_VoidReceiveBuffer+0x11a>
    51d0:	88 ec       	ldi	r24, 0xC8	; 200
    51d2:	90 e0       	ldi	r25, 0x00	; 0
    51d4:	9c 83       	std	Y+4, r25	; 0x04
    51d6:	8b 83       	std	Y+3, r24	; 0x03
    51d8:	8b 81       	ldd	r24, Y+3	; 0x03
    51da:	9c 81       	ldd	r25, Y+4	; 0x04
    51dc:	01 97       	sbiw	r24, 0x01	; 1
    51de:	f1 f7       	brne	.-4      	; 0x51dc <EEPROM_VoidReceiveBuffer+0x108>
    51e0:	9c 83       	std	Y+4, r25	; 0x04
    51e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51e4:	8d 81       	ldd	r24, Y+5	; 0x05
    51e6:	9e 81       	ldd	r25, Y+6	; 0x06
    51e8:	01 97       	sbiw	r24, 0x01	; 1
    51ea:	9e 83       	std	Y+6, r25	; 0x06
    51ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51ee:	8d 81       	ldd	r24, Y+5	; 0x05
    51f0:	9e 81       	ldd	r25, Y+6	; 0x06
    51f2:	00 97       	sbiw	r24, 0x00	; 0
    51f4:	69 f7       	brne	.-38     	; 0x51d0 <EEPROM_VoidReceiveBuffer+0xfc>
    51f6:	14 c0       	rjmp	.+40     	; 0x5220 <EEPROM_VoidReceiveBuffer+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51f8:	6f 81       	ldd	r22, Y+7	; 0x07
    51fa:	78 85       	ldd	r23, Y+8	; 0x08
    51fc:	89 85       	ldd	r24, Y+9	; 0x09
    51fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    5200:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5204:	dc 01       	movw	r26, r24
    5206:	cb 01       	movw	r24, r22
    5208:	9e 83       	std	Y+6, r25	; 0x06
    520a:	8d 83       	std	Y+5, r24	; 0x05
    520c:	8d 81       	ldd	r24, Y+5	; 0x05
    520e:	9e 81       	ldd	r25, Y+6	; 0x06
    5210:	9a 83       	std	Y+2, r25	; 0x02
    5212:	89 83       	std	Y+1, r24	; 0x01
    5214:	89 81       	ldd	r24, Y+1	; 0x01
    5216:	9a 81       	ldd	r25, Y+2	; 0x02
    5218:	01 97       	sbiw	r24, 0x01	; 1
    521a:	f1 f7       	brne	.-4      	; 0x5218 <EEPROM_VoidReceiveBuffer+0x144>
    521c:	9a 83       	std	Y+2, r25	; 0x02
    521e:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);



}
    5220:	64 96       	adiw	r28, 0x14	; 20
    5222:	0f b6       	in	r0, 0x3f	; 63
    5224:	f8 94       	cli
    5226:	de bf       	out	0x3e, r29	; 62
    5228:	0f be       	out	0x3f, r0	; 63
    522a:	cd bf       	out	0x3d, r28	; 61
    522c:	cf 91       	pop	r28
    522e:	df 91       	pop	r29
    5230:	08 95       	ret

00005232 <EEPROM_VoidReceiveBufferNonSeq>:


void  EEPROM_VoidReceiveBufferNonSeq(u16 Copy_u16address,pstring  Copy_u8RData,u8 size){
    5232:	df 93       	push	r29
    5234:	cf 93       	push	r28
    5236:	00 d0       	rcall	.+0      	; 0x5238 <EEPROM_VoidReceiveBufferNonSeq+0x6>
    5238:	00 d0       	rcall	.+0      	; 0x523a <EEPROM_VoidReceiveBufferNonSeq+0x8>
    523a:	00 d0       	rcall	.+0      	; 0x523c <EEPROM_VoidReceiveBufferNonSeq+0xa>
    523c:	cd b7       	in	r28, 0x3d	; 61
    523e:	de b7       	in	r29, 0x3e	; 62
    5240:	9b 83       	std	Y+3, r25	; 0x03
    5242:	8a 83       	std	Y+2, r24	; 0x02
    5244:	7d 83       	std	Y+5, r23	; 0x05
    5246:	6c 83       	std	Y+4, r22	; 0x04
    5248:	4e 83       	std	Y+6, r20	; 0x06

	for(u8 LocalIterator=0;LocalIterator<size;LocalIterator++){
    524a:	19 82       	std	Y+1, r1	; 0x01
    524c:	16 c0       	rjmp	.+44     	; 0x527a <EEPROM_VoidReceiveBufferNonSeq+0x48>
		EEPROM_VoidReadDataByteOnly((Copy_u16address+LocalIterator),(Copy_u8RData+LocalIterator));
    524e:	89 81       	ldd	r24, Y+1	; 0x01
    5250:	28 2f       	mov	r18, r24
    5252:	30 e0       	ldi	r19, 0x00	; 0
    5254:	8a 81       	ldd	r24, Y+2	; 0x02
    5256:	9b 81       	ldd	r25, Y+3	; 0x03
    5258:	a9 01       	movw	r20, r18
    525a:	48 0f       	add	r20, r24
    525c:	59 1f       	adc	r21, r25
    525e:	89 81       	ldd	r24, Y+1	; 0x01
    5260:	28 2f       	mov	r18, r24
    5262:	30 e0       	ldi	r19, 0x00	; 0
    5264:	8c 81       	ldd	r24, Y+4	; 0x04
    5266:	9d 81       	ldd	r25, Y+5	; 0x05
    5268:	28 0f       	add	r18, r24
    526a:	39 1f       	adc	r19, r25
    526c:	ca 01       	movw	r24, r20
    526e:	b9 01       	movw	r22, r18
    5270:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <EEPROM_VoidReadDataByteOnly>
}


void  EEPROM_VoidReceiveBufferNonSeq(u16 Copy_u16address,pstring  Copy_u8RData,u8 size){

	for(u8 LocalIterator=0;LocalIterator<size;LocalIterator++){
    5274:	89 81       	ldd	r24, Y+1	; 0x01
    5276:	8f 5f       	subi	r24, 0xFF	; 255
    5278:	89 83       	std	Y+1, r24	; 0x01
    527a:	99 81       	ldd	r25, Y+1	; 0x01
    527c:	8e 81       	ldd	r24, Y+6	; 0x06
    527e:	98 17       	cp	r25, r24
    5280:	30 f3       	brcs	.-52     	; 0x524e <EEPROM_VoidReceiveBufferNonSeq+0x1c>
		EEPROM_VoidReadDataByteOnly((Copy_u16address+LocalIterator),(Copy_u8RData+LocalIterator));
	}



}
    5282:	26 96       	adiw	r28, 0x06	; 6
    5284:	0f b6       	in	r0, 0x3f	; 63
    5286:	f8 94       	cli
    5288:	de bf       	out	0x3e, r29	; 62
    528a:	0f be       	out	0x3f, r0	; 63
    528c:	cd bf       	out	0x3d, r28	; 61
    528e:	cf 91       	pop	r28
    5290:	df 91       	pop	r29
    5292:	08 95       	ret

00005294 <main>:
		SEND_RISE_CLOCK,
		PEER_TO_PEER_MODE,
		Rate_9600};
void AdminMode(void);
void UserMode(void);
void main(void){
    5294:	df 93       	push	r29
    5296:	cf 93       	push	r28
    5298:	cd b7       	in	r28, 0x3d	; 61
    529a:	de b7       	in	r29, 0x3e	; 62
    529c:	e2 97       	sbiw	r28, 0x32	; 50
    529e:	0f b6       	in	r0, 0x3f	; 63
    52a0:	f8 94       	cli
    52a2:	de bf       	out	0x3e, r29	; 62
    52a4:	0f be       	out	0x3f, r0	; 63
    52a6:	cd bf       	out	0x3d, r28	; 61

	UART_Init(&User);
    52a8:	8d e1       	ldi	r24, 0x1D	; 29
    52aa:	92 e0       	ldi	r25, 0x02	; 2
    52ac:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <UART_Init>
	string Wel[]={"Please Choose Mode ADMIN or USER "};
    52b0:	ce 01       	movw	r24, r28
    52b2:	08 96       	adiw	r24, 0x08	; 8
    52b4:	9f a7       	std	Y+47, r25	; 0x2f
    52b6:	8e a7       	std	Y+46, r24	; 0x2e
    52b8:	e5 ea       	ldi	r30, 0xA5	; 165
    52ba:	f0 e0       	ldi	r31, 0x00	; 0
    52bc:	f9 ab       	std	Y+49, r31	; 0x31
    52be:	e8 ab       	std	Y+48, r30	; 0x30
    52c0:	f2 e2       	ldi	r31, 0x22	; 34
    52c2:	fa ab       	std	Y+50, r31	; 0x32
    52c4:	e8 a9       	ldd	r30, Y+48	; 0x30
    52c6:	f9 a9       	ldd	r31, Y+49	; 0x31
    52c8:	00 80       	ld	r0, Z
    52ca:	88 a9       	ldd	r24, Y+48	; 0x30
    52cc:	99 a9       	ldd	r25, Y+49	; 0x31
    52ce:	01 96       	adiw	r24, 0x01	; 1
    52d0:	99 ab       	std	Y+49, r25	; 0x31
    52d2:	88 ab       	std	Y+48, r24	; 0x30
    52d4:	ee a5       	ldd	r30, Y+46	; 0x2e
    52d6:	ff a5       	ldd	r31, Y+47	; 0x2f
    52d8:	00 82       	st	Z, r0
    52da:	8e a5       	ldd	r24, Y+46	; 0x2e
    52dc:	9f a5       	ldd	r25, Y+47	; 0x2f
    52de:	01 96       	adiw	r24, 0x01	; 1
    52e0:	9f a7       	std	Y+47, r25	; 0x2f
    52e2:	8e a7       	std	Y+46, r24	; 0x2e
    52e4:	9a a9       	ldd	r25, Y+50	; 0x32
    52e6:	91 50       	subi	r25, 0x01	; 1
    52e8:	9a ab       	std	Y+50, r25	; 0x32
    52ea:	ea a9       	ldd	r30, Y+50	; 0x32
    52ec:	ee 23       	and	r30, r30
    52ee:	51 f7       	brne	.-44     	; 0x52c4 <main+0x30>
	string Ans[4]={"0000"};
    52f0:	80 91 c7 00 	lds	r24, 0x00C7
    52f4:	90 91 c8 00 	lds	r25, 0x00C8
    52f8:	a0 91 c9 00 	lds	r26, 0x00C9
    52fc:	b0 91 ca 00 	lds	r27, 0x00CA
    5300:	8a a7       	std	Y+42, r24	; 0x2a
    5302:	9b a7       	std	Y+43, r25	; 0x2b
    5304:	ac a7       	std	Y+44, r26	; 0x2c
    5306:	bd a7       	std	Y+45, r27	; 0x2d
	pstring Admin="ADMIN";
    5308:	8a e9       	ldi	r24, 0x9A	; 154
    530a:	90 e0       	ldi	r25, 0x00	; 0
    530c:	9f 83       	std	Y+7, r25	; 0x07
    530e:	8e 83       	std	Y+6, r24	; 0x06
	pstring User="USER";
    5310:	80 ea       	ldi	r24, 0xA0	; 160
    5312:	90 e0       	ldi	r25, 0x00	; 0
    5314:	9d 83       	std	Y+5, r25	; 0x05
    5316:	8c 83       	std	Y+4, r24	; 0x04
	LCD_VoidInit();
    5318:	0e 94 19 1a 	call	0x3432	; 0x3432 <LCD_VoidInit>
	EEPROM_VoidInit();
    531c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <EEPROM_VoidInit>



	UART_SendStringSync(Wel);
    5320:	ce 01       	movw	r24, r28
    5322:	08 96       	adiw	r24, 0x08	; 8
    5324:	0e 94 82 11 	call	0x2304	; 0x2304 <UART_SendStringSync>
	UART_ReceiveStringSync(Ans);
    5328:	ce 01       	movw	r24, r28
    532a:	8a 96       	adiw	r24, 0x2a	; 42
    532c:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <UART_ReceiveStringSync>



		u8 admincounter=0;
    5330:	1b 82       	std	Y+3, r1	; 0x03
		u8 usercounter=0;
    5332:	1a 82       	std	Y+2, r1	; 0x02
	for(u8 i=0;i<5;i++){
    5334:	19 82       	std	Y+1, r1	; 0x01
    5336:	35 c0       	rjmp	.+106    	; 0x53a2 <main+0x10e>
		if(usercounter==4){
    5338:	8a 81       	ldd	r24, Y+2	; 0x02
    533a:	84 30       	cpi	r24, 0x04	; 4
    533c:	a9 f1       	breq	.+106    	; 0x53a8 <main+0x114>
			break;
		}
		if(Ans[i]==Admin[i]){
    533e:	89 81       	ldd	r24, Y+1	; 0x01
    5340:	28 2f       	mov	r18, r24
    5342:	30 e0       	ldi	r19, 0x00	; 0
    5344:	ce 01       	movw	r24, r28
    5346:	8a 96       	adiw	r24, 0x2a	; 42
    5348:	fc 01       	movw	r30, r24
    534a:	e2 0f       	add	r30, r18
    534c:	f3 1f       	adc	r31, r19
    534e:	40 81       	ld	r20, Z
    5350:	89 81       	ldd	r24, Y+1	; 0x01
    5352:	28 2f       	mov	r18, r24
    5354:	30 e0       	ldi	r19, 0x00	; 0
    5356:	8e 81       	ldd	r24, Y+6	; 0x06
    5358:	9f 81       	ldd	r25, Y+7	; 0x07
    535a:	fc 01       	movw	r30, r24
    535c:	e2 0f       	add	r30, r18
    535e:	f3 1f       	adc	r31, r19
    5360:	80 81       	ld	r24, Z
    5362:	48 17       	cp	r20, r24
    5364:	21 f4       	brne	.+8      	; 0x536e <main+0xda>
			admincounter++;
    5366:	8b 81       	ldd	r24, Y+3	; 0x03
    5368:	8f 5f       	subi	r24, 0xFF	; 255
    536a:	8b 83       	std	Y+3, r24	; 0x03
    536c:	17 c0       	rjmp	.+46     	; 0x539c <main+0x108>
		}
		else if(Ans[i]==User[i]){
    536e:	89 81       	ldd	r24, Y+1	; 0x01
    5370:	28 2f       	mov	r18, r24
    5372:	30 e0       	ldi	r19, 0x00	; 0
    5374:	ce 01       	movw	r24, r28
    5376:	8a 96       	adiw	r24, 0x2a	; 42
    5378:	fc 01       	movw	r30, r24
    537a:	e2 0f       	add	r30, r18
    537c:	f3 1f       	adc	r31, r19
    537e:	40 81       	ld	r20, Z
    5380:	89 81       	ldd	r24, Y+1	; 0x01
    5382:	28 2f       	mov	r18, r24
    5384:	30 e0       	ldi	r19, 0x00	; 0
    5386:	8c 81       	ldd	r24, Y+4	; 0x04
    5388:	9d 81       	ldd	r25, Y+5	; 0x05
    538a:	fc 01       	movw	r30, r24
    538c:	e2 0f       	add	r30, r18
    538e:	f3 1f       	adc	r31, r19
    5390:	80 81       	ld	r24, Z
    5392:	48 17       	cp	r20, r24
    5394:	49 f4       	brne	.+18     	; 0x53a8 <main+0x114>
			usercounter++;
    5396:	8a 81       	ldd	r24, Y+2	; 0x02
    5398:	8f 5f       	subi	r24, 0xFF	; 255
    539a:	8a 83       	std	Y+2, r24	; 0x02



		u8 admincounter=0;
		u8 usercounter=0;
	for(u8 i=0;i<5;i++){
    539c:	89 81       	ldd	r24, Y+1	; 0x01
    539e:	8f 5f       	subi	r24, 0xFF	; 255
    53a0:	89 83       	std	Y+1, r24	; 0x01
    53a2:	89 81       	ldd	r24, Y+1	; 0x01
    53a4:	85 30       	cpi	r24, 0x05	; 5
    53a6:	40 f2       	brcs	.-112    	; 0x5338 <main+0xa4>
		}
		else{
			break;
		}
	}
	if (admincounter==5){
    53a8:	8b 81       	ldd	r24, Y+3	; 0x03
    53aa:	85 30       	cpi	r24, 0x05	; 5
    53ac:	19 f4       	brne	.+6      	; 0x53b4 <main+0x120>

		AdminMode();
    53ae:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <AdminMode>
    53b2:	05 c0       	rjmp	.+10     	; 0x53be <main+0x12a>
	}
	else if (usercounter==4){
    53b4:	8a 81       	ldd	r24, Y+2	; 0x02
    53b6:	84 30       	cpi	r24, 0x04	; 4
    53b8:	11 f4       	brne	.+4      	; 0x53be <main+0x12a>

		UserMode();
    53ba:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <UserMode>
    53be:	ff cf       	rjmp	.-2      	; 0x53be <main+0x12a>

000053c0 <AdminMode>:
	}
}



void AdminMode(void){
    53c0:	df 93       	push	r29
    53c2:	cf 93       	push	r28
    53c4:	cd b7       	in	r28, 0x3d	; 61
    53c6:	de b7       	in	r29, 0x3e	; 62
    53c8:	c8 55       	subi	r28, 0x58	; 88
    53ca:	d0 40       	sbci	r29, 0x00	; 0
    53cc:	0f b6       	in	r0, 0x3f	; 63
    53ce:	f8 94       	cli
    53d0:	de bf       	out	0x3e, r29	; 62
    53d2:	0f be       	out	0x3f, r0	; 63
    53d4:	cd bf       	out	0x3d, r28	; 61
	string Wel[]={"\nPlease Enter Admin Username"};
    53d6:	ce 01       	movw	r24, r28
    53d8:	04 96       	adiw	r24, 0x04	; 4
    53da:	61 96       	adiw	r28, 0x11	; 17
    53dc:	9f af       	std	Y+63, r25	; 0x3f
    53de:	8e af       	std	Y+62, r24	; 0x3e
    53e0:	61 97       	sbiw	r28, 0x11	; 17
    53e2:	ac ec       	ldi	r26, 0xCC	; 204
    53e4:	b0 e0       	ldi	r27, 0x00	; 0
    53e6:	63 96       	adiw	r28, 0x13	; 19
    53e8:	bf af       	std	Y+63, r27	; 0x3f
    53ea:	ae af       	std	Y+62, r26	; 0x3e
    53ec:	63 97       	sbiw	r28, 0x13	; 19
    53ee:	bd e1       	ldi	r27, 0x1D	; 29
    53f0:	64 96       	adiw	r28, 0x14	; 20
    53f2:	bf af       	std	Y+63, r27	; 0x3f
    53f4:	64 97       	sbiw	r28, 0x14	; 20
    53f6:	63 96       	adiw	r28, 0x13	; 19
    53f8:	ee ad       	ldd	r30, Y+62	; 0x3e
    53fa:	ff ad       	ldd	r31, Y+63	; 0x3f
    53fc:	63 97       	sbiw	r28, 0x13	; 19
    53fe:	00 80       	ld	r0, Z
    5400:	63 96       	adiw	r28, 0x13	; 19
    5402:	8e ad       	ldd	r24, Y+62	; 0x3e
    5404:	9f ad       	ldd	r25, Y+63	; 0x3f
    5406:	63 97       	sbiw	r28, 0x13	; 19
    5408:	01 96       	adiw	r24, 0x01	; 1
    540a:	63 96       	adiw	r28, 0x13	; 19
    540c:	9f af       	std	Y+63, r25	; 0x3f
    540e:	8e af       	std	Y+62, r24	; 0x3e
    5410:	63 97       	sbiw	r28, 0x13	; 19
    5412:	61 96       	adiw	r28, 0x11	; 17
    5414:	ae ad       	ldd	r26, Y+62	; 0x3e
    5416:	bf ad       	ldd	r27, Y+63	; 0x3f
    5418:	61 97       	sbiw	r28, 0x11	; 17
    541a:	0c 92       	st	X, r0
    541c:	61 96       	adiw	r28, 0x11	; 17
    541e:	ee ad       	ldd	r30, Y+62	; 0x3e
    5420:	ff ad       	ldd	r31, Y+63	; 0x3f
    5422:	61 97       	sbiw	r28, 0x11	; 17
    5424:	31 96       	adiw	r30, 0x01	; 1
    5426:	61 96       	adiw	r28, 0x11	; 17
    5428:	ff af       	std	Y+63, r31	; 0x3f
    542a:	ee af       	std	Y+62, r30	; 0x3e
    542c:	61 97       	sbiw	r28, 0x11	; 17
    542e:	64 96       	adiw	r28, 0x14	; 20
    5430:	ff ad       	ldd	r31, Y+63	; 0x3f
    5432:	64 97       	sbiw	r28, 0x14	; 20
    5434:	f1 50       	subi	r31, 0x01	; 1
    5436:	64 96       	adiw	r28, 0x14	; 20
    5438:	ff af       	std	Y+63, r31	; 0x3f
    543a:	64 97       	sbiw	r28, 0x14	; 20
    543c:	64 96       	adiw	r28, 0x14	; 20
    543e:	8f ad       	ldd	r24, Y+63	; 0x3f
    5440:	64 97       	sbiw	r28, 0x14	; 20
    5442:	88 23       	and	r24, r24
    5444:	c1 f6       	brne	.-80     	; 0x53f6 <AdminMode+0x36>
	string Wel2[]={"\nPlease Enter Admin Password"};
    5446:	de 01       	movw	r26, r28
    5448:	91 96       	adiw	r26, 0x21	; 33
    544a:	66 96       	adiw	r28, 0x16	; 22
    544c:	bf af       	std	Y+63, r27	; 0x3f
    544e:	ae af       	std	Y+62, r26	; 0x3e
    5450:	66 97       	sbiw	r28, 0x16	; 22
    5452:	e9 ee       	ldi	r30, 0xE9	; 233
    5454:	f0 e0       	ldi	r31, 0x00	; 0
    5456:	68 96       	adiw	r28, 0x18	; 24
    5458:	ff af       	std	Y+63, r31	; 0x3f
    545a:	ee af       	std	Y+62, r30	; 0x3e
    545c:	68 97       	sbiw	r28, 0x18	; 24
    545e:	fd e1       	ldi	r31, 0x1D	; 29
    5460:	69 96       	adiw	r28, 0x19	; 25
    5462:	ff af       	std	Y+63, r31	; 0x3f
    5464:	69 97       	sbiw	r28, 0x19	; 25
    5466:	68 96       	adiw	r28, 0x18	; 24
    5468:	ae ad       	ldd	r26, Y+62	; 0x3e
    546a:	bf ad       	ldd	r27, Y+63	; 0x3f
    546c:	68 97       	sbiw	r28, 0x18	; 24
    546e:	0c 90       	ld	r0, X
    5470:	68 96       	adiw	r28, 0x18	; 24
    5472:	ee ad       	ldd	r30, Y+62	; 0x3e
    5474:	ff ad       	ldd	r31, Y+63	; 0x3f
    5476:	68 97       	sbiw	r28, 0x18	; 24
    5478:	31 96       	adiw	r30, 0x01	; 1
    547a:	68 96       	adiw	r28, 0x18	; 24
    547c:	ff af       	std	Y+63, r31	; 0x3f
    547e:	ee af       	std	Y+62, r30	; 0x3e
    5480:	68 97       	sbiw	r28, 0x18	; 24
    5482:	66 96       	adiw	r28, 0x16	; 22
    5484:	ae ad       	ldd	r26, Y+62	; 0x3e
    5486:	bf ad       	ldd	r27, Y+63	; 0x3f
    5488:	66 97       	sbiw	r28, 0x16	; 22
    548a:	0c 92       	st	X, r0
    548c:	66 96       	adiw	r28, 0x16	; 22
    548e:	ee ad       	ldd	r30, Y+62	; 0x3e
    5490:	ff ad       	ldd	r31, Y+63	; 0x3f
    5492:	66 97       	sbiw	r28, 0x16	; 22
    5494:	31 96       	adiw	r30, 0x01	; 1
    5496:	66 96       	adiw	r28, 0x16	; 22
    5498:	ff af       	std	Y+63, r31	; 0x3f
    549a:	ee af       	std	Y+62, r30	; 0x3e
    549c:	66 97       	sbiw	r28, 0x16	; 22
    549e:	69 96       	adiw	r28, 0x19	; 25
    54a0:	ff ad       	ldd	r31, Y+63	; 0x3f
    54a2:	69 97       	sbiw	r28, 0x19	; 25
    54a4:	f1 50       	subi	r31, 0x01	; 1
    54a6:	69 96       	adiw	r28, 0x19	; 25
    54a8:	ff af       	std	Y+63, r31	; 0x3f
    54aa:	69 97       	sbiw	r28, 0x19	; 25
    54ac:	69 96       	adiw	r28, 0x19	; 25
    54ae:	8f ad       	ldd	r24, Y+63	; 0x3f
    54b0:	69 97       	sbiw	r28, 0x19	; 25
    54b2:	88 23       	and	r24, r24
    54b4:	c1 f6       	brne	.-80     	; 0x5466 <AdminMode+0xa6>
	string AdminUser[5]={0};
    54b6:	85 e0       	ldi	r24, 0x05	; 5
    54b8:	fe 01       	movw	r30, r28
    54ba:	fe 96       	adiw	r30, 0x3e	; 62
    54bc:	df 01       	movw	r26, r30
    54be:	98 2f       	mov	r25, r24
    54c0:	1d 92       	st	X+, r1
    54c2:	9a 95       	dec	r25
    54c4:	e9 f7       	brne	.-6      	; 0x54c0 <AdminMode+0x100>
	string AdminPass[4]={0};
    54c6:	fe 01       	movw	r30, r28
    54c8:	ed 5b       	subi	r30, 0xBD	; 189
    54ca:	ff 4f       	sbci	r31, 0xFF	; 255
    54cc:	10 82       	st	Z, r1
    54ce:	11 82       	std	Z+1, r1	; 0x01
    54d0:	12 82       	std	Z+2, r1	; 0x02
    54d2:	13 82       	std	Z+3, r1	; 0x03
	string Admin[4]={"pass"};
    54d4:	fe 01       	movw	r30, r28
    54d6:	e9 5b       	subi	r30, 0xB9	; 185
    54d8:	ff 4f       	sbci	r31, 0xFF	; 255
    54da:	80 91 06 01 	lds	r24, 0x0106
    54de:	90 91 07 01 	lds	r25, 0x0107
    54e2:	a0 91 08 01 	lds	r26, 0x0108
    54e6:	b0 91 09 01 	lds	r27, 0x0109
    54ea:	80 83       	st	Z, r24
    54ec:	91 83       	std	Z+1, r25	; 0x01
    54ee:	a2 83       	std	Z+2, r26	; 0x02
    54f0:	b3 83       	std	Z+3, r27	; 0x03
	string EEPROM_ADMIN[4];
	for(u8 i=0;i<5;i++){
    54f2:	1a 82       	std	Y+2, r1	; 0x02
    54f4:	12 c0       	rjmp	.+36     	; 0x551a <AdminMode+0x15a>
		EEPROM_VoidReadDataByteOnly(i,EEPROM_ADMIN+i);
    54f6:	8a 81       	ldd	r24, Y+2	; 0x02
    54f8:	48 2f       	mov	r20, r24
    54fa:	50 e0       	ldi	r21, 0x00	; 0
    54fc:	8a 81       	ldd	r24, Y+2	; 0x02
    54fe:	88 2f       	mov	r24, r24
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	9e 01       	movw	r18, r28
    5504:	25 5b       	subi	r18, 0xB5	; 181
    5506:	3f 4f       	sbci	r19, 0xFF	; 255
    5508:	28 0f       	add	r18, r24
    550a:	39 1f       	adc	r19, r25
    550c:	ca 01       	movw	r24, r20
    550e:	b9 01       	movw	r22, r18
    5510:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <EEPROM_VoidReadDataByteOnly>
	string Wel2[]={"\nPlease Enter Admin Password"};
	string AdminUser[5]={0};
	string AdminPass[4]={0};
	string Admin[4]={"pass"};
	string EEPROM_ADMIN[4];
	for(u8 i=0;i<5;i++){
    5514:	8a 81       	ldd	r24, Y+2	; 0x02
    5516:	8f 5f       	subi	r24, 0xFF	; 255
    5518:	8a 83       	std	Y+2, r24	; 0x02
    551a:	8a 81       	ldd	r24, Y+2	; 0x02
    551c:	85 30       	cpi	r24, 0x05	; 5
    551e:	58 f3       	brcs	.-42     	; 0x54f6 <AdminMode+0x136>
		EEPROM_VoidReadDataByteOnly(i,EEPROM_ADMIN+i);
	}


	u8 admincounter=0;
    5520:	1b 82       	std	Y+3, r1	; 0x03

	UART_SendStringSync(Wel);
    5522:	ce 01       	movw	r24, r28
    5524:	04 96       	adiw	r24, 0x04	; 4
    5526:	0e 94 82 11 	call	0x2304	; 0x2304 <UART_SendStringSync>
	UART_ReceiveBufferSync(AdminUser,5);
    552a:	ce 01       	movw	r24, r28
    552c:	ce 96       	adiw	r24, 0x3e	; 62
    552e:	65 e0       	ldi	r22, 0x05	; 5
    5530:	0e 94 ab 11 	call	0x2356	; 0x2356 <UART_ReceiveBufferSync>



	UART_SendStringSync(Wel2);
    5534:	ce 01       	movw	r24, r28
    5536:	81 96       	adiw	r24, 0x21	; 33
    5538:	0e 94 82 11 	call	0x2304	; 0x2304 <UART_SendStringSync>
	UART_ReceiveBufferSync(AdminPass,4);
    553c:	ce 01       	movw	r24, r28
    553e:	8d 5b       	subi	r24, 0xBD	; 189
    5540:	9f 4f       	sbci	r25, 0xFF	; 255
    5542:	64 e0       	ldi	r22, 0x04	; 4
    5544:	0e 94 ab 11 	call	0x2356	; 0x2356 <UART_ReceiveBufferSync>

//	UART_SendBufferSync(EEPROM_ADMIN,5);
	for(u8 i=0;i<5;i++){
    5548:	19 82       	std	Y+1, r1	; 0x01
    554a:	1b c0       	rjmp	.+54     	; 0x5582 <AdminMode+0x1c2>
		if(AdminUser[i]==EEPROM_ADMIN[i]){
    554c:	89 81       	ldd	r24, Y+1	; 0x01
    554e:	28 2f       	mov	r18, r24
    5550:	30 e0       	ldi	r19, 0x00	; 0
    5552:	ce 01       	movw	r24, r28
    5554:	ce 96       	adiw	r24, 0x3e	; 62
    5556:	fc 01       	movw	r30, r24
    5558:	e2 0f       	add	r30, r18
    555a:	f3 1f       	adc	r31, r19
    555c:	40 81       	ld	r20, Z
    555e:	89 81       	ldd	r24, Y+1	; 0x01
    5560:	28 2f       	mov	r18, r24
    5562:	30 e0       	ldi	r19, 0x00	; 0
    5564:	ce 01       	movw	r24, r28
    5566:	85 5b       	subi	r24, 0xB5	; 181
    5568:	9f 4f       	sbci	r25, 0xFF	; 255
    556a:	fc 01       	movw	r30, r24
    556c:	e2 0f       	add	r30, r18
    556e:	f3 1f       	adc	r31, r19
    5570:	80 81       	ld	r24, Z
    5572:	48 17       	cp	r20, r24
    5574:	49 f4       	brne	.+18     	; 0x5588 <AdminMode+0x1c8>
			admincounter++;
    5576:	8b 81       	ldd	r24, Y+3	; 0x03
    5578:	8f 5f       	subi	r24, 0xFF	; 255
    557a:	8b 83       	std	Y+3, r24	; 0x03

	UART_SendStringSync(Wel2);
	UART_ReceiveBufferSync(AdminPass,4);

//	UART_SendBufferSync(EEPROM_ADMIN,5);
	for(u8 i=0;i<5;i++){
    557c:	89 81       	ldd	r24, Y+1	; 0x01
    557e:	8f 5f       	subi	r24, 0xFF	; 255
    5580:	89 83       	std	Y+1, r24	; 0x01
    5582:	89 81       	ldd	r24, Y+1	; 0x01
    5584:	85 30       	cpi	r24, 0x05	; 5
    5586:	10 f3       	brcs	.-60     	; 0x554c <AdminMode+0x18c>
		}
		else{
			break;
		}
	}
	if (admincounter==5){
    5588:	8b 81       	ldd	r24, Y+3	; 0x03
    558a:	85 30       	cpi	r24, 0x05	; 5
    558c:	29 f4       	brne	.+10     	; 0x5598 <AdminMode+0x1d8>
		UART_SendStringSync(Admin);
    558e:	ce 01       	movw	r24, r28
    5590:	89 5b       	subi	r24, 0xB9	; 185
    5592:	9f 4f       	sbci	r25, 0xFF	; 255
    5594:	0e 94 82 11 	call	0x2304	; 0x2304 <UART_SendStringSync>
	}


}
    5598:	c8 5a       	subi	r28, 0xA8	; 168
    559a:	df 4f       	sbci	r29, 0xFF	; 255
    559c:	0f b6       	in	r0, 0x3f	; 63
    559e:	f8 94       	cli
    55a0:	de bf       	out	0x3e, r29	; 62
    55a2:	0f be       	out	0x3f, r0	; 63
    55a4:	cd bf       	out	0x3d, r28	; 61
    55a6:	cf 91       	pop	r28
    55a8:	df 91       	pop	r29
    55aa:	08 95       	ret

000055ac <UserMode>:
void UserMode(void){
    55ac:	df 93       	push	r29
    55ae:	cf 93       	push	r28
    55b0:	cd b7       	in	r28, 0x3d	; 61
    55b2:	de b7       	in	r29, 0x3e	; 62
    55b4:	2f 97       	sbiw	r28, 0x0f	; 15
    55b6:	0f b6       	in	r0, 0x3f	; 63
    55b8:	f8 94       	cli
    55ba:	de bf       	out	0x3e, r29	; 62
    55bc:	0f be       	out	0x3f, r0	; 63
    55be:	cd bf       	out	0x3d, r28	; 61
	string Wel[]={"USER MODE"};
    55c0:	ce 01       	movw	r24, r28
    55c2:	01 96       	adiw	r24, 0x01	; 1
    55c4:	9c 87       	std	Y+12, r25	; 0x0c
    55c6:	8b 87       	std	Y+11, r24	; 0x0b
    55c8:	eb e0       	ldi	r30, 0x0B	; 11
    55ca:	f1 e0       	ldi	r31, 0x01	; 1
    55cc:	fe 87       	std	Y+14, r31	; 0x0e
    55ce:	ed 87       	std	Y+13, r30	; 0x0d
    55d0:	fa e0       	ldi	r31, 0x0A	; 10
    55d2:	ff 87       	std	Y+15, r31	; 0x0f
    55d4:	ed 85       	ldd	r30, Y+13	; 0x0d
    55d6:	fe 85       	ldd	r31, Y+14	; 0x0e
    55d8:	00 80       	ld	r0, Z
    55da:	8d 85       	ldd	r24, Y+13	; 0x0d
    55dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    55de:	01 96       	adiw	r24, 0x01	; 1
    55e0:	9e 87       	std	Y+14, r25	; 0x0e
    55e2:	8d 87       	std	Y+13, r24	; 0x0d
    55e4:	eb 85       	ldd	r30, Y+11	; 0x0b
    55e6:	fc 85       	ldd	r31, Y+12	; 0x0c
    55e8:	00 82       	st	Z, r0
    55ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    55ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    55ee:	01 96       	adiw	r24, 0x01	; 1
    55f0:	9c 87       	std	Y+12, r25	; 0x0c
    55f2:	8b 87       	std	Y+11, r24	; 0x0b
    55f4:	9f 85       	ldd	r25, Y+15	; 0x0f
    55f6:	91 50       	subi	r25, 0x01	; 1
    55f8:	9f 87       	std	Y+15, r25	; 0x0f
    55fa:	ef 85       	ldd	r30, Y+15	; 0x0f
    55fc:	ee 23       	and	r30, r30
    55fe:	51 f7       	brne	.-44     	; 0x55d4 <UserMode+0x28>
	UART_SendStringSync(Wel);
    5600:	ce 01       	movw	r24, r28
    5602:	01 96       	adiw	r24, 0x01	; 1
    5604:	0e 94 82 11 	call	0x2304	; 0x2304 <UART_SendStringSync>

}
    5608:	2f 96       	adiw	r28, 0x0f	; 15
    560a:	0f b6       	in	r0, 0x3f	; 63
    560c:	f8 94       	cli
    560e:	de bf       	out	0x3e, r29	; 62
    5610:	0f be       	out	0x3f, r0	; 63
    5612:	cd bf       	out	0x3d, r28	; 61
    5614:	cf 91       	pop	r28
    5616:	df 91       	pop	r29
    5618:	08 95       	ret

0000561a <__mulsi3>:
    561a:	62 9f       	mul	r22, r18
    561c:	d0 01       	movw	r26, r0
    561e:	73 9f       	mul	r23, r19
    5620:	f0 01       	movw	r30, r0
    5622:	82 9f       	mul	r24, r18
    5624:	e0 0d       	add	r30, r0
    5626:	f1 1d       	adc	r31, r1
    5628:	64 9f       	mul	r22, r20
    562a:	e0 0d       	add	r30, r0
    562c:	f1 1d       	adc	r31, r1
    562e:	92 9f       	mul	r25, r18
    5630:	f0 0d       	add	r31, r0
    5632:	83 9f       	mul	r24, r19
    5634:	f0 0d       	add	r31, r0
    5636:	74 9f       	mul	r23, r20
    5638:	f0 0d       	add	r31, r0
    563a:	65 9f       	mul	r22, r21
    563c:	f0 0d       	add	r31, r0
    563e:	99 27       	eor	r25, r25
    5640:	72 9f       	mul	r23, r18
    5642:	b0 0d       	add	r27, r0
    5644:	e1 1d       	adc	r30, r1
    5646:	f9 1f       	adc	r31, r25
    5648:	63 9f       	mul	r22, r19
    564a:	b0 0d       	add	r27, r0
    564c:	e1 1d       	adc	r30, r1
    564e:	f9 1f       	adc	r31, r25
    5650:	bd 01       	movw	r22, r26
    5652:	cf 01       	movw	r24, r30
    5654:	11 24       	eor	r1, r1
    5656:	08 95       	ret

00005658 <__udivmodsi4>:
    5658:	a1 e2       	ldi	r26, 0x21	; 33
    565a:	1a 2e       	mov	r1, r26
    565c:	aa 1b       	sub	r26, r26
    565e:	bb 1b       	sub	r27, r27
    5660:	fd 01       	movw	r30, r26
    5662:	0d c0       	rjmp	.+26     	; 0x567e <__udivmodsi4_ep>

00005664 <__udivmodsi4_loop>:
    5664:	aa 1f       	adc	r26, r26
    5666:	bb 1f       	adc	r27, r27
    5668:	ee 1f       	adc	r30, r30
    566a:	ff 1f       	adc	r31, r31
    566c:	a2 17       	cp	r26, r18
    566e:	b3 07       	cpc	r27, r19
    5670:	e4 07       	cpc	r30, r20
    5672:	f5 07       	cpc	r31, r21
    5674:	20 f0       	brcs	.+8      	; 0x567e <__udivmodsi4_ep>
    5676:	a2 1b       	sub	r26, r18
    5678:	b3 0b       	sbc	r27, r19
    567a:	e4 0b       	sbc	r30, r20
    567c:	f5 0b       	sbc	r31, r21

0000567e <__udivmodsi4_ep>:
    567e:	66 1f       	adc	r22, r22
    5680:	77 1f       	adc	r23, r23
    5682:	88 1f       	adc	r24, r24
    5684:	99 1f       	adc	r25, r25
    5686:	1a 94       	dec	r1
    5688:	69 f7       	brne	.-38     	; 0x5664 <__udivmodsi4_loop>
    568a:	60 95       	com	r22
    568c:	70 95       	com	r23
    568e:	80 95       	com	r24
    5690:	90 95       	com	r25
    5692:	9b 01       	movw	r18, r22
    5694:	ac 01       	movw	r20, r24
    5696:	bd 01       	movw	r22, r26
    5698:	cf 01       	movw	r24, r30
    569a:	08 95       	ret

0000569c <__prologue_saves__>:
    569c:	2f 92       	push	r2
    569e:	3f 92       	push	r3
    56a0:	4f 92       	push	r4
    56a2:	5f 92       	push	r5
    56a4:	6f 92       	push	r6
    56a6:	7f 92       	push	r7
    56a8:	8f 92       	push	r8
    56aa:	9f 92       	push	r9
    56ac:	af 92       	push	r10
    56ae:	bf 92       	push	r11
    56b0:	cf 92       	push	r12
    56b2:	df 92       	push	r13
    56b4:	ef 92       	push	r14
    56b6:	ff 92       	push	r15
    56b8:	0f 93       	push	r16
    56ba:	1f 93       	push	r17
    56bc:	cf 93       	push	r28
    56be:	df 93       	push	r29
    56c0:	cd b7       	in	r28, 0x3d	; 61
    56c2:	de b7       	in	r29, 0x3e	; 62
    56c4:	ca 1b       	sub	r28, r26
    56c6:	db 0b       	sbc	r29, r27
    56c8:	0f b6       	in	r0, 0x3f	; 63
    56ca:	f8 94       	cli
    56cc:	de bf       	out	0x3e, r29	; 62
    56ce:	0f be       	out	0x3f, r0	; 63
    56d0:	cd bf       	out	0x3d, r28	; 61
    56d2:	09 94       	ijmp

000056d4 <__epilogue_restores__>:
    56d4:	2a 88       	ldd	r2, Y+18	; 0x12
    56d6:	39 88       	ldd	r3, Y+17	; 0x11
    56d8:	48 88       	ldd	r4, Y+16	; 0x10
    56da:	5f 84       	ldd	r5, Y+15	; 0x0f
    56dc:	6e 84       	ldd	r6, Y+14	; 0x0e
    56de:	7d 84       	ldd	r7, Y+13	; 0x0d
    56e0:	8c 84       	ldd	r8, Y+12	; 0x0c
    56e2:	9b 84       	ldd	r9, Y+11	; 0x0b
    56e4:	aa 84       	ldd	r10, Y+10	; 0x0a
    56e6:	b9 84       	ldd	r11, Y+9	; 0x09
    56e8:	c8 84       	ldd	r12, Y+8	; 0x08
    56ea:	df 80       	ldd	r13, Y+7	; 0x07
    56ec:	ee 80       	ldd	r14, Y+6	; 0x06
    56ee:	fd 80       	ldd	r15, Y+5	; 0x05
    56f0:	0c 81       	ldd	r16, Y+4	; 0x04
    56f2:	1b 81       	ldd	r17, Y+3	; 0x03
    56f4:	aa 81       	ldd	r26, Y+2	; 0x02
    56f6:	b9 81       	ldd	r27, Y+1	; 0x01
    56f8:	ce 0f       	add	r28, r30
    56fa:	d1 1d       	adc	r29, r1
    56fc:	0f b6       	in	r0, 0x3f	; 63
    56fe:	f8 94       	cli
    5700:	de bf       	out	0x3e, r29	; 62
    5702:	0f be       	out	0x3f, r0	; 63
    5704:	cd bf       	out	0x3d, r28	; 61
    5706:	ed 01       	movw	r28, r26
    5708:	08 95       	ret

0000570a <_exit>:
    570a:	f8 94       	cli

0000570c <__stop_program>:
    570c:	ff cf       	rjmp	.-2      	; 0x570c <__stop_program>
